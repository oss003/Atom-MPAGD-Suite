ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0300
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               
000000r 2               clwflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               bigflag = 0 ;; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 1 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 1 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2  xx xx        TmpAddr:    .res 2
000059r 2  xx           bwid:	    .res 1     		; box/menu width.
00005Ar 2  xx           blen:	    .res 1     		; box/menu height.
00005Br 2  xx           btop:	    .res 1    	 	; box coordinates.
00005Cr 2  xx           blft:	    .res 1
00005Dr 2               .endif
00005Dr 2               
00005Dr 2               .if sflag .or pflag
00005Dr 2               shrctr:	    .res 1
00005Dr 2               .endif
00005Dr 2               .if pflag
00005Dr 2               explcnt:    .res 1
00005Dr 2               seed3:	    .res 1
00005Dr 2               .endif
00005Dr 2               
00005Dr 2               .if aflag
00005Dr 2               pbptr:       .res 2
00005Dr 2               pbbuf:	     .res 2
00005Dr 2               .endif
00005Dr 2               
00005Dr 2               ;sndtyp:     .res 1
00005Dr 2               
00005Dr 2               ;.if rflag
00005Dr 2  xx           sprshft:     .res 1
00005Er 2               ;.endif
00005Er 2               
00005Er 1               
00005Er 1               .segment "CODE"
000000r 1               
000000r 1               .if header
000000r 1               ;********************************************************************
000000r 1               ; ATM Header for Atom emulator Wouter Ras
000000r 1               
000000r 1               .org asm_code-22*header
0002EA  1               name_start:
0002EA  1  41 47 44     	.byte filenaam			; Filename
0002ED  1               name_end:
0002ED  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
0002F1  1  00 00 00 00  
0002F5  1  00 00 00 00  
0002FA  1               	  .byte $0
0002FA  1               	.endrep
0002FA  1               
0002FA  1  00 03        	.word asm_code			; 2 bytes startaddress
0002FC  1  00 03        	.word exec			; 2 bytes linkaddress
0002FE  1  BF 6A        	.word eind_asm-start_asm	; 2 bytes filelength
000300  1               
000300  1               ;********************************************************************
000300  1               .else
000300  1               .org asm_code
000300  1               .endif
000300  1               
000300  1               exec:
000300  1               start_asm:
000300  1               	.include "game.inc"
000300  2               .include "fogbw.inc"
000300  3               ;--------------------------------------------------------------
000300  3               ; Arcade Game Designer.
000300  3               ; (C) 2008 Jonathan Cauldwell.
000300  3               ; ZX Spectrum Next Engine v0.10
000300  3               ; Acorn Atom port by K.v.Oss v0.99 2018-2022
000300  3               ;
000300  3               ; v1.00 - JUMP/FALL changed to AGD and MPAGD behaviour
000300  3               ; v1.01 - Added HIDEBLOCK type
000300  3               
000300  3               ;--------------------------------------------------------------
000300  3               
000300  3               ; Conditional compilation flags
000300  3               ; Code is installed if flag is set
000300  3               ; Flags are set in commandline assembly or by the compiler
000300  3               
000300  3               ; Flags set by AGD compiler
000300  3               ;	cflag			; collectable blocks
000300  3               ;	dflag 			; digging mode
000300  3               ;	lflag			; ladders
000300  3               ;	mflag  			; MENU + INV
000300  3               ;	oflag			; objects
000300  3               ;	pflag 			; particle engine
000300  3               ;	sflag 			; scrollytext
000300  3               ;	clwflag			; CLW code
000300  3               ;	bigflag			; Bigtext code
000300  3               ;
000300  3               ; Flags set manually
000300  3               ;	aflag			; adventure mode
000300  3               ;	bflag			; big sprites (16x24)
000300  3               ;	crflag			; crumbling blocks
000300  3               ;	fflag			; floppy version (skip #0axx)
000300  3               ;	gflag			; graphic colour mode
000300  3               ;	hflag			; hidden sprite mode
000300  3               ;	iflag			; invert mode
000300  3               ;	kflag			; color attributes control (Breakanoid)
000300  3               ;	rflag			; RAM Pre-Shifted Tables
000300  3               ;	xflag			; metablocks (16x16)
000300  3               
000300  3               ;----------------------------------------------------------------
000300  3               ; DOS version flag
000300  3               ;
000300  3               ; if 0, choose atom.cfg for CA65
000300  3               ;    game compiles from $0300-$8000
000300  3               ; If 1, choose atomfloppy.cfg for CA65
000300  3               ;    game compiles part1 $0300-$0A00
000300  3               ;                  part2 $0B00-$8000
000300  3               ;----------------------------------------------------------------
000300  3               
000300  3               dosversion	= 0
000300  3               ;bigflag    	= 1
000300  3               ;crflag    	= 0
000300  3               kflag		= 0
000300  3               wflag		= 0
000300  3               ;rflag = 0
000300  3               
000300  3               .if aflag
000300  3               	.out "- Adventure mode enabled"
000300  3               .endif
000300  3               .if bflag
000300  3               	.out "- Big Sprites (16x24) enabled"
000300  3               .endif
000300  3               .if bigflag
000300  3               	.out "- Big Text enabled"
000300  3               .endif
000300  3               .if cflag
000300  3               	.out "- Collectable blocks enabled"
000300  3               .endif
000300  3               .if crflag
000300  3               	.out "- Crumbled blockmode enabled"
000300  3               .endif
000300  3               .if dflag
000300  3               	.out "- Digging enabled"
000300  3               .endif
000300  3               .if gflag
000300  3               	.out "- Colourmode enabled"
000300  3               .endif
000300  3               .if hflag
000300  3               	.out "- Hidden sprites/foregroundblocks enabled"
000300  3               .endif
000300  3               .if iflag
000300  3               	.out "- Invert mode enabled"
000300  3               .endif
000300  3               .if kflag
000300  3               	.out "- Save colour table enabled"
000300  3               .endif
000300  3               .if lflag
000300  3               	.out "- Ladders enabled"
000300  3               .endif
000300  3               .if mflag
000300  3               	.out "- MEN/INV enabled"
000300  3               .endif
000300  3               .if oflag
000300  3               	.out "- Objects enabled"
000300  3               .endif
000300  3               .if pflag
000300  3               	.out "- Particles enabled"
000300  3               .endif
000300  3               .if rflag
000300  3               	.out "- RAM saving spritemode enabled"
000300  3               .endif
000300  3               .if sflag
000300  3               	.out "- Scrolling enabled"
000300  3               .endif
000300  3               .if xflag
000300  3               	.out "- Metabclocksmode enabled"
000300  3               .endif
000300  3               .out ""
000300  3               
000300  3               ; Global definitions ------------------------------------------------------------
000300  3               
000300  3               	FONT = font		; Font address
000300  3               
000300  3               	green	= $00		; Colour definition filters
000300  3               	yellow	= $55
000300  3               	blue	= $aa
000300  3               	red	= $ff
000300  3               
000300  3               ; Block characteristics.
000300  3               
000300  3               	PLATFM	= 1		; platform.
000300  3               	WALL	= PLATFM + 1	; solid wall.
000300  3               	LADDER	= WALL + 1	; ladder.
000300  3               	FODDER	= LADDER + 1	; fodder block.
000300  3               	DEADLY	= FODDER + 1	; deadly block.
000300  3               	CUSTOM	= DEADLY + 1	; custom block.
000300  3               	WATER	= CUSTOM + 1	; water block.
000300  3                       COLECT	= WATER + 1	; collectable block.
000300  3               	HIDDEN  = COLECT + 1	; hide behind block
000300  3                       NUMTYP	= COLECT + 1	; number of types.
000300  3               
000300  3               ; Sprites.
000300  3               
000300  3               .if bflag
000300  3               	SPR_HGT	= 24		; Sprite height
000300  3               	SPR_WID = 16		; Sprite width
000300  3               	NUMSPR	= 8		; number of sprites.
000300  3               .else				; 16x16 sprites
000300  3               	SPR_HGT = 16		; Sprite height
000300  3               	SPR_WID = 16		; Sprite width
000300  3               	NUMSPR	= 12		; number of sprites.
000300  3               .endif
000300  3               
000300  3               	TABSIZ = 17		; size of each entry.
000300  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000300  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000300  3               	var_X  = 8		; new x coordinate of sprite.
000300  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000300  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000300  3               	COLDIST = 16		; Collision distance
000300  3               
000300  3               ; Particle engine.
000300  3               
000300  3               	NUMSHR = 55		; pieces of shrapnel.
000300  3               	SHRSIZ = 6		; bytes per particle.
000300  3               
000300  3               ; System constants
000300  3               
000300  3               	ScreenAddr  = $8000	; Startaddress video RAM
000300  3               	ScrSelAddr  = $b000	; Screen selection address
000300  3               	KeyRowAddr  = $b000	; PIA key matrix row
000300  3               	KeyColAddr  = $b001	; PIA key matrix column
000300  3               	SpeakerBit  = $b002	; Speaker bit
000300  3               	CmdReg      = $b400	; Command register AtoMMC
000300  3               	DatReg      = $b401	; Data register AtoMMC
000300  3               	Timer2_Low  = $b808	; Timer 2 low byte
000300  3               	Timer2_High = $b809	; Timer 2 high byte
000300  3               	Timer1_Low  = $b804	; Timer 1 low byte
000300  3               	Timer1_High = $b805	; Timer 1 high byte
000300  3               
000300  3               ; System calls
000300  3               
000300  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000300  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000300  3               	OSRDCH   = $fe94	; get key subroutine
000300  3                       READKEY  = $fe71	; scan key matrix subroutine
000300  3               	OSWRCH	 = $fff4	; write character
000300  3               
000300  3               
000300  3               .if iflag
000300  3               	TxtInvert   = $ff	; Invert byte for character printing
000300  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000300  3               .else
000300  3               	TxtInvert   = $00	; Invert byte for character printing
000300  3               	ScrFillByte = $00	; Screen fill byte for CLS
000300  3               .endif
000300  3               
000300  3               .if gflag
000300  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
000300  3               .else
000300  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
000300  3               .endif
000300  3               
000300  3               ;===============================================================
000300  3               ; Game starts here
000300  3               ;===============================================================
000300  3               
000300  3               .segment "CODE"
000300  3               
000300  3               ; Clear variables
000300  3               
000300  3  A9 00        	lda #0
000302  3  A2 00        	ldx #0
000304  3               clrloop:
000304  3  95 00        	sta 0,x
000306  3  E8           	inx
000307  3  D0 FB        	bne clrloop
000309  3               
000309  3  A9 E0        	lda #$e0		; T1 continuous
00030B  3  8D 0B B8     	sta $b80b
00030E  3  A9 7F        	lda #$7f		; No int
000310  3  8D 0E B8     	sta $b80e
000313  3  A9 00        	lda #0
000315  3  8D 0D B8     	sta $b80d		; Clear interrupt flags
000318  3  A9 40        	lda #<40000
00031A  3  8D 04 B8     	sta Timer1_Low
00031D  3  A9 9C        	lda #>40000
00031F  3  8D 05 B8     	sta Timer1_High
000322  3               
000322  3  20 B1 0D     	jsr game	 	; start the game.
000325  3  A9 0C        	lda #12			; Clear screen + exit to Basic
000327  3  20 F4 FF     	jsr OSWRCH
00032A  3  4C B2 C2     	jmp $C2B2		; Back to Basic
00032D  3               
00032D  3               ;------------------------------------------------------------------
00032D  3               ; Sprite table
00032D  3               ;------------------------------------------------------------------
00032D  3               
00032D  3               
00032D  3               ; ix+0  = type.
00032D  3               ; ix+1  = sprite image number.
00032D  3               ; ix+2  = frame.
00032D  3               ; ix+3  = y coord.
00032D  3               ; ix+4  = x coord.
00032D  3               
00032D  3               ; ix+5  = new type.
00032D  3               ; ix+6  = new image number.
00032D  3               ; ix+7  = new frame.
00032D  3               ; ix+8  = new y coord.
00032D  3               ; ix+9  = new x coord.
00032D  3               
00032D  3               ; ix+10 = direction.
00032D  3               ; ix+11 = parameter 1.
00032D  3               ; ix+12 = parameter 2.
00032D  3               ; ix+13 = jump pointer low.
00032D  3               ; ix+14 = jump pointer high.
00032D  3               ; ix+15 = data pointer low.
00032D  3               ; ix+16 = data pointer high.
00032D  3               
00032D  3               ; block NUMSPR * TABSIZ,255
00032D  3               
00032D  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
000331  3  FF FF FF FF  
000335  3  FF FF FF FF  
0003F9  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0003FD  3  FF FF FF 00  
000401  3  C0 78 00 00  
00040A  3  07           roomtb:	.byte 7                      ; start room map offset.
00040B  3               
00040B  3               ;----------------------------------------------
00040B  3               ; Copy sprite from list to table.
00040B  3               ;
00040B  3               ; global:	hl,ix
00040B  3               ; local:	y
00040B  3               ; calls:	evnt09
00040B  3               ;----------------------------------------------
00040B  3               
00040B  3               cpsp:
00040B  3  A0 00        	ldy #0				; fetch byte from table.
00040D  3  B1 66        	lda (z80_hl),y
00040F  3  91 68        	sta (z80_ix),y			; set up type.
000411  3  A0 05        	ldy #PAM1ST
000413  3  91 68        	sta (z80_ix),y 			; set up type.
000415  3               
000415  3  E6 66        	inc z80_l 			; move to next byte.
000417  3  D0 02        	bne :+
000419  3  E6 67        	inc z80_h
00041B  3               :
00041B  3  A0 00        	ldy #0 				; fetch byte from table.
00041D  3  B1 66        	lda (z80_hl),y
00041F  3  A0 06        	ldy #6
000421  3  91 68        	sta (z80_ix),y			; set up image.
000423  3               
000423  3  E6 66        	inc z80_l 			; move to next byte.
000425  3  D0 02        	bne :+
000427  3  E6 67        	inc z80_h
000429  3               :
000429  3  A0 00        	ldy #0
00042B  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
00042D  3  A0 08        	ldy #8
00042F  3  91 68        	sta (z80_ix),y 			; set up coordinate.
000431  3               
000431  3  A9 C8        	lda #200 			; set initial coordinate off screen.
000433  3  A0 03        	ldy #3
000435  3  91 68        	sta (z80_ix),y
000437  3               
000437  3  E6 66        	inc z80_l 			; move to next byte.
000439  3  D0 02        	bne :+
00043B  3  E6 67        	inc z80_h
00043D  3               :
00043D  3  A0 00        	ldy #0 				; fetch byte from table.
00043F  3  B1 66        	lda (z80_hl),y
000441  3  A0 09        	ldy #9
000443  3  91 68        	sta (z80_ix),y 			; set up coordinate.
000445  3               
000445  3  E6 66        	inc z80_l 			; move to next byte.
000447  3  D0 02        	bne :+
000449  3  E6 67        	inc z80_h
00044B  3               :
00044B  3  A9 00        	lda #0				; zeroes in accumulator.
00044D  3  A0 07        	ldy #7 				; reset frame number.
00044F  3  91 68        	sta (z80_ix),y
000451  3  A0 0A        	ldy #10 			; reset direction.
000453  3  91 68        	sta (z80_ix),y
000455  3  A0 0D        	ldy #13				; reset jump pointer low.
000457  3  91 68        	sta (z80_ix),y
000459  3  A0 0E        	ldy #14	 			; reset jump pointer high.
00045B  3  91 68        	sta (z80_ix),y
00045D  3               
00045D  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
00045F  3  A0 10        	ldy #16
000461  3  91 68        	sta (z80_ix),y
000463  3               evis0:
000463  3  A5 69        	lda z80_i
000465  3  48           	pha
000466  3  A5 68        	lda z80_x
000468  3  48           	pha
000469  3  A5 67        	lda z80_h
00046B  3  48           	pha
00046C  3  A5 66        	lda z80_l
00046E  3  48           	pha
00046F  3               
00046F  3  20 CC 24     	jsr evnt09 			; perform event.
000472  3               
000472  3  68           	pla
000473  3  85 66        	sta z80_l
000475  3  68           	pla
000476  3  85 67        	sta z80_h
000478  3  68           	pla
000479  3  85 68        	sta z80_x
00047B  3  68           	pla
00047C  3  85 69        	sta z80_i
00047E  3               
00047E  3  18           	clc
00047F  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
000481  3  69 11        	adc #TABSIZ		 	; next sprite.
000483  3  85 68        	sta z80_x
000485  3  90 02        	bcc :+
000487  3  E6 69        	inc z80_i
000489  3               :
000489  3  60           	rts
00048A  3               
00048A  3               ;-----------------------------------------
00048A  3               ; Jump to new screen.
00048A  3               ;-----------------------------------------
00048A  3               
00048A  3               nwscr:
00048A  3  A2 00        	ldx #0				; start of map data.
00048C  3               nwscr0:
00048C  3  DD 01 1A     	cmp mapdat,x
00048F  3  F0 06        	beq nwscr1			; have we found a match for screen?
000491  3  E8           	inx 				; next room.
000492  3  E0 50        	cpx #80				; zero room count, 80 to search.
000494  3  D0 F6        	bne nwscr0			; keep looking.
000496  3  60           	rts
000497  3               nwscr1:
000497  3  8E 0A 04     	stx roomtb			; set the map position.
00049A  3  4C 3B 08     	jmp scrl1			; draw new room.
00049D  3               
00049D  3               
00049D  3               ;----------------------------------------------------------
00049D  3               ; Gravity processing.
00049D  3               ;----------------------------------------------------------
00049D  3               
00049D  3               grav:
00049D  3               .if wflag
00049D  3               rmwatr:
00049D  3               	ldx #0
00049D  3               	lda #SPR_HGT
00049D  3               	lsr a
00049D  3               	sec
00049D  3               	sbc #1
00049D  3               	clc
00049D  3               	ldy #8
00049D  3               	adc (z80_ix),y
00049D  3               	sta z80_l
00049D  3               	sta dispy
00049D  3               	ldy #9
00049D  3               	lda (z80_ix),y
00049D  3               	sta z80_h
00049D  3               	sta dispx
00049D  3               	jsr tstbl
00049D  3               	cmp #WATER
00049D  3               	beq :+
00049D  3               	jmp grav_skip
00049D  3               
00049D  3               :	ldy #13
00049D  3               	lda (z80_ix),y
00049D  3               	sta z80_l
00049D  3               	ldy #14
00049D  3               	lda (z80_ix),y
00049D  3               	sta z80_h
00049D  3               	bne watr4
00049D  3               	ldx #8
00049D  3               watr4:
00049D  3               	lda wtab,x
00049D  3               	cmp #255
00049D  3               	bne :+
00049D  3               	jmp gravu
00049D  3               :	cmp #98
00049D  3               	bne watr1
00049D  3               	dex
00049D  3               	lda wtab,x
00049D  3               watr1:	ldx #0
00049D  3               watr0:
00049D  3               	cpx #0
00049D  3               	beq watr3
00049D  3               	bcs watr2
00049D  3               	inx
00049D  3               	jmp watr0
00049D  3               watr3:
00049D  3               	inx
00049D  3               watr2:
00049D  3               	clc
00049D  3               	txa
00049D  3               	adc z80_l
00049D  3               	ldy #13
00049D  3               	sta (z80_ix),y
00049D  3               	lda z80_h
00049D  3               	adc #0
00049D  3               	iny
00049D  3               	sta (z80_ix),y
00049D  3               	ldx #0
00049D  3               	lda (z80_ix),y
00049D  3               	cmp #98
00049D  3               	beq :+
00049D  3               	jmp grav1
00049D  3               :	dex
00049D  3               	jmp watr2
00049D  3               
00049D  3               wtab:	.byte $f8,$fa,$fc,$fd,$fe,$ff,0,255,0,$ff,98
00049D  3               ;.byte 8,6,4,3,2,1,0,255,0,1,98
00049D  3               
00049D  3               .endif
00049D  3               
00049D  3               grav_skip:
00049D  3  A0 0D        	ldy #13		; grav   ld a,(ix+13)        ; in-air flag.
00049F  3  B1 68        	lda (z80_ix),y
0004A1  3               			;        and a               ; are we in the air?
0004A1  3  F0 39        	beq gravex
0004A3  3  18           	clc		;        inc a               ; increment it.
0004A4  3  69 01        	adc #1
0004A6  3  F0 66        	beq ogrv	;        jp z,ogrv           ; set to 255, use old gravity.
0004A8  3  91 68        	sta (z80_ix),y	;        ld (ix+13),a        ; write new setting.
0004AA  3               
0004AA  3  6A           	ror a		;        rra                 ; every other frame.
0004AB  3  90 0D        	bcc grav0	;        jr nc,grav0         ; don't apply gravity this time.
0004AD  3  A0 0E        	ldy #14		;        ld a,(ix+14)        ; pixels to move.
0004AF  3  B1 68        	lda (z80_ix),y
0004B1  3  C9 10        	cmp #16		;        cp 16               ; reached maximum?
0004B3  3  F0 05        	beq grav0	;        jr z,grav0          ; yes, continue.
0004B5  3  18           	clc		;        inc (ix+14)         ; slow down ascent/speed up fall.
0004B6  3  69 01        	adc #1
0004B8  3  91 68        	sta (z80_ix),y
0004BA  3  A0 0E        grav0:	ldy #14		; grav0  ld a,(ix+14)        ; get distance to move.
0004BC  3  B1 68        	lda (z80_ix),y
0004BE  3  48           	pha
0004BF  3  0A           	asl a
0004C0  3  68           	pla
0004C1  3  6A           	ror a		;        sra a               ; divide by 2.
0004C2  3               			;        and a               ; any movement required?
0004C2  3  F0 18        grav1:	beq gravex
0004C4  3  C9 80        	cmp #128	;        cp 128              ; is it up or down?
0004C6  3  B0 15        	bcs gravu	;        jr nc,gravu         ; it's up.
0004C8  3  85 63        gravd:	sta z80_b	; gravd  ld b,a              ; set pixels to move.
0004CA  3  20 3B 15     gravd0:	jsr cangd	; gravd0 call cangd          ; can we go down?
0004CD  3  D0 2B        	bne gravst	;        jr nz,gravst        ; can't move down, so stop.
0004CF  3  A0 08        	ldy #8		;        inc (ix+8)          ; adjust new x coord.
0004D1  3  B1 68        	lda (z80_ix),y
0004D3  3  18           	clc
0004D4  3  69 01        	adc #1
0004D6  3  91 68        	sta (z80_ix),y
0004D8  3  C6 63        	dec z80_b
0004DA  3  D0 EE        	bne gravd0	;        djnz gravd0
0004DC  3  60           gravex:	rts		;        ret
0004DD  3               
0004DD  3  49 FF        gravu:	eor #$ff	; gravu  neg                 ; flip the sign so it's positive.
0004DF  3  18           	clc
0004E0  3  69 01        	adc #1
0004E2  3  85 63        	sta z80_b	;        ld b,a              ; set pixels to move.
0004E4  3  20 06 15     gravu0:	jsr cangu	; gravu0 call cangu          ; can we go up?
0004E7  3  F0 03        	beq :+
0004E9  3  4C C5 05     	jmp ifalls	;        jp nz,ifalls        ; can't move up, go down next.
0004EC  3               :
0004EC  3  A0 08        	ldy #8		;        dec (ix+8)          ; adjust new x coord.
0004EE  3  B1 68        	lda (z80_ix),y
0004F0  3  38           	sec
0004F1  3  E9 01        	sbc #1
0004F3  3  91 68        	sta (z80_ix),y
0004F5  3  C6 63        	dec z80_b	;        djnz gravu0
0004F7  3  D0 EB        	bne gravu0
0004F9  3  60           	rts		;        ret
0004FA  3  A0 0E        gravst:	ldy #14
0004FC  3  A9 00        	lda #0
0004FE  3  91 68        	sta (z80_ix),y	;        ld (ix+14),0        ; store new speed.
000500  3  88           	dey
000501  3  91 68        	sta (z80_ix),y	;        ld (ix+13),0        ; reset falling flag.
000503  3  C8           	iny		; gravst ld a,(ix+14)        ; jump pointer high.
000504  3  B1 68        	lda (z80_ix),y
000506  3  C9 08        	cmp #8		;        cp 8                ; was speed the maximum?
000508  3  D0 03        evftf:	bne :+
00050A  3  4C B4 27     	jmp evnt15	; evftf  jp z,evnt15         ; yes, fallen too far.
00050D  3               :
00050D  3  60           	rts		;        ret
00050E  3               
00050E  3               ; Old gravity processing for compatibility with 4.6 and 4.7.
00050E  3               
00050E  3               ogrv:
00050E  3  A0 0E        	ldy #14		; ogrv   ld e,(ix+14)        ; get index to table.
000510  3  B1 68        	lda (z80_ix),y
000512  3  AA           	tax
000513  3               			;        ld d,0              ; no high byte.
000513  3               			;        ld hl,jtab          ; jump table.
000513  3               			;        add hl,de           ; hl points to jump value.
000513  3  BD 6D 6D     	lda jtab,x	;        ld a,(hl)           ; pixels to move.
000516  3               .if wflag
000516  3               	cmp #98
000516  3               	beq ogrv2
000516  3               .endif
000516  3  C9 63        	cmp #99		;        cp 99               ; reached the end?
000518  3  D0 07        	bne ogrv0	;        jr nz,ogrv0         ; no, continue.
00051A  3  CA           	dex		;        dec hl              ; go back to previous value.
00051B  3  BD 6D 6D     	lda jtab,x	;        ld a,(hl)           ; fetch that from table.
00051E  3  4C 2C 05     	jmp ogrv1	;        jr ogrv1
000521  3  48           ogrv0:	pha
000522  3  A0 0E        	ldy #14		; ogrv0  inc (ix+14)         ; point to next table entry.
000524  3  B1 68        	lda (z80_ix),y
000526  3  18           	clc
000527  3  69 01        	adc #1
000529  3  91 68        	sta (z80_ix),y
00052B  3  68           	pla
00052C  3               ogrv1:			; ogrv1  and a               ; any movement required?
00052C  3  F0 32        	beq ogrvex
00052E  3  C9 80        	cmp #128	;        cp 128              ; is it up or down?
000530  3  B0 15        	bcs ogrvu	;        jr nc,ogrvu         ; it's up.
000532  3  85 63        ogrvd:	sta z80_b	; ogrvd  ld b,a              ; set pixels to move.
000534  3  20 3B 15     ogrvd0:	jsr cangd	; ogrvd0 call cangd          ; can we go down?
000537  3  D0 28        	bne ogrvst	;        jr nz,ogrvst        ; can't move down, so stop.
000539  3  A0 08        	ldy #8		;        inc (ix+8)          ; adjust new x coord.
00053B  3  B1 68        	lda (z80_ix),y
00053D  3  18           	clc
00053E  3  69 01        	adc #1
000540  3  91 68        	sta (z80_ix),y
000542  3  C6 63        	dec z80_b
000544  3  D0 EE        	bne ogrvd0	;        djnz ogrvd0
000546  3  60           	rts		;        ret
000547  3               
000547  3  49 FF        ogrvu:	eor #$ff	; ogrvu  neg                 ; flip the sign so it's positive.
000549  3  18           	clc
00054A  3  69 01        	adc #1
00054C  3  85 63        	sta z80_b	;        ld b,a              ; set pixels to move.
00054E  3  20 06 15     ogrvu0:	jsr cangu	; ogrvu0 call cangu          ; can we go up?
000551  3  D0 25        	bne ogrv2	;        jr nz,ogrv2         ; can't move up, go down next.
000553  3  A0 08        	ldy #8		;        dec (ix+8)          ; adjust new x coord.
000555  3  B1 68        	lda (z80_ix),y
000557  3  38           	sec
000558  3  E9 01        	sbc #1
00055A  3  91 68        	sta (z80_ix),y
00055C  3  C6 63        	dec z80_b	;        djnz ogrvu0
00055E  3  D0 EE        	bne ogrvu0
000560  3  60           ogrvex:	rts		;        ret
000561  3               
000561  3  A0 0E        ogrvst:	ldy #14		; ogrvst ld e,(ix+14)        ; get index to table.
000563  3  B1 68        	lda (z80_ix),y
000565  3  AA           	tax
000566  3               			;        ld d,0              ; no high byte.
000566  3               			;        ld hl,jtab          ; jump table.
000566  3               			;        add hl,de           ; hl points to jump value.
000566  3               
000566  3  A9 00        	lda #0		;        ld (ix+13),0        ; reset jump flag.
000568  3  91 68        	sta (z80_ix),y
00056A  3  88           	dey
00056B  3  91 68        	sta (z80_ix),y	;        ld (ix+14),0        ; reset pointer.
00056D  3  BD 6D 6D     	lda jtab,x	;        ld a,(hl)           ; fetch byte from table.
000570  3  C9 63        	cmp #99		;        cp 99               ; is it the end marker?
000572  3  D0 03        	bne :+
000574  3  4C B4 27     	jmp evnt15	; evftf  jp z,evnt15         ; yes, fallen too far.
000577  3               :
000577  3  60           	rts		;        ret
000578  3               
000578  3               ogrv2:			; ogrv2  ld hl,jtab          ; jump table.
000578  3  A9 00        	lda #0		;        ld b,0              ; offset into table.
00057A  3  85 63        	sta z80_b
00057C  3  BD 6D 6D     ogrv4:	lda jtab,x	; ogrv4  ld a,(hl)           ; fetch table byte.
00057F  3  C9 64        	cmp #100	;        cp 100              ; hit end or downward move?
000581  3  30 06        	bmi ogrv3	;        jr c,ogrv3          ; yes.
000583  3  E8           	inx		;        inc hl              ; next byte of table.
000584  3  E6 63        	inc z80_b	;        inc b               ; next offset.
000586  3  4C 7C 05     	jmp ogrv4	;        jr ogrv4            ; keep going until we find crest/end of table.
000589  3  A0 0E        ogrv3:	ldy #14		; ogrv3  ld (ix+14),b        ; set next table offset.
00058B  3  A5 63        	lda z80_b
00058D  3  91 68        	sta (z80_ix),y
00058F  3  60           	rts		;        ret
000590  3               
000590  3               ; Initiate fall check.
000590  3               
000590  3  A0 0D        ifall:	ldy #13		; ifall  ld a,(ix+13)        ; jump pointer flag.
000592  3  B1 68        	lda (z80_ix),y
000594  3               			;        and a               ; are we in the air?
000594  3  F0 01        	beq :+		;        ret nz              ; if set, we're already in the air.
000596  3  60           	rts
000597  3               :
000597  3  A0 09        	ldy #9		;        ld h,(ix+9)         ; y coordinate.
000599  3  B1 68        	lda (z80_ix),y
00059B  3  85 rr        	sta dispx
00059D  3  A0 08        	ldy #8		;        add a,(ix+8)        ; add x coordinate.
00059F  3  B1 68        	lda (z80_ix),y
0005A1  3  18           	clc
0005A2  3  69 10        	adc #SPR_HGT	;        ld a,16             ; look down 16 pixels.
0005A4  3  85 rr        	sta dispy	;        ld l,a              ; coords in hl.
0005A6  3               			;        ld (dispx),hl       ; set up test coordinates.
0005A6  3  20 B4 16     	jsr tstbl	;        call tstbl          ; get map address.
0005A9  3  20 CD 15     	jsr plchk	;        call plchk          ; block, platform check.
0005AC  3  F0 01        	beq :+		;        ret nz              ; it's solid, don't fall.
0005AE  3  60           	rts
0005AF  3               :
0005AF  3  E6 rr        	inc bufaddr	;        inc hl              ; look right one cell.
0005B1  3  20 CD 15     	jsr plchk	;        call plchk          ; block, platform check.
0005B4  3  F0 01        	beq :+
0005B6  3  60           	rts		;        ret nz              ; it's solid, don't fall.
0005B7  3               :
0005B7  3  A5 rr        	lda dispx	;        ld a,(dispy)        ; y coordinate.
0005B9  3  29 07        	and #7		;        and 7               ; position straddling block cells.
0005BB  3  F0 08        	beq ifalls	;        jr z,ifalls         ; no more checks needed.
0005BD  3  E6 rr        	inc bufaddr	;        inc hl              ; look to third cell.
0005BF  3  20 CD 15     	jsr plchk	;        call plchk          ; block, platform check.
0005C2  3  F0 01        	beq ifalls
0005C4  3  60           	rts		;        ret nz              ; it's solid, don't fall.
0005C5  3               
0005C5  3  A0 0D        ifalls:	ldy #13		; ifalls inc (ix+13)         ; set in air flag.
0005C7  3  B1 68        	lda (z80_ix),y
0005C9  3  18           	clc
0005CA  3  69 01        	adc #1
0005CC  3  91 68        	sta (z80_ix),y
0005CE  3  A9 00        	lda #0		;        ld (ix+14),0        ; initial speed = 0
0005D0  3  C8           	iny
0005D1  3  91 68        	sta (z80_ix),y
0005D3  3  60           	rts		;        ret
0005D4  3               
0005D4  3  A0 0D        tfall:	ldy #13		; tfall  ld a,(ix+13)        ; jump pointer flag.
0005D6  3  B1 68        	lda (z80_ix),y
0005D8  3               			;        and a               ; are we in the air?
0005D8  3  F0 01        	beq :+
0005DA  3  60           	rts		;        ret nz              ; if set, we're already in the air.
0005DB  3  20 90 05     :	jsr ifall	;        call ifall          ; do fall test.
0005DE  3  A0 0D        	ldy #13		;        ld a,(ix+13)        ; get falling flag.
0005E0  3  B1 68        	lda (z80_ix),y
0005E2  3               			;        and a               ; is it set?
0005E2  3  D0 01        	bne :+
0005E4  3  60           	rts		;        ret z               ; no.
0005E5  3  A9 01        :	lda #1
0005E7  3  91 68        	sta (z80_ix),y	;        ld (ix+13),255      ; we're using the table.
0005E9  3  4C 78 05     	jmp ogrv2	;        jr ogrv2            ; find position in table.
0005EC  3               
0005EC  3               
0005EC  3               ;----------------------------------------------------
0005EC  3               ; Get frame data for a particular sprite.
0005EC  3               ; Input:
0005EC  3               ;  a		= framenumer
0005EC  3               ; Output:
0005EC  3               ;  hl		= frame address
0005EC  3               ;
0005EC  3               ; global:	hl,frmptr
0005EC  3               ; local:	-
0005EC  3               ; calls:	-
0005EC  3               ;----------------------------------------------------
0005EC  3               
0005EC  3               gfrm:
0005EC  3  0A           	asl a	 		 	; multiple of 2.
0005ED  3  18           	clc
0005EE  3  69 EC        	adc #<frmlst 			; frames used by game.
0005F0  3  85 66        	sta z80_l
0005F2  3  A9 42        	lda #>frmlst
0005F4  3  69 00        	adc #0
0005F6  3  85 67        	sta z80_h 			; point to frame start.
0005F8  3  60           	rts
0005F9  3               
0005F9  3               ;----------------------------------------------------
0005F9  3               ; Find sprite list for current room.
0005F9  3               ;
0005F9  3               ; global:	hl
0005F9  3               ; local:	x,y
0005F9  3               ; calls:	-
0005F9  3               ;----------------------------------------------------
0005F9  3               
0005F9  3               sprlst:
0005F9  3  A9 99        	lda #<nmedat 			; list of enemy sprites.
0005FB  3  85 66        	sta z80_l
0005FD  3  A9 65        	lda #>nmedat
0005FF  3  85 67        	sta z80_h
000601  3  A6 rr        	ldx scno 			; screen number.
000603  3  D0 01        	bne sprls2 			; is it the first screen?
000605  3  60           	rts 				; yes, don't need to search data.
000606  3               sprls2:
000606  3  A0 00        	ldy #0
000608  3               sprls1:
000608  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
00060A  3  C9 FF        	cmp #255			; is it an end marker?
00060C  3  F0 0E        	beq sprls0 			; yes, end of this room.
00060E  3               
00060E  3  18           	clc 				; point to next sprite in list.
00060F  3  A5 66        	lda z80_l
000611  3  69 04        	adc #NMESIZ
000613  3  85 66        	sta z80_l
000615  3  90 02        	bcc :+
000617  3  E6 67        	inc z80_h
000619  3               :
000619  3  4C 08 06     	jmp sprls1 			; continue until end of room.
00061C  3               sprls0:
00061C  3  E6 66        	inc z80_l 			; point to start of next screen.s
00061E  3  D0 02        	bne :+
000620  3  E6 67        	inc z80_h
000622  3               :
000622  3  CA           	dex
000623  3  D0 E3        	bne sprls1 			; continue until room found.
000625  3  60           	rts
000626  3               
000626  3               
000626  3               ;----------------------------------------------------
000626  3               ; Clear all but a single player sprite.
000626  3               ;
000626  3               ; global:	-
000626  3               ; local:	x,y,ix
000626  3               ; calls:	-
000626  3               ;----------------------------------------------------
000626  3               
000626  3               nspr:
000626  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000628  3  85 rr        	sta sprcnt
00062A  3  A9 2D        	lda #<sprtab 			; sprite table.
00062C  3  85 68        	sta z80_x
00062E  3  A9 03        	lda #>sprtab
000630  3  85 69        	sta z80_i
000632  3               nspr0:
000632  3  A0 00        	ldy #0 				; fetch sprite type.
000634  3  B1 68        	lda (z80_ix),y 			; is it a player?
000636  3  F0 1A        	beq nspr1 			; yes, keep this one.
000638  3               
000638  3  A9 FF        	lda #255
00063A  3  A0 00        	ldy #0 				; fetch sprite type.
00063C  3  91 68        	sta (z80_ix),y 			; delete sprite.
00063E  3  A0 05        	ldy #5
000640  3  91 68        	sta (z80_ix),y 			; remove next type.
000642  3               
000642  3  18           	clc	 			; next sprite.
000643  3  A5 68        	lda z80_x
000645  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000647  3  85 68        	sta z80_x
000649  3  90 02        	bcc :+
00064B  3  E6 69        	inc z80_i
00064D  3               :
00064D  3  C6 rr        	dec sprcnt	 			; one less space in the table.
00064F  3  D0 E1        	bne nspr0
000651  3  60           	rts
000652  3               nspr1:
000652  3  A9 FF        	lda #255
000654  3  A0 00        	ldy #0
000656  3  91 68        	sta (z80_ix),y 			; delete sprite.
000658  3               
000658  3  18           	clc	 			; point to next sprite.
000659  3  A5 68        	lda z80_x
00065B  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00065D  3  85 68        	sta z80_x
00065F  3  90 02        	bcc :+
000661  3  E6 69        	inc z80_i
000663  3               :
000663  3  C6 rr        	dec sprcnt	 			; one less to do.
000665  3  D0 01        	bne nspr2
000667  3  60           	rts
000668  3               nspr2:
000668  3  A9 FF        	lda #255
00066A  3  A0 00        	ldy #0
00066C  3  91 68        	sta (z80_ix),y 			; delete sprite.
00066E  3  A0 05        	ldy #5
000670  3  91 68        	sta (z80_ix),y 			; remove next type.
000672  3               
000672  3  18           	clc	 			; next sprite.
000673  3  A5 68        	lda z80_x
000675  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000677  3  85 68        	sta z80_x
000679  3  90 02        	bcc :+
00067B  3  E6 69        	inc z80_i
00067D  3               :
00067D  3  C6 rr        	dec sprcnt	 			; one less space in table.
00067F  3  D0 E7        	bne nspr2
000681  3  60           	rts
000682  3               
000682  3               ;----------------------------------------------------------
000682  3               ; Two initialisation routines.
000682  3               ; Initialise sprites - copy everything from list to table.
000682  3               ;
000682  3               ; global:	-
000682  3               ; local:	x,y,ix
000682  3               ; calls:	cpsp
000682  3               ;----------------------------------------------------------
000682  3               
000682  3               ispr:
000682  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000684  3  85 rr        	sta sprcnt
000686  3  A9 2D        	lda #<sprtab			; sprite table.
000688  3  85 68        	sta z80_x
00068A  3  A9 03        	lda #>sprtab
00068C  3  85 69        	sta z80_i
00068E  3               ispr2:
00068E  3  A0 00        	ldy #0
000690  3  B1 66        	lda (z80_hl),y 			; fetch byte.
000692  3  C9 FF        	cmp #255 			; is it an end marker?
000694  3  D0 01        	bne :+
000696  3  60           	rts 				; yes, no more to do.
000697  3               :
000697  3               ispr1:
000697  3  A0 00        	ldy #0
000699  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
00069B  3  C9 FF        	cmp #255 			; is it enabled yet?
00069D  3  D0 08        	bne ispr4			; yes, try another slot.
00069F  3               
00069F  3  A0 05        	ldy #5
0006A1  3  B1 68        	lda (z80_ix),y		 	; next type.
0006A3  3  C9 FF        	cmp #255 			; is it enabled yet?
0006A5  3  F0 10        	beq ispr3 			; no, process this one.
0006A7  3               ispr4:
0006A7  3  18           	clc 				; next sprite.
0006A8  3  A5 68        	lda z80_x
0006AA  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0006AC  3  85 68        	sta z80_x
0006AE  3  90 02        	bcc :+
0006B0  3  E6 69        	inc z80_i
0006B2  3               :
0006B2  3  C6 rr        	dec sprcnt
0006B4  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0006B6  3  60           	rts  				; no more room in table.
0006B7  3               ispr3:
0006B7  3  20 0B 04     	jsr cpsp			; initialise a sprite.
0006BA  3  C6 rr        	dec sprcnt			; one less space in the table.
0006BC  3  D0 D0        	bne ispr2
0006BE  3  60           	rts
0006BF  3               
0006BF  3               
0006BF  3               ;-----------------------------------------------------------------------
0006BF  3               ; Initialise sprites - but not player, we're keeping the old one.
0006BF  3               ;
0006BF  3               ; global:	-
0006BF  3               ; local:	x,y,ix
0006BF  3               ; calls:	cpsp
0006BF  3               ;-----------------------------------------------------------------------
0006BF  3               
0006BF  3               kspr:
0006BF  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0006C1  3  A9 2D        	lda #<sprtab 			; sprite table.
0006C3  3  85 68        	sta z80_x
0006C5  3  A9 03        	lda #>sprtab
0006C7  3  85 69        	sta z80_i
0006C9  3               kspr2:
0006C9  3  A0 00        	ldy #0
0006CB  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0006CD  3  C9 FF        	cmp #255 			; is it an end marker?
0006CF  3  D0 01        	bne :+
0006D1  3  60           	rts 				; yes, no more to do.
0006D2  3               :
0006D2  3  C9 00        	cmp #0
0006D4  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0006D6  3               
0006D6  3  18           	clc 				; next sprite.
0006D7  3  A5 66        	lda z80_l
0006D9  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0006DB  3  85 66        	sta z80_l
0006DD  3  90 02        	bcc :+
0006DF  3  E6 67        	inc z80_h
0006E1  3               :
0006E1  3  4C C9 06     	jmp kspr2
0006E4  3               kspr1:
0006E4  3  A0 00        	ldy #0 				; fetch sprite type.
0006E6  3  B1 68        	lda (z80_ix),y
0006E8  3  C9 FF        	cmp #255 			; is it enabled yet?
0006EA  3  D0 08        	bne kspr4 			; yes, try another slot.
0006EC  3               
0006EC  3  A0 05        	ldy #5 				; next type.
0006EE  3  B1 68        	lda (z80_ix),y
0006F0  3  C9 FF        	cmp #255 			; is it enabled yet?
0006F2  3  F0 0F        	beq kspr3 			; no, process this one.
0006F4  3               kspr4:
0006F4  3  18           	clc 				; next sprite.
0006F5  3  A5 68        	lda z80_x
0006F7  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0006F9  3  85 68        	sta z80_x
0006FB  3  90 02        	bcc :+
0006FD  3  E6 69        	inc z80_i
0006FF  3               :
0006FF  3  CA           	dex	 			; repeat for remaining sprites.
000700  3  D0 E2        	bne kspr1
000702  3  60           	rts  				; no more room in table.
000703  3               kspr3:
000703  3  20 0B 04     	jsr cpsp 			; copy sprite to table.
000706  3  CA           	dex	 			; one less space in the table.
000707  3  D0 C0        	bne kspr2
000709  3  60           	rts
00070A  3               
00070A  3               ;-------------------------------------------------------------
00070A  3               ; Line drawn, now work out next target address.
00070A  3               ;
00070A  3               ; Input:
00070A  3               ;  BP  = right mask
00070A  3               ;  CP  = left mask
00070A  3               ;  DEP = spriteaddress
00070A  3               ;  z80_hlp = screen address
00070A  3               ;-------------------------------------------------------------
00070A  3               
00070A  3               
00070A  3               ;-----------------------------------------------------------
00070A  3               ; Animates a sprite.
00070A  3               ;
00070A  3               ; Input:
00070A  3               ;  IX = sprite address
00070A  3               ;  HL = last sprite address
00070A  3               ;-----------------------------------------------------------
00070A  3               
00070A  3               animsp:
00070A  3  25 rr        	and frmno
00070C  3  F0 01        	beq :+
00070E  3  60           	rts
00070F  3               :
00070F  3  A0 06        	ldy #6
000711  3  B1 68        	lda (z80_ix),y		; sprite image
000713  3  20 EC 05     	jsr gfrm		; get frame data.
000716  3               
000716  3  E6 66        	inc z80_l		; point to frames.
000718  3  D0 02        	bne :+
00071A  3  E6 67        	inc z80_h
00071C  3               :
00071C  3  A0 07        	ldy #7
00071E  3  B1 68        	lda (z80_ix),y		; sprite frame.
000720  3  18           	clc
000721  3  69 01        	adc #1			; next one along.
000723  3  A0 00        	ldy #0
000725  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
000727  3  90 02        	bcc anims0		; no, not yet.
000729  3  A9 00        	lda #0			; start at first frame.
00072B  3               anims0:
00072B  3  A0 07        	ldy #7
00072D  3  91 68        	sta (z80_ix),y		; new frame.
00072F  3  60           	rts
000730  3               
000730  3               ;--------------------------------------------------------------
000730  3               ; Animate back
000730  3               ;
000730  3               ; Input:
000730  3               ;  IX = sprite address
000730  3               ;  HL = last sprite address
000730  3               ;--------------------------------------------------------------
000730  3               
000730  3               animbk:
000730  3  25 rr        	and frmno
000732  3  F0 01        	beq :+
000734  3  60           	rts
000735  3               :
000735  3  A0 06        	ldy #6
000737  3  B1 68        	lda (z80_ix),y		; sprite image.
000739  3  20 EC 05     	jsr gfrm		; get frame data.
00073C  3               
00073C  3  E6 66        	inc z80_l 		; point to frames.
00073E  3  D0 02        	bne :+
000740  3  E6 67        	inc z80_h
000742  3               :
000742  3  A0 07        	ldy #7
000744  3  B1 68        	lda (z80_ix),y 		; sprite frame.
000746  3  F0 03        	beq :+
000748  3  4C 4F 07     	jmp rtanb0 		; yes, start at end.
00074B  3               :
00074B  3  A0 00        	ldy #0
00074D  3  B1 66        	lda (z80_hl),y 		; last sprite.
00074F  3               rtanb0:
00074F  3  38           	sec
000750  3  E9 01        	sbc #1			; next one along.
000752  3  4C 2B 07     	jmp anims0		; set new frame.
000755  3               
000755  3               ;--------------------------------------------------------------
000755  3               ; Check for collision with other sprite, strict enforcement.
000755  3               ;
000755  3               ; Input:
000755  3               ;  b		= sprite to test for
000755  3               ;  ix		= current sprite pointer
000755  3               ;
000755  3               ; global:	b
000755  3               ; local:	x,y,hl,de,skptr
000755  3               ; calls:	-
000755  3               ;--------------------------------------------------------------
000755  3               
000755  3               sktyp:
000755  3  A9 2D        	lda #<sprtab				; sprite table.
000757  3  85 66        	sta z80_l
000759  3  A9 03        	lda #>sprtab
00075B  3  85 67        	sta z80_h
00075D  3               numsp2:
00075D  3  A9 0C        	lda #NUMSPR				; number of sprites.
00075F  3  85 rr        	sta sktptr
000761  3               sktyp0:
000761  3  A5 66        	lda z80_l 				; store pointer to sprite.
000763  3  85 rr        	sta skptr
000765  3  A5 67        	lda z80_h
000767  3  85 rr        	sta skptr+1
000769  3               
000769  3  A0 00        	ldy #0
00076B  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00076D  3  C5 63        	cmp z80_b				; is it the type we seek?
00076F  3  F0 1D        	beq coltyp				; yes, we can use this one.
000771  3               sktyp1:
000771  3  18           	clc
000772  3  A5 rr        	lda skptr				; retrieve sprite pointer.
000774  3  69 11        	adc #TABSIZ				; size of each entry.
000776  3  85 66        	sta z80_l
000778  3  A5 rr        	lda skptr+1
00077A  3  69 00        	adc #0
00077C  3  85 67        	sta z80_h
00077E  3  C6 rr        	dec sktptr					; one less iteration.
000780  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000782  3  A9 00        	lda #0					; default to ROM address - no sprite.
000784  3  85 66        	sta z80_l
000786  3  85 67        	sta z80_h
000788  3  85 rr        	sta skptr				; store pointer to sprite.
00078A  3  85 rr        	sta skptr+1
00078C  3               
00078C  3  18           	clc					; don't return with zero flag set.
00078D  3  60           	rts 					; didn't find one.
00078E  3               
00078E  3               ;skptr:	.word 0					; search pointer.
00078E  3               ;sktptr:	.byte 0
00078E  3               
00078E  3               coltyp:
00078E  3  A0 00        	ldy #0
000790  3  B1 68        	lda (z80_ix),y				; current sprite type.
000792  3  C5 63        	cmp z80_b				; seeking sprite of same type?
000794  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000796  3               colty0:
000796  3  A0 09        	ldy #9					; distance to x position in table.
000798  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
00079A  3  85 64        	sta z80_e
00079C  3  88           	dey
00079D  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
00079F  3  85 65        	sta z80_d
0007A1  3               
0007A1  3               ; Drop into collision detection.
0007A1  3               
0007A1  3               colc16:
0007A1  3  A0 09        	ldy #9
0007A3  3  B1 68        	lda (z80_ix),y			 	; x coord.
0007A5  3  38           	sec					; subtract x.
0007A6  3  E5 64        	sbc z80_e
0007A8  3  B0 05        	bcs  colc1a 				; result is positive.
0007AA  3  49 FF        	eor #$ff				; make negative positive.
0007AC  3  18           	clc
0007AD  3  69 01        	adc #1
0007AF  3               colc1a:
0007AF  3  C9 10        	cmp #COLDIST				; within x range?
0007B1  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0007B3  3  85 62        	sta z80_c				; store difference.
0007B5  3               
0007B5  3  A0 08        	ldy #8
0007B7  3  B1 68        	lda (z80_ix),y				; y coord.
0007B9  3  38           	sec
0007BA  3  E5 65        	sbc z80_d				; subtract y.
0007BC  3  B0 05        	bcs colc1b				; result is positive.
0007BE  3  49 FF        	eor #$ff				; make negative positive.
0007C0  3  18           	clc
0007C1  3  69 01        	adc #1
0007C3  3               colc1b:
0007C3  3  C9 10        	cmp #COLDIST					; within y range?
0007C5  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0007C7  3  18           	clc					; add x difference.
0007C8  3  65 62        	adc z80_c
0007CA  3  C9 1A        	cmp #2*COLDIST-6			; only 5 corner pixels touching?
0007CC  3  B0 02        	bcs :+
0007CE  3  38           	sec
0007CF  3  60           	rts 					; carry set if there's a collision.
0007D0  3               :
0007D0  3  4C 71 07     	jmp sktyp1				; try next sprite in table.
0007D3  3               colty1:
0007D3  3  A5 68        	lda z80_x  				; compare the two.
0007D5  3  C5 66        	cmp z80_l
0007D7  3  D0 09        	bne end_col
0007D9  3  A5 69        	lda z80_i
0007DB  3  C5 67        	cmp z80_h
0007DD  3  D0 03        	bne end_col
0007DF  3  4C 71 07     	jmp sktyp1 				; addresses are identical.
0007E2  3               end_col:
0007E2  3  4C 96 07     	jmp colty0
0007E5  3               
0007E5  3               ;-----------------------------------------------------------
0007E5  3               ; Display number, left aligned
0007E5  3               ;
0007E5  3               ; Input:
0007E5  3               ;  a		= number
0007E5  3               ;
0007E5  3               ; global:	-
0007E5  3               ; local:	a,y,bc,hl,displ0
0007E5  3               ; calls:	num2ch,dmsg3
0007E5  3               ;-----------------------------------------------------------
0007E5  3               
0007E5  3               disply:
0007E5  3  85 61        	sta z80_a
0007E7  3  A9 0D        	lda #<displ0				; display workspace.
0007E9  3  85 62        	sta z80_c
0007EB  3  A9 08        	lda #>displ0
0007ED  3  85 63        	sta z80_b
0007EF  3  A5 61        	lda z80_a
0007F1  3  20 0D 0F     	jsr num2ch				; convert accumulator to string.
0007F4  3               displ1:
0007F4  3  C6 62        	dec z80_c				; back one character.
0007F6  3  D0 02        	bne :+
0007F8  3  C6 63        	dec z80_b
0007FA  3               :
0007FA  3  A0 00        	ldy #0
0007FC  3  B1 62        	lda (z80_bc),y				; fetch digit.
0007FE  3  09 80        	ora #128				; insert end marker.
000800  3  91 62        	sta (z80_bc),y				; new value.
000802  3               
000802  3  A9 0D        	lda #<displ0				; display space.
000804  3  85 66        	sta z80_l
000806  3  A9 08        	lda #>displ0
000808  3  85 67        	sta z80_h
00080A  3  4C 27 18     	jmp dmsg3				; display the string.
00080D  3               
00080D  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000811  3               
000811  3               ;----------------------------------------------------------------
000811  3               ; Initialise screen.
000811  3               ;
000811  3               ; global:	roomtb,scno
000811  3               ; local:	-
000811  3               ; calls:	tstcs
000811  3               ;----------------------------------------------------------------
000811  3               
000811  3               initsc:
000811  3  AD 0A 04     	lda roomtb 			; whereabouts in the map are we?
000814  3  20 1E 08     	jsr tstsc 			; find displacement.
000817  3  C9 FF        	cmp #255 			; is it valid?
000819  3  F0 02        	beq init_end 			; no, it's rubbish.
00081B  3  85 rr        	sta scno			; store new room number.
00081D  3               init_end:
00081D  3  60           	rts
00081E  3               
00081E  3               ;----------------------------------------------------------------
00081E  3               ; Test screen.
00081E  3               ;
00081E  3               ; global:	-
00081E  3               ; local:	x
00081E  3               ; calls:	-
00081E  3               ;----------------------------------------------------------------
00081E  3               
00081E  3               tstsc:
00081E  3  85 rr        	sta tmproom
000820  3  18           	clc
000821  3  69 0A        	adc #MAPWID 			; add width in case we"re negative.
000823  3  AA           	tax 				; add displacement to map data.
000824  3  BD F7 19     	lda mapdat-MAPWID,x 		; find room number there.
000827  3  60           	rts
000828  3               
000828  3               ;tmproom:	.byte 0
000828  3               
000828  3               ;--------------------------
000828  3               ; Screen left.
000828  3               ;--------------------------
000828  3               
000828  3               scrl:
000828  3  AD 0A 04     	lda roomtb 			; present room table pointer.
00082B  3  38           	sec
00082C  3  E9 01        	sbc #1				; room left.
00082E  3               scrl0:
00082E  3  20 1E 08     	jsr tstsc			; test screen.
000831  3  C9 FF        	cmp #255			; is there a screen this way?
000833  3  D0 01        	bne :+
000835  3  60           	rts				; no, return to loop.
000836  3               :
000836  3  A5 rr        	lda tmproom			; restore room displacement.
000838  3  8D 0A 04     	sta roomtb			; new room table position.
00083B  3               scrl1:
00083B  3  20 11 08     	jsr initsc 			; set new screen.
00083E  3  A9 02        	lda #2
000840  3  85 rr        	sta restfl 			; set it.
000842  3  60           	rts
000843  3               scrr:
000843  3  AD 0A 04     	lda roomtb 			; room table pointer.
000846  3  18           	clc
000847  3  69 01        	adc #1				; room right.
000849  3  4C 2E 08     	jmp scrl0
00084C  3               scru:
00084C  3  AD 0A 04     	lda roomtb 			; room table pointer.
00084F  3  38           	sec
000850  3  E9 0A        	sbc #MAPWID 			; room up.
000852  3  4C 2E 08     	jmp scrl0
000855  3               scrd:
000855  3  AD 0A 04     	lda roomtb 			; room table pointer.
000858  3  18           	clc
000859  3  69 0A        	adc #MAPWID 			; room down.
00085B  3  4C 2E 08     	jmp scrl0
00085E  3               
00085E  3               ;----------------------------------------------------------------------
00085E  3               ; Line drawn, now work out next target address.
00085E  3               ;----------------------------------------------------------------------
00085E  3               
00085E  3               nline:
00085E  3  18           	clc
00085F  3  A5 rr        	lda scraddr 		; get low byte of address.
000861  3  69 20        	adc #$20
000863  3  85 rr        	sta scraddr 		; new low byte of address.
000865  3  90 02        	bcc :+
000867  3  E6 rr        	inc scraddr+1 		; new high byte of address.
000869  3               :
000869  3  60           	rts
00086A  3               
00086A  3               ;-----------------------------------------
00086A  3               ; Get sprite address calculations.
00086A  3               ; gspran = new sprite, gsprad = old sprite.
00086A  3               ;
00086A  3               ; Input:
00086A  3               ;  IX = sprite address
00086A  3               ;-----------------------------------------
00086A  3               
00086A  3               gspran:
00086A  3  A0 08        	ldy #8
00086C  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
00086E  3  85 rr        	sta dispy
000870  3  A0 09        	ldy #9
000872  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
000874  3  85 rr        	sta dispx
000876  3  A0 06        	ldy #6
000878  3  B1 68        	lda (z80_ix),y 		; new sprite image.
00087A  3  20 EC 05     	jsr gfrm		; fetch start frame for this sprite.
00087D  3               
00087D  3  A0 00        	ldy #0
00087F  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
000881  3  A0 07        	ldy #7
000883  3  18           	clc
000884  3  71 68        	adc (z80_ix),y 		; new add frame number.
000886  3  4C BD 18     	jmp gspra0
000889  3               
000889  3               ; Address of each sprite type's routine.
000889  3               
000889  3  3E 1A        evtyp0:	.word evnt00
00088B  3  C6 1D        evtyp1:	.word evnt01
00088D  3  D5 1D        evtyp2:	.word evnt02
00088F  3  1F 22        evtyp3:	.word evnt03
000891  3  D8 22        evtyp4:	.word evnt04
000893  3  53 23        evtyp5:	.word evnt05
000895  3  23 24        evtyp6:	.word evnt06
000897  3  CA 24        evtyp7:	.word evnt07
000899  3  CB 24        evtyp8:	.word evnt08
00089B  3               
00089B  3               ;--------------------------------------------------------------
00089B  3               ; Display sprites.
00089B  3               ;
00089B  3               ; Input:
00089B  3               ;  IX = sprite table
00089B  3               ;--------------------------------------------------------------
00089B  3               
00089B  3               dspr:
00089B  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
00089D  3  85 rr        	sta sprcnt
00089F  3               dspr0:
00089F  3  A0 00        	ldy #0
0008A1  3  B1 68        	lda (z80_ix),y 		; get sprite type.
0008A3  3  C9 FF        	cmp #255 		; is it enabled?
0008A5  3  D0 42        	bne dspr1 		; yes, it needs deleting.
0008A7  3               dspr5:
0008A7  3  A0 05        	ldy #5
0008A9  3  B1 68        	lda (z80_ix),y 		; new type.
0008AB  3  C9 FF        	cmp #255		; is it enabled?
0008AD  3  D0 77        	bne dspr3 		; yes, it needs drawing.
0008AF  3               dspr2:
0008AF  3  A0 05        	ldy #5
0008B1  3  B1 68        	lda (z80_ix),y 		; copy new type.
0008B3  3  A0 00        	ldy #0
0008B5  3  91 68        	sta (z80_ix),y
0008B7  3  A0 06        	ldy #6
0008B9  3  B1 68        	lda (z80_ix),y 		; copy new image number.
0008BB  3  A0 01        	ldy #1
0008BD  3  91 68        	sta (z80_ix),y
0008BF  3  A0 07        	ldy #7
0008C1  3  B1 68        	lda (z80_ix),y 		; copy new frame.
0008C3  3  A0 02        	ldy #2
0008C5  3  91 68        	sta (z80_ix),y
0008C7  3  A0 08        	ldy #8
0008C9  3  B1 68        	lda (z80_ix),y 		; copy new y.
0008CB  3  A0 03        	ldy #3
0008CD  3  91 68        	sta (z80_ix),y
0008CF  3  A0 09        	ldy #9
0008D1  3  B1 68        	lda (z80_ix),y 		; copy new x.
0008D3  3  A0 04        	ldy #4
0008D5  3  91 68        	sta (z80_ix),y
0008D7  3               
0008D7  3  18           	clc
0008D8  3  A5 68        	lda z80_x
0008DA  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0008DC  3  85 68        	sta z80_x
0008DE  3  A5 69        	lda z80_i
0008E0  3  69 00        	adc #0
0008E2  3  85 69        	sta z80_i 		; next sprite.
0008E4  3  C6 rr        	dec sprcnt
0008E6  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
0008E8  3  60           	rts
0008E9  3               dspr1:
0008E9  3  A0 05        	ldy #5
0008EB  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0008ED  3  C9 FF        	cmp #255		; is this enabled?
0008EF  3  D0 06        	bne dspr4 		; yes, display both.
0008F1  3               dspr6:
0008F1  3  20 17 19     	jsr sspria 		; show single sprite.
0008F4  3  4C AF 08     	jmp dspr2
0008F7  3               
0008F7  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0008F7  3               
0008F7  3               dspr4:
0008F7  3  A0 04        	ldy #4
0008F9  3  B1 68        	lda (z80_ix),y		; old x.
0008FB  3  A0 09        	ldy #9
0008FD  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0008FF  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
000901  3               
000901  3  A0 03        	ldy #3
000903  3  B1 68        	lda (z80_ix),y		; old y.
000905  3  A0 08        	ldy #8
000907  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
000909  3  D0 15        	bne dspr7		; they differ, need to redraw.
00090B  3               
00090B  3  A0 02        	ldy #2
00090D  3  B1 68        	lda (z80_ix),y 		; old frame.
00090F  3  A0 07        	ldy #7
000911  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
000913  3  4C 20 09     	jmp dspr7 		; they differ, need to redraw.
000916  3               
000916  3  A0 01        	ldy #1
000918  3  B1 68        	lda (z80_ix),y 		; old image.
00091A  3  A0 06        	ldy #6
00091C  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00091E  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
000920  3               dspr7:
000920  3  20 44 19     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000923  3  4C AF 08     	jmp dspr2
000926  3               dspr3:
000926  3  20 3E 19     	jsr ssprib 		; show single sprite.
000929  3  4C AF 08     	jmp dspr2
00092C  3               
00092C  3               ;sprcnt:	.byte 0
00092C  3               
00092C  3               ;-----------------------------------------------------------
00092C  3               ; Bubble sort.
00092C  3               ;-----------------------------------------------------------
00092C  3               
00092C  3               bsort:
00092C  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
00092E  3  85 rr        	sta qscnt
000930  3               
000930  3  A9 2D        	lda #<sprtab 		; sprite table.
000932  3  85 68        	sta z80_x
000934  3  A9 03        	lda #>sprtab
000936  3  85 69        	sta z80_i
000938  3               bsort0:
000938  3  A0 00        	ldy #0
00093A  3  B1 68        	lda (z80_ix),y 		; first sprite type.
00093C  3  C9 FF        	cmp #255 		; is it switched off?
00093E  3  F0 30        	beq swemp		; yes, may need to switch another in here.
000940  3               
000940  3  A0 11        	ldy #TABSIZ
000942  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
000944  3  C9 FF        	cmp #255 		; is it enabled?
000946  3  F0 0A        	beq bsort2 		; no, nothing to swap.
000948  3               
000948  3  A0 14        	ldy #TABSIZ+3
00094A  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
00094C  3  A0 03        	ldy #3
00094E  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
000950  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000952  3               bsort2:
000952  3  18           	clc
000953  3  A5 68        	lda z80_x
000955  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000957  3  85 68        	sta z80_x
000959  3  90 02        	bcc :+
00095B  3  E6 69        	inc z80_i
00095D  3               :
00095D  3  C6 rr        	dec qscnt
00095F  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000961  3  60           	rts
000962  3               
000962  3               ;qscnt:	.byte 0
000962  3               
000962  3               bsort1:
000962  3  A0 11        	ldy #TABSIZ
000964  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
000966  3  C9 FF        	cmp #255		; is it enabled?
000968  3  F0 E8        	beq bsort2		; no, nothing to swap.
00096A  3  20 7E 09     	jsr swspr		; swap positions.
00096D  3  4C 52 09     	jmp bsort2
000970  3               swemp:
000970  3  A0 11        	ldy #TABSIZ
000972  3  B1 68        	lda (z80_ix),y		; next table entry.
000974  3  C9 FF        	cmp #255		; is that one on?
000976  3  F0 DA        	beq bsort2		; no, nothing to swap.
000978  3  20 7E 09     	jsr swspr		; swap positions.
00097B  3  4C 52 09     	jmp bsort2
00097E  3               
00097E  3               ; Swap sprites.
00097E  3               
00097E  3               swspr:
00097E  3  A5 68        	lda z80_x		; table address
000980  3  85 64        	sta z80_e		; copy to de pair.
000982  3  85 66        	sta z80_l		; copy to hl pair.
000984  3  A5 69        	lda z80_i
000986  3  85 67        	sta z80_h
000988  3  85 65        	sta z80_d
00098A  3               
00098A  3  18           	clc
00098B  3  A5 66        	lda z80_l
00098D  3  69 11        	adc #TABSIZ		; distance to second entry.
00098F  3  85 66        	sta z80_l
000991  3  90 02        	bcc :+
000993  3  E6 67        	inc z80_h
000995  3               :
000995  3  A9 11        	lda #TABSIZ		; bytes to swap.
000997  3  85 63        	sta z80_b
000999  3  A0 00        	ldy #0
00099B  3               swspr0:
00099B  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00099D  3  48           	pha
00099E  3  B1 64        	lda (z80_de),y 		; fetch first byte.
0009A0  3  91 66        	sta (z80_hl),y 		; copy to second.
0009A2  3  68           	pla
0009A3  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0009A5  3               
0009A5  3  E6 64        	inc z80_e 		; next byte.
0009A7  3  D0 02        	bne :+
0009A9  3  E6 65        	inc z80_d
0009AB  3               :
0009AB  3  E6 66        	inc z80_l 		; next byte.
0009AD  3  D0 02        	bne :+
0009AF  3  E6 67        	inc z80_h
0009B1  3               :
0009B1  3  C6 63        	dec z80_b
0009B3  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0009B5  3  60           	rts
0009B6  3               
0009B6  3               ;--------------------------------------------------------------
0009B6  3               ; Get messagenr x in hl
0009B6  3               ;
0009B6  3               ; Input:
0009B6  3               ;  HL = pointer to message list
0009B6  3               ;  X  = message number.
0009B6  3               ;--------------------------------------------------------------
0009B6  3               
0009B6  3               getwrd:
0009B6  3  E0 00        	cpx #0
0009B8  3  D0 01        	bne:+ 			; first word in list?
0009BA  3  60           	rts 			; yep, don't search.
0009BB  3               :
0009BB  3  A0 00        	ldy #0
0009BD  3               getwd0:
0009BD  3  B1 66        	lda (z80_hl),y
0009BF  3  48           	pha
0009C0  3  E6 66        	inc z80_l
0009C2  3  D0 02        	bne :+
0009C4  3  E6 67        	inc z80_h
0009C6  3               :
0009C6  3  68           	pla
0009C7  3  C9 80        	cmp #128		; found end?
0009C9  3  30 F2        	bmi getwd0		; no, carry on.
0009CB  3  CA           	dex			; until we have right number.
0009CC  3  D0 EF        	bne getwd0
0009CE  3  60           	rts
0009CF  3               
0009CF  3               ;-------------------------------------------------
0009CF  3               ; Get next print column position.
0009CF  3               ;-------------------------------------------------
0009CF  3               
0009CF  3               nexpos:
0009CF  3  E6 rr        	inc dispx		; move along one position.
0009D1  3  A5 rr        	lda dispx 		; get coordinate.
0009D3  3               ;	and #31
0009D3  3  60           	rts 			; return with status in zero flag.
0009D4  3               
0009D4  3               ;-------------------------------------------------
0009D4  3               ; Get next print line position.
0009D4  3               ;-------------------------------------------------
0009D4  3               
0009D4  3               nexlin:
0009D4  3  E6 rr        	inc dispy 		; newline.
0009D6  3  A5 rr        	lda dispy		; vertical position.
0009D8  3  C9 18        	cmp #24			; past screen edge?
0009DA  3  B0 01        	bcs :+
0009DC  3  60           	rts			; no, still okay.
0009DD  3               :
0009DD  3  A9 00        	lda #0			; restart at top.
0009DF  3  85 rr        	sta dispy
0009E1  3  60           	rts
0009E2  3               
0009E2  3               ;----------------------------------------------------
0009E2  3               ; Delay routine 1/50 sec
0009E2  3               ;
0009E2  3               ; Wait 1/60 sec = 16666 usec
0009E2  3               ; Wait 208 x 16 =  3328 usec
0009E2  3               ;                 19994 usec
0009E2  3               ; rts           =     6 usec
0009E2  3               ; Total         = 20000 usec
0009E2  3               ;----------------------------------------------------
0009E2  3               
0009E2  3               delay:
0009E2  3  85 rr        	sta xtmp
0009E4  3               del_loop:
0009E4  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
0009E7  3               
0009E7  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
0009E9  3               delay1:
0009E9  3  61 80        	adc ($80,x)		;	 6 usec
0009EB  3  61 80        	adc ($80,x)		;	 6 usec
0009ED  3  88           	dey			;	 2 usec
0009EE  3  D0 F9        	bne delay1		;	 2 usec
0009F0  3  EA           	nop			; 2 usec
0009F1  3  EA           	nop			; 2 usec
0009F2  3               				; tot: 20000 usec
0009F2  3  C6 rr        	dec xtmp
0009F4  3  D0 EE        	bne del_loop
0009F6  3  60           	rts
0009F7  3               
0009F7  3               ; Definition of variables
0009F7  3               ; Make sure pointers are arranged in the same order as the data itself.
0009F7  3               
0009F7  3               ;msgptr:		.word msgdat	; messages
0009F7  3               ;blkptr:		.word chgfx	; block graphics.
0009F7  3               ;proptr:		.word bprop	; address of char properties.
0009F7  3               ;sptptr:		.word sprgfx	; sprite graphics
0009F7  3               ;frmptr:		.word frmlst	; sprite frames.
0009F7  3               ;scrptr:		.word scdat	; address of screens.
0009F7  3               ;nmeptr:		.word nmedat	; enemy start positions.
0009F7  3               ;objptr:		.word objdta	; object graphics
0009F7  3               
0009F7  3               ;TxtFilter:	.byte $ff
0009F7  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
0009FB  3               
0009FB  3               ; Don't change the order of these four.
0009FB  3               ; Menu routine relies on winlft following wintop.
0009FB  3               
0009FB  3  00           wintop:		.byte WINDOWTOP	; top of window.
0009FC  3  02           winlft:		.byte WINDOWLFT	; left edge.
0009FD  3  14           winhgt:		.byte WINDOWHGT	; window height.
0009FE  3  1C           winwid:		.byte WINDOWWID	; window width.
0009FF  3  14           numob:		.byte NUMOBJ	; number of objects in game.
000A00  3               
000A00  3               .if dosversion
000A00  3               ;  .SEGMENT "PART2"
000A00  3               ;  .org $0b00
000A00  3               ;.endif
000A00  3               .repeat 256
000A00  3                 .byte 0
000A00  3               .endrep
000A00  3               .endif
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3               
000A00  3  00           tmpscr:		.byte 0
000A01  3  00           sndtyp:		.byte 0
000A02  3  00           colpatt:	.byte 0
000A03  3               
000A03  3               ;----------------------------------------------------
000A03  3               ; Wait for keypress.
000A03  3               ;----------------------------------------------------
000A03  3               
000A03  3               prskey:
000A03  3  98           	tya
000A04  3  48           	pha
000A05  3               prsloop:
000A05  3  20 1A 0D     	jsr vsync
000A08  3  20 71 FE     	jsr READKEY
000A0B  3  C0 FF        	cpy #255
000A0D  3  F0 F6        	beq prsloop		; wait until key pressed
000A0F  3  20 62 17     	jsr joykey
000A12  3  68           	pla
000A13  3  A8           	tay
000A14  3  60           	rts
000A15  3               
000A15  3               ;----------------------------------------------------
000A15  3               ; Process sprites.
000A15  3               ;----------------------------------------------------
000A15  3               
000A15  3               pspr:
000A15  3  A9 0C        	lda #NUMSPR		; sprites to process.
000A17  3  85 rr        	sta sprptr
000A19  3               
000A19  3  A9 2D        	lda #<sprtab 		; sprite table.
000A1B  3  85 68        	sta z80_x
000A1D  3  A9 03        	lda #>sprtab
000A1F  3  85 69        	sta z80_i
000A21  3               pspr1:
000A21  3  A0 00        	ldy #0
000A23  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
000A25  3  C9 09        	cmp #9 			; within range of sprite types?
000A27  3  B0 03        	bcs :+
000A29  3  20 3C 0A     	jsr pspr2 		; yes, process this one.
000A2C  3               :
000A2C  3  18           	clc
000A2D  3  A5 68        	lda z80_x
000A2F  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000A31  3  85 68        	sta z80_x
000A33  3  90 02        	bcc :+
000A35  3  E6 69        	inc z80_i		; next sprite.
000A37  3               :
000A37  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000A39  3  D0 E6        	bne pspr1
000A3B  3  60           	rts
000A3C  3               
000A3C  3               ;sprptr:	.byte 0
000A3C  3               
000A3C  3               pspr2:
000A3C  3  A5 68        	lda z80_x 		; store original sprite pointer.
000A3E  3  85 rr        	sta ogptr
000A40  3  A5 69        	lda z80_i
000A42  3  85 rr        	sta ogptr+1
000A44  3  20 50 0A     	jsr pspr3		; do the routine.
000A47  3               rtorg:
000A47  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000A49  3  85 68        	sta z80_x
000A4B  3  A5 rr        	lda ogptr+1
000A4D  3  85 69        	sta z80_i
000A4F  3               rtorg0:
000A4F  3  60           	rts
000A50  3               
000A50  3               pspr3:
000A50  3  A9 89        	lda #<evtyp0		; sprite type events list.
000A52  3  85 66        	sta z80_l
000A54  3  A9 08        	lda #>evtyp0
000A56  3  85 67        	sta z80_h
000A58  3               pspr4:
000A58  3  B1 68        	lda (z80_ix),y
000A5A  3  0A           	asl a			; double accumulator.
000A5B  3  18           	clc
000A5C  3  65 66        	adc z80_l
000A5E  3  85 66        	sta z80_l
000A60  3  90 02        	bcc :+
000A62  3  E6 67        	inc z80_h
000A64  3               :
000A64  3  B1 66        	lda (z80_hl),y
000A66  3  85 64        	sta z80_e 		; copy to de.
000A68  3  48           	pha
000A69  3               
000A69  3  E6 66        	inc z80_l 		; next byte of address.
000A6B  3  D0 02        	bne :+
000A6D  3  E6 67        	inc z80_h
000A6F  3               :
000A6F  3  B1 66        	lda (z80_hl),y 		; address high.
000A71  3  85 65        	sta z80_d
000A73  3               
000A73  3  48           	pha	 		; swap address into hl.
000A74  3  A5 67        	lda z80_h
000A76  3  85 65        	sta z80_d
000A78  3  68           	pla
000A79  3  85 67        	sta z80_h
000A7B  3  68           	pla
000A7C  3  85 66        	sta z80_l
000A7E  3  A5 66        	lda z80_l
000A80  3  85 64        	sta z80_e
000A82  3               
000A82  3  6C 66 00     	jmp (z80_hl) 		; go there.
000A85  3               
000A85  3               ;ogptr:	.word 0			; original sprite pointer.
000A85  3               
000A85  3               ; Variables start here.
000A85  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000A85  3               
000A85  3  00           wntopx:		.byte (8 * WINDOWTOP)
000A86  3  10           wnlftx:		.byte (8 * WINDOWLFT)
000A87  3  90           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000A88  3  DE           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000A89  3               
000A89  3               ; Assorted game routines which can go in contended memory.
000A89  3               
000A89  3               ;--------------------------------------------------------------
000A89  3               ; Entry for inventory called by the INV command
000A89  3               ;
000A89  3               ; Input:
000A89  3               ;  X   = message nr with objects seperated with ,
000A89  3               ;
000A89  3               ; Output:
000A89  3               ;  OPT = selected objectnr of INV menu
000A89  3               ;--------------------------------------------------------------
000A89  3               
000A89  3               .if mflag
000A89  3               minve:
000A89  3               .if xflag
000A89  3               	lda #WINDOWHGT
000A89  3               	asl a
000A89  3               	sta winhgt
000A89  3               	lda #WINDOWWID
000A89  3               	asl a
000A89  3               	sta winwid
000A89  3               .endif
000A89  3               .if gflag
000A89  3               	lda #$ff		; blue frontcolour
000A89  3               	sta andeor
000A89  3               	lda #$aa		; yellow backcoloour
000A89  3               	sta andeor+1
000A89  3               .endif
000A89  3  A9 98        	lda #<(invdis)		; routine address.
000A8B  3  8D 71 0B     	sta mod0+1		; set up menu routine.
000A8E  3  8D E2 0A     	sta mod2+1		; set up count routine.
000A91  3  A9 0C        	lda #>(invdis)
000A93  3  8D 72 0B     	sta mod0+2
000A96  3  8D E3 0A     	sta mod2+2
000A99  3  A9 AE        	lda #<(fopt)		; find option from available objects.
000A9B  3  8D 15 0C     	sta mod1+1		; set up routine.
000A9E  3  A9 0C        	lda #>(fopt)
000AA0  3  8D 16 0C     	sta mod1+1+1
000AA3  3  4C C0 0A     	jmp dbox		; do menu routine.
000AA6  3               
000AA6  3               ;--------------------------------------------------------------
000AA6  3               ; Entry for menu called by the MENU command
000AA6  3               ;
000AA6  3               ; Input:
000AA6  3               ;  X   = message nr with menu items seperated with ,
000AA6  3               ;
000AA6  3               ; Output:
000AA6  3               ;  OPT = selected line nr of MENU menu
000AA6  3               ;--------------------------------------------------------------
000AA6  3               
000AA6  3               mmenu:
000AA6  3  A9 C7        	lda #<(always)		; routine address.
000AA8  3  8D 71 0B     	sta mod0+1		; set up routine.
000AAB  3  8D E2 0A     	sta mod2+1		; set up count routine.
000AAE  3  A9 15        	lda #>(always)
000AB0  3  8D 72 0B     	sta mod0+2
000AB3  3  8D E3 0A     	sta mod2+2
000AB6  3               
000AB6  3  A9 41        	lda #<(fstd)		; standard option selection.
000AB8  3  8D 15 0C     	sta mod1+1		; set up routine.
000ABB  3  A9 0C        	lda #>(fstd)
000ABD  3  8D 16 0C     	sta mod1+2
000AC0  3               
000AC0  3               ; Drop through into box routine.
000AC0  3               
000AC0  3               ;--------------------------------------------------------------
000AC0  3               ; Work out size of box for message or menu.
000AC0  3               ;--------------------------------------------------------------
000AC0  3               
000AC0  3               dbox:
000AC0  3  A9 4E        	lda #<(msgdat)		; pointer to messages.
000AC2  3  85 66        	sta z80_l
000AC4  3  A9 28        	lda #>(msgdat)
000AC6  3  85 67        	sta z80_h
000AC8  3               
000AC8  3  20 B6 09     	jsr getwrd		; get message number.
000ACB  3               
000ACB  3  A5 67        	lda z80_h		; store pointer to message.
000ACD  3  85 rr        	sta TmpAddr
000ACF  3  A5 66        	lda z80_l
000AD1  3  85 rr        	sta TmpAddr+1
000AD3  3               
000AD3  3  A9 01        	lda #1			; height.
000AD5  3  85 65        	sta z80_d
000AD7  3  A9 00        	lda #0			; start at object zero.
000AD9  3  85 rr        	sta combyt		; store number of object in combyt.
000ADB  3  85 64        	sta z80_e		; maximum width.
000ADD  3               dbox5:
000ADD  3  A9 00        	lda #0			; this line"s width.
000ADF  3  85 63        	sta z80_b
000AE1  3               mod2:
000AE1  3  20 C7 15     	jsr always		; item in player"s possession?
000AE4  3  C9 FF        	cmp #255
000AE6  3  D0 02        	bne dbox6		; not in inventory, skip this line.
000AE8  3  E6 65        	inc z80_d		; add to tally.
000AEA  3               dbox6:
000AEA  3  A0 00        	ldy #0			; get character.
000AEC  3  B1 66        	lda (z80_hl),y
000AEE  3  85 61        	sta z80_a
000AF0  3  E6 66        	inc z80_l		; next character.
000AF2  3  D0 02        	bne :+
000AF4  3  E6 67        	inc z80_h
000AF6  3               :
000AF6  3  A5 61        	lda z80_a		; reached end of line?
000AF8  3  C9 2C        	cmp #','
000AFA  3  F0 0D        	beq dbox3		; yes.
000AFC  3  C9 0D        	cmp #13
000AFE  3  F0 09        	beq dbox3		; yes.
000B00  3  E6 63        	inc z80_b		; add to this line"s width.
000B02  3  A5 61        	lda z80_a
000B04  3  30 10        	bmi dbox4		; end of message? yes, end count.
000B06  3  4C EA 0A     	jmp dbox6		; repeat until we find the end.
000B09  3               dbox3:
000B09  3  A5 64        	lda z80_e		; maximum line width.
000B0B  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
000B0D  3  10 CE        	bpl dbox5		; no, carry on looking.
000B0F  3  A5 63        	lda z80_b		; make this the widest so far.
000B11  3  85 64        	sta z80_e
000B13  3  4C DD 0A     	jmp dbox5		; keep looking.
000B16  3               dbox4:
000B16  3  A5 64        	lda z80_e		; maximum line width.
000B18  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
000B1A  3  10 04        	bpl dbox8		; no, carry on looking.
000B1C  3  A5 63        	lda z80_b		; final line is the longest so far.
000B1E  3  85 64        	sta z80_e
000B20  3               dbox8:
000B20  3  C6 65        	dec z80_d		; decrement items found.
000B22  3  D0 07        	bne :+			; total was zero.
000B24  3  A9 FF        	lda #255
000B26  3  85 rr        	sta varopt
000B28  3  4C 6B 0C     	jmp dbox15
000B2B  3               :
000B2B  3  A5 64        	lda z80_e		; longest line.
000B2D  3  D0 03        	bne :+			; was it zero?
000B2F  3  4C 6B 0C     	jmp dbox15		; total was zero.
000B32  3               :
000B32  3  85 rr        	sta bwid		; set up size.
000B34  3  A5 65        	lda z80_d
000B36  3  85 rr        	sta blen
000B38  3               
000B38  3               ;--------------------------------------------------------------
000B38  3               ; That's set up our box size.
000B38  3               ;--------------------------------------------------------------
000B38  3               
000B38  3  AD FD 09     	lda winhgt		; window height in characters.
000B3B  3  38           	sec
000B3C  3  E5 65        	sbc z80_d		; subtract height of box.
000B3E  3  4A           	lsr a			; divide by 2.
000B3F  3  18           	clc
000B40  3  6D FB 09     	adc wintop		; add top edge of window.
000B43  3  85 rr        	sta btop		; set up box top.
000B45  3               
000B45  3  AD FE 09     	lda winwid		; window width in characters.
000B48  3  38           	sec
000B49  3  E5 64        	sbc z80_e		; subtract box width.
000B4B  3  4A           	lsr a			; divide by 2.
000B4C  3  18           	clc
000B4D  3  6D FC 09     	adc winlft		; add left edge of window.
000B50  3  85 rr        	sta blft		; box left.
000B52  3               
000B52  3  A9 6D        	lda #<(FONT-256)		; font.
000B54  3  8D 7E 11     	sta grbase		; set up for text display.
000B57  3  A9 69        	lda #>(FONT-256)
000B59  3  8D 7F 11     	sta grbase+1
000B5C  3               
000B5C  3  A5 rr        	lda TmpAddr+1		; restore message pointer.
000B5E  3  85 66        	sta z80_l
000B60  3  A5 rr        	lda TmpAddr
000B62  3  85 67        	sta z80_h
000B64  3               
000B64  3  A5 rr        	lda btop		; box top.
000B66  3  85 rr        	sta dispy		; set display coordinate.
000B68  3  A9 00        	lda #0			; start at object zero.
000B6A  3  85 rr        	sta combyt		; store number of object in combyt.
000B6C  3               dbox2:
000B6C  3  A5 rr        	lda combyt		; get object number.
000B6E  3  85 61        	sta z80_a
000B70  3               mod0:
000B70  3  20 C7 15     	jsr always		; check inventory for display.
000B73  3  C9 FF        	cmp #255
000B75  3  F0 03        	beq :+
000B77  3  4C 4B 0C     	jmp dbox13		; not in inventory, skip this line.
000B7A  3               :
000B7A  3  A5 rr        	lda blft		; box left.
000B7C  3  85 rr        	sta dispx		; set left display position.
000B7E  3  A5 rr        	lda bwid		; box width.
000B80  3  85 63        	sta z80_b		; store width.
000B82  3               dbox0:
000B82  3  A0 00        	ldy #0
000B84  3  B1 66        	lda (z80_hl),y		; get character.
000B86  3  C9 2C        	cmp #','		; end of line?
000B88  3  F0 59        	beq dbox1		; yes, next one.
000B8A  3  C9 0D        	cmp #13			; end of line?
000B8C  3  F0 55        	beq dbox1		; yes, next one.
000B8E  3               
000B8E  3  C9 8D        	cmp #141			; end of line?
000B90  3  D0 05        	bne :+
000B92  3  C6 rr        	dec bwid
000B94  3  4C F1 0B     	jmp dbox7		; yes, next one.
000B97  3               :
000B97  3  C6 63        	dec z80_b		; one less to display.
000B99  3  29 7F        	and #127		; remove terminator.
000B9B  3               
000B9B  3  20 8D 13     	jsr pchr		; display on screen.
000B9E  3               
000B9E  3  A0 00        	ldy #0
000BA0  3  B1 66        	lda (z80_hl),y		; get character.
000BA2  3  85 61        	sta z80_a
000BA4  3  E6 66        	inc z80_l		; next character.
000BA6  3  D0 02        	bne :+
000BA8  3  E6 67        	inc z80_h
000BAA  3               :
000BAA  3  A5 61        	lda z80_a
000BAC  3  C9 80        	cmp #128		; end of message?
000BAE  3  30 03        	bmi :+
000BB0  3  4C F1 0B     	jmp dbox7		; yes, job done.
000BB3  3               :
000BB3  3  A5 63        	lda z80_b		; chars remaining.
000BB5  3  F0 03        	beq :+			; are any left?
000BB7  3  4C 82 0B     	jmp dbox0		; yes, continue.
000BBA  3               :
000BBA  3               ;---------------------------------------------------
000BBA  3               ; Reached limit of characters per line.
000BBA  3               ;---------------------------------------------------
000BBA  3               
000BBA  3               dbox9:
000BBA  3  A0 00        	ldy #0
000BBC  3  B1 66        	lda (z80_hl),y		; get character.
000BBE  3  E6 66        	inc z80_l		; next one.
000BC0  3  D0 02        	bne :+
000BC2  3  E6 67        	inc z80_h
000BC4  3               :
000BC4  3  C9 2C        	cmp #','		; another line?
000BC6  3  F0 24        	beq dbox10		; yes, do next line.
000BC8  3  C9 0D        	cmp #13			; another line?
000BCA  3  F0 20        	beq dbox10		; yes, do next line.
000BCC  3  C9 80        	cmp #128		; end of message?
000BCE  3  B0 03        	bcs :+
000BD0  3  4C FB 0B     	jmp dbox11		; yes, finish message.
000BD3  3               :
000BD3  3  4C BA 0B     	jmp dbox9
000BD6  3               
000BD6  3               ;---------------------------------------------------
000BD6  3               ; Fill box to end of line.
000BD6  3               ;---------------------------------------------------
000BD6  3               
000BD6  3               dboxf:
000BD6  3  A9 20        	lda #32			; space character.
000BD8  3  20 8D 13     	jsr pchr		; display character.
000BDB  3  C6 63        	dec z80_b
000BDD  3  F0 03        	beq :+
000BDF  3  4C D6 0B     	jmp dboxf		; repeat for remaining chars on line.
000BE2  3               :
000BE2  3  60           	rts
000BE3  3               dbox1:
000BE3  3  E6 66        	inc z80_l		; skip character.
000BE5  3  D0 02        	bne :+
000BE7  3  E6 67        	inc z80_h
000BE9  3               :
000BE9  3  20 D6 0B     	jsr dboxf		; fill box out to right side.
000BEC  3               dbox10:
000BEC  3  E6 rr        	inc dispy		; y coordinate down a line next position.
000BEE  3  4C 6C 0B     	jmp dbox2		; next line.
000BF1  3               dbox7:
000BF1  3  A5 63        	lda z80_b		; chars remaining.
000BF3  3  D0 03        	bne :+			; are any left?
000BF5  3  4C FB 0B     	jmp dbox11		; no, nothing to draw.
000BF8  3               :
000BF8  3  20 D6 0B     	jsr dboxf		; fill message to line.
000BFB  3               
000BFB  3               ;------------------------------------------------------
000BFB  3               ; Drawn the box menu, now select option.
000BFB  3               ;------------------------------------------------------
000BFB  3               
000BFB  3               dbox11:
000BFB  3  A5 rr        	lda btop		; box top.
000BFD  3  85 rr        	sta dispy		; set bar position.
000BFF  3               dbox14:
000BFF  3  20 62 17     	jsr joykey		; get controls.
000C02  3  C9 7F        	cmp #$7f		; anything pressed?
000C04  3  D0 F9        	bne dbox14		; yes, debounce it.
000C06  3  20 74 0C     	jsr dbar		; draw bar.
000C09  3               dbox12:
000C09  3  20 62 17     	jsr joykey		; get controls.
000C0C  3  C9 7F        	cmp #$7f		; anything pressed?
000C0E  3  F0 F9        	beq dbox12		; no, nothing.
000C10  3  29 10        	and #16			; fire button pressed?
000C12  3  D0 03        	bne :+
000C14  3               mod1:
000C14  3  4C 41 0C     	jmp fstd		; yes, job done.
000C17  3               :
000C17  3  20 74 0C     	jsr dbar		; delete bar.
000C1A  3               
000C1A  3  A5 rr        	lda joyval		; joystick reading.
000C1C  3  29 08        	and #8			; going up?
000C1E  3  F0 13        	beq dboxu		; yes, go up.
000C20  3               
000C20  3  A6 rr        	ldx dispy		; vertical position of bar.
000C22  3  E8           	inx			; look down.
000C23  3  8A           	txa
000C24  3  38           	sec
000C25  3  E5 rr        	sbc btop		; find distance from top.
000C27  3  C5 rr        	cmp blen		; top of box.
000C29  3  D0 03        	bne :+
000C2B  3  4C FF 0B     	jmp dbox14		; yes, go no further.
000C2E  3               :
000C2E  3  E6 rr        	inc dispy		; move bar.
000C30  3  4C FF 0B     	jmp dbox14		; continue.
000C33  3               dboxu:
000C33  3  A5 rr        	lda dispy		; vertical position of bar.
000C35  3  C5 rr        	cmp btop		; are we at the top?
000C37  3  D0 03        	bne :+
000C39  3  4C FF 0B     	jmp dbox14		; yes, go no further.
000C3C  3               :
000C3C  3  C6 rr        	dec dispy		; move bar.
000C3E  3  4C FF 0B     	jmp dbox14		; continue.
000C41  3               fstd:
000C41  3  A5 rr        	lda dispy		; bar position.
000C43  3  38           	sec
000C44  3  E5 rr        	sbc btop		; find selected option.
000C46  3  85 rr        	sta varopt		; store the option.
000C48  3  4C 53 0D     	jmp redraw		; redraw the screen.
000C4B  3               
000C4B  3               ;------------------------------------------------------
000C4B  3               ; Option not available.  Skip this line.
000C4B  3               ;------------------------------------------------------
000C4B  3               
000C4B  3               dbox13:
000C4B  3  A0 00        	ldy #0
000C4D  3  B1 66        	lda (z80_hl),y		; get character.
000C4F  3  E6 66        	inc z80_l		; next one.
000C51  3  D0 02        	bne :+
000C53  3  E6 67        	inc z80_h
000C55  3               :
000C55  3  C9 2C        	cmp #','		; another line?
000C57  3  D0 03        	bne :+
000C59  3  4C 6C 0B     	jmp dbox2		; yes, do next line.
000C5C  3               :
000C5C  3  C9 0D        	cmp #13			; another line?
000C5E  3  D0 03        	bne :+
000C60  3  4C 6C 0B     	jmp dbox2		; yes, do next line.
000C63  3               :
000C63  3               
000C63  3  10 03        	bpl :+			; end of message?
000C65  3  4C FB 0B     	jmp dbox11		; yes, finish message.
000C68  3               :
000C68  3  4C 4B 0C     	jmp dbox13
000C6B  3               dbox15:
000C6B  3               .if xflag
000C6B  3               	lda #WINDOWWID
000C6B  3               	sta winwid
000C6B  3               	lda #WINDOWHGT
000C6B  3               	sta winhgt
000C6B  3               .endif
000C6B  3  A5 rr        	lda TmpAddr		; pop message pointer from the stack.
000C6D  3  85 67        	sta z80_h
000C6F  3  A5 rr        	lda TmpAddr+1
000C71  3  85 66        	sta z80_l
000C73  3  60           	rts
000C74  3               
000C74  3               ;------------------------------------------------------
000C74  3               ; Invert bar
000C74  3               ;------------------------------------------------------
000C74  3               
000C74  3               dbar:
000C74  3  A5 rr        	lda blft		; box left.
000C76  3  85 rr        	sta dispx		; set display coordinate.
000C78  3  20 9D 12     	jsr gprad		; get printing address.
000C7B  3               
000C7B  3  A5 rr        	lda bwid		; box width.
000C7D  3  85 62        	sta z80_c		; loop counter in c.
000C7F  3  A5 67        	lda z80_h
000C81  3  85 65        	sta z80_d		; store screen address high byte.
000C83  3               dbar1:
000C83  3  A2 07        	ldx #7			; pixel height in b.
000C85  3               dbar0:
000C85  3  BC 85 13     	ldy scrtab,x
000C88  3  B1 rr        	lda (scraddr),y		; get screen byte.
000C8A  3  49 FF        	eor #255		; reverse all bits.
000C8C  3  91 rr        	sta (scraddr),y		; write back to screen.
000C8E  3  CA           	dex			; next line down.
000C8F  3  10 F4        	bpl dbar0		; draw rest of character.
000C91  3               
000C91  3  E6 rr        	inc scraddr		; one char right.
000C93  3  C6 62        	dec z80_c		; decrement character counter.
000C95  3  D0 EC        	bne dbar1		; repeat for whole line.
000C97  3  60           	rts
000C98  3               
000C98  3               ;------------------------------------------------------
000C98  3               ; Point to object
000C98  3               ;
000C98  3               ; Input:
000C98  3               ;  combyt
000C98  3               ;
000C98  3               ; Output:
000C98  3               ;  A = object number, A=255 if already in possession
000C98  3               ;------------------------------------------------------
000C98  3               
000C98  3               invdis:
000C98  3  A5 66        	lda z80_l		; store message text pointer.
000C9A  3  48           	pha
000C9B  3  A5 67        	lda z80_h
000C9D  3  48           	pha
000C9E  3  A5 rr        	lda combyt		; object number.
000CA0  3  E6 rr        	inc combyt		; ready for next one.
000CA2  3  20 2E 10     	jsr gotob		; check if we have object.
000CA5  3  A8           	tay
000CA6  3  68           	pla
000CA7  3  85 67        	sta z80_h
000CA9  3  68           	pla
000CAA  3  85 66        	sta z80_l
000CAC  3  98           	tya
000CAD  3  60           	rts
000CAE  3               
000CAE  3               ;------------------------------------------------------
000CAE  3               ; Find option selected.
000CAE  3               ;
000CAE  3               ; Input:
000CAE  3               ;  -
000CAE  3               ;
000CAE  3               ; Output:
000CAE  3               ;  OPT = selected object
000CAE  3               ;------------------------------------------------------
000CAE  3               
000CAE  3               fopt:
000CAE  3  A5 rr        	lda dispy
000CB0  3  38           	sec
000CB1  3  E5 rr        	sbc btop		; find selected option.
000CB3  3  85 rr        	sta tmp+2		; option selected in b register.
000CB5  3  E6 rr        	inc tmp+2
000CB7  3               
000CB7  3  A9 00        	lda #0			; set to first item.
000CB9  3  85 rr        	sta combyt		; object number.
000CBB  3               fopt0:
000CBB  3  20 CB 0C     	jsr fobj		; find next object in inventory.
000CBE  3  C6 rr        	dec tmp+2
000CC0  3  D0 F9        	bne fopt0		; repeat for relevant steps down the list.
000CC2  3               
000CC2  3  A5 rr        	lda combyt		; get option.
000CC4  3  85 rr        	sta varopt		; store the option.
000CC6  3  C6 rr        	dec varopt		; one less, due to where we increment combyt.
000CC8  3  4C 53 0D     	jmp redraw		; redraw the screen.
000CCB  3               fobj:
000CCB  3  A4 rr        	ldy combyt		; object number.
000CCD  3  E6 rr        	inc combyt		; ready for next item.
000CCF  3  98           	tya
000CD0  3  20 2E 10     	jsr gotob		; do we have this item?
000CD3  3  C9 FF        	cmp #255
000CD5  3  D0 01        	bne :+
000CD7  3  60           	rts
000CD8  3               :
000CD8  3  4C CB 0C     	jmp fobj		; yes, it's on the list.
000CDB  3               
000CDB  3               ;bwid:	.byte 0              ; box/menu width.
000CDB  3               ;blen:	.byte 0              ; box/menu height.
000CDB  3               ;btop:	.byte 0              ; box coordinates.
000CDB  3               ;blft:	.byte 0
000CDB  3               .endif
000CDB  3               
000CDB  3               
000CDB  3               ;----------------------------------------------------
000CDB  3               ; Clear sprite table.
000CDB  3               ;
000CDB  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000CDB  3               ;----------------------------------------------------
000CDB  3               
000CDB  3               xspr:
000CDB  3  A9 FF        	lda #255		; clear byte.
000CDD  3  A2 00        	ldx #0			; length of table.
000CDF  3               xspr0:
000CDF  3  9D 2D 03     	sta sprtab,x		; sprite table.
000CE2  3  E8           	inx			; move to next byte.
000CE3  3  E0 CC        	cpx #SPRBUF
000CE5  3  D0 F8        	bne xspr0		; repeat for rest of table.
000CE7  3  60           	rts
000CE8  3               
000CE8  3               ;-------------------------------------------------------------
000CE8  3               ; Initialise all objects.
000CE8  3               ;
000CE8  3               ; Reset current room,y,x to start room,y,x for all objects
000CE8  3               ;-------------------------------------------------------------
000CE8  3               
000CE8  3               ;.repeat 259
000CE8  3               ;  .byte 0
000CE8  3               ;.endrepeat
000CE8  3               
000CE8  3               .if oflag
000CE8  3               iniob:
000CE8  3  A9 75        	lda #<objdta 		; objects table.
000CEA  3  85 68        	sta z80_x
000CEC  3  A9 67        	lda #>objdta
000CEE  3  85 69        	sta z80_i
000CF0  3               
000CF0  3  AE FF 09     	ldx numob 		; number of objects in the game.
000CF3  3               iniob0:
000CF3  3  A0 23        	ldy #35
000CF5  3  B1 68        	lda (z80_ix),y 		; start screen.
000CF7  3  A0 20        	ldy #32
000CF9  3  91 68        	sta (z80_ix),y 		; set start screen.
000CFB  3               
000CFB  3  A0 24        	ldy #36
000CFD  3  B1 68        	lda (z80_ix),y 		; find start y.
000CFF  3  A0 21        	ldy #33
000D01  3  91 68        	sta (z80_ix),y 		; set start y.
000D03  3               
000D03  3  A0 25        	ldy #37
000D05  3  B1 68        	lda (z80_ix),y 		; get initial x.
000D07  3  A0 22        	ldy #34
000D09  3  91 68        	sta (z80_ix),y 		; set x coord.
000D0B  3               
000D0B  3  18           	clc 			; point to next object.
000D0C  3  A5 68        	lda z80_x
000D0E  3  69 26        	adc #38			; distance between objects.
000D10  3  85 68        	sta z80_x
000D12  3  90 02        	bcc :+
000D14  3  E6 69        	inc z80_i
000D16  3               :
000D16  3  CA           	dex 			; repeat.
000D17  3  D0 DA        	bne iniob0
000D19  3               
000D19  3  60           	rts
000D1A  3               .endif
000D1A  3               
000D1A  3               ;-------------------------------------------------------------
000D1A  3               ; Screen synchronisation.
000D1A  3               ;
000D1A  3               ;  - read joystick/keyboard
000D1A  3               ;  - handle sound
000D1A  3               ;  - sync framerate with timer 25Hz
000D1A  3               ;  - handle shrapnel every even frame
000D1A  3               ;-------------------------------------------------------------
000D1A  3               
000D1A  3               vsync:
000D1A  3  48           	pha
000D1B  3  98           	tya
000D1C  3  48           	pha
000D1D  3  8A           	txa
000D1E  3  48           	pha
000D1F  3  20 62 17     	jsr joykey		; read joystick/keyboard.
000D22  3               
000D22  3  A9 40        	lda #$40		; Set Timer1 expired bit
000D24  3               vsync1:
000D24  3  2C 0D B8     	bit $b80d		; Check Interrupt Flag Register
000D27  3  F0 FB        	beq vsync1
000D29  3  AD 04 B8     	lda Timer1_Low		; Clear Timer interrupt
000D2C  3               
000D2C  3  A5 rr        	lda clock
000D2E  3  29 01        	and #1
000D30  3  D0 03        	bne:+
000D32  3  20 B0 0D     	jsr proshr		; handle shrapnel every even frame
000D35  3               :
000D35  3  AD 01 0A     	lda sndtyp
000D38  3  F0 13        	beq sndskip
000D3A  3               sndloop:
000D3A  3  AD 02 B0     	lda SpeakerBit		; handle sound
000D3D  3  AC 01 0A     	ldy sndtyp
000D40  3               sndwait:
000D40  3  88           	dey
000D41  3  D0 FD        	bne sndwait
000D43  3  49 04        	eor #4
000D45  3  8D 02 B0     	sta SpeakerBit
000D48  3  CE 01 0A     	dec sndtyp
000D4B  3  D0 ED        	bne sndloop
000D4D  3               sndskip:
000D4D  3  68           	pla
000D4E  3  AA           	tax
000D4F  3  68           	pla
000D50  3  A8           	tay
000D51  3  68           	pla
000D52  3  60           	rts
000D53  3               
000D53  3               ;-----------------------------------------------
000D53  3               ; Redraw the screen.
000D53  3               ;
000D53  3               ; Remove old copy of all sprites for redraw.
000D53  3               ;-----------------------------------------------
000D53  3               
000D53  3               redraw:
000D53  3               .if gflag
000D53  3               	lda #$ff
000D53  3               	sta andeor
000D53  3               	lda #$00
000D53  3               	sta andeor+1
000D53  3               .endif
000D53  3               .if xflag
000D53  3               	lda #WINDOWWID
000D53  3               	sta winwid
000D53  3               	lda #WINDOWHGT
000D53  3               	sta winhgt
000D53  3               .endif
000D53  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
000D55  3  48           	pha
000D56  3  A5 68        	lda z80_x
000D58  3  48           	pha
000D59  3               
000D59  3  20 5F 14     	jsr droom		; show screen layout.
000D5C  3               .if oflag
000D5C  3  20 B2 0F     	jsr shwob		; draw objects.
000D5F  3               .endif
000D5F  3               numsp0:
000D5F  3  A9 0C        	lda #NUMSPR		; sprites to draw.
000D61  3  85 rr        	sta tmp
000D63  3               
000D63  3  A9 2D        	lda #<sprtab		; sprite table.
000D65  3  85 68        	sta z80_x
000D67  3  A9 03        	lda #>sprtab
000D69  3  85 69        	sta z80_i
000D6B  3               redrw0:
000D6B  3  A0 00        	ldy #0
000D6D  3  B1 68        	lda (z80_ix),y		; old sprite type.
000D6F  3  C9 FF        	cmp #255		; is it enabled?
000D71  3  F0 0B        	beq redrw1 		; no, find next one.
000D73  3               
000D73  3  A0 03        	ldy #3
000D75  3  B1 68        	lda (z80_ix),y 		; sprite y.
000D77  3  C9 B1        	cmp #177		; beyond maximum?
000D79  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000D7B  3               
000D7B  3  20 17 19     	jsr sspria		; show single sprite.
000D7E  3               redrw1:
000D7E  3  18           	clc			; next sprite.
000D7F  3  A5 68        	lda z80_x
000D81  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000D83  3  85 68        	sta z80_x
000D85  3  90 02        	bcc :+
000D87  3  E6 69        	inc z80_i
000D89  3               :
000D89  3  C6 rr        	dec tmp			; repeat for remaining sprites.
000D8B  3  D0 DE        	bne redrw0
000D8D  3               rpblc1:
000D8D  3               ;	jsr dshrp		; redraw shrapnel.
000D8D  3               
000D8D  3               .if aflag
000D8D  3               	jsr rbloc		; draw blocks for this screen
000D8D  3               .endif
000D8D  3  68           	pla			; retrieve sprite pointer.
000D8E  3  85 68        	sta z80_x
000D90  3  68           	pla
000D91  3  85 69        	sta z80_i
000D93  3               
000D93  3  60           	rts
000D94  3               
000D94  3               ;----------------------------------------------------------------------
000D94  3               ; Clear screen routine.
000D94  3               ;
000D94  3               ; Fill screenmem $8000-$97ff with ScrFillByte
000D94  3               ;----------------------------------------------------------------------
000D94  3               
000D94  3               cls:
000D94  3  A9 80        	lda #>ScreenAddr		; screen address.
000D96  3  8D A0 0D     	sta clsloop+2
000D99  3  AD F5 19     	lda andeor+1
000D9C  3               .if iflag
000D9C  3               	eor #$ff
000D9C  3               .endif
000D9C  3  A0 00        	ldy #0
000D9E  3               clsloop:
000D9E  3  99 00 80     	sta ScreenAddr,y
000DA1  3  C8           	iny
000DA2  3  D0 FA        	bne clsloop
000DA4  3  EE A0 0D     	inc clsloop+2
000DA7  3  AE A0 0D     	ldx clsloop+2
000DAA  3  E0 98        	cpx #>(ScreenAddr+$1800)
000DAC  3  D0 F0        	bne clsloop
000DAE  3  60           	rts
000DAF  3               
000DAF  3               ;----------------------------------------------------------------------
000DAF  3               ; Atomic palette is static
000DAF  3               ;----------------------------------------------------------------------
000DAF  3               
000DAF  3               setpal:
000DAF  3  60           	rts
000DB0  3               
000DB0  3               ;----------------------------------------------------------------------
000DB0  3               ; FODDER check
000DB0  3               ;----------------------------------------------------------------------
000DB0  3               
000DB0  3               .if pflag .or dflag
000DB0  3               fdchk:
000DB0  3               	cmp #FODDER 		; is it fodder?
000DB0  3               	beq :+
000DB0  3               	rts 			; no.
000DB0  3               :
000DB0  3               	lda #0			; wipe fodder in MAP
000DB0  3               	ldy #0
000DB0  3               	sta (bufaddr),y 	; rewrite block type.
000DB0  3               
000DB0  3               	lda dispx		; x=x/8
000DB0  3               	pha
000DB0  3               	lsr a
000DB0  3               	lsr a
000DB0  3               	lsr a
000DB0  3               	sta dispx
000DB0  3               
000DB0  3               	lda dispy		; y=y/8
000DB0  3               	pha
000DB0  3               	lsr a
000DB0  3               	lsr a
000DB0  3               	lsr a
000DB0  3               	sta dispy
000DB0  3               
000DB0  3               	lda #0 			; block to write.
000DB0  3               	jsr pattr 		; write block.
000DB0  3               
000DB0  3               	pla
000DB0  3               	sta dispy
000DB0  3               	pla
000DB0  3               	sta dispx
000DB0  3               	rts
000DB0  3               .endif
000DB0  3               
000DB0  3               ;----------------------------------------------------
000DB0  3               ; Scrolly text and puzzle variables.
000DB0  3               ;----------------------------------------------------
000DB0  3               
000DB0  3               .if sflag
000DB0  3               txtbit:	.byte 128		; bit to write.
000DB0  3               txtwid:	.byte 16		; width of ticker message.
000DB0  3               txtpos:	.word msgdat
000DB0  3               txtini:	.word msgdat
000DB0  3               txtscr:	.word ScreenAddr
000DB0  3               .endif
000DB0  3               
000DB0  3               ;----------------------------------------------------
000DB0  3               ; Specialist routines.
000DB0  3               ; Process shrapnel.
000DB0  3               ;----------------------------------------------------
000DB0  3               proshr:
000DB0  3               .if pflag
000DB0  3               	lda #<SHRAPN		; table.
000DB0  3               	sta z80_x
000DB0  3               	lda #>SHRAPN
000DB0  3               	sta z80_i
000DB0  3               
000DB0  3               	lda #NUMSHR		; shrapnel pieces to process.
000DB0  3               	sta shrctr
000DB0  3               prosh0:
000DB0  3               	ldy #0
000DB0  3               	lda (z80_ix),y		; on/off marker.
000DB0  3               	asl a
000DB0  3               proshx:
000DB0  3               	bcs :+
000DB0  3               	jsr prosh1 		; on, so process it.
000DB0  3               :
000DB0  3               	clc
000DB0  3               	lda z80_x
000DB0  3               	adc #SHRSIZ
000DB0  3               	sta z80_x
000DB0  3               	bcc :+
000DB0  3               	inc z80_i
000DB0  3               :
000DB0  3               	dec shrctr		; round again.
000DB0  3               	bne prosh0
000DB0  3               .endif
000DB0  3               .if sflag
000DB0  3               	jsr scrly
000DB0  3               .endif
000DB0  3  60           	rts
000DB1  3               
000DB1  3               .if pflag
000DB1  3               ;shrctr:	.byte 0
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Proces shrapnel piece
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               prosh1:
000DB1  3               	jsr plot 		; delete the pixel.
000DB1  3               
000DB1  3               	lda #<shrptr		; shrapnel routine pointers.
000DB1  3               	sta z80_l
000DB1  3               	lda #>shrptr
000DB1  3               	sta z80_h
000DB1  3               
000DB1  3               	ldy #0
000DB1  3               	lda (z80_ix),y		; restore shrapnel type.
000DB1  3               	jsr prosh2 		; run the routine.
000DB1  3               	jsr chkxy		; check x and y are good before we redisplay.
000DB1  3               
000DB1  3               	lda #<SHRSIZ 		; distance to next.
000DB1  3               	sta z80_e
000DB1  3               	lda #>SHRSIZ
000DB1  3               	sta z80_d
000DB1  3               	rts
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Run the routine
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               prosh2:
000DB1  3               	asl a 			; 2 bytes per address.
000DB1  3               	tay
000DB1  3               	lda shrptr,y
000DB1  3               	sta z80_l
000DB1  3               	lda shrptr+1,y 		; fetch high byte from table.
000DB1  3               	sta z80_h
000DB1  3               	jmp (z80_hl) 		; jump to routine.
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Paricle routine table
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               shrptr:	.word laser		; laser.
000DB1  3               	.word trail		; vapour trail.
000DB1  3               	.word shrap		; shrapnel from explosion.
000DB1  3               	.word dotl		; horizontal starfield left.
000DB1  3               	.word dotr		; horizontal starfield right.
000DB1  3               	.word dotu		; vertical starfield up.
000DB1  3               	.word dotd		; vertical starfield down.
000DB1  3               	.word ptcusr		; user particle.
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Explosion shrapnel.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               shrap:
000DB1  3               	ldy #1
000DB1  3               	lda (z80_ix),y 		; get the angle.
000DB1  3               	clc
000DB1  3               	adc #<shrsin		; shrapnel sine table.
000DB1  3               	sta z80_l
000DB1  3               	lda #>shrsin
000DB1  3               	adc #0
000DB1  3               	sta z80_h
000DB1  3               
000DB1  3               	ldy #0
000DB1  3               	lda (z80_hl),y 		; fetch value from table.
000DB1  3               	sta z80_e
000DB1  3               	inc z80_l 		; next byte of table.
000DB1  3               	bne :+
000DB1  3               	inc z80_h
000DB1  3               :
000DB1  3               	ldy #0
000DB1  3               	lda (z80_hl),y		; fetch value from table.
000DB1  3               	sta z80_d
000DB1  3               	inc z80_l		; next byte of table.
000DB1  3               	bne :+
000DB1  3               	inc z80_h
000DB1  3               :
000DB1  3               	ldy #0
000DB1  3               	lda (z80_hl),y 		; fetch value from table.
000DB1  3               	sta z80_c
000DB1  3               	inc z80_l 		; next byte of table.
000DB1  3               	bne :+
000DB1  3               	inc z80_h
000DB1  3               :
000DB1  3               	ldy #0
000DB1  3               	lda (z80_hl),y 		; fetch value from table.
000DB1  3               	sta z80_b
000DB1  3               
000DB1  3               	ldy #2
000DB1  3               	lda (z80_ix),y 		; x coordinate in hl.
000DB1  3               	clc
000DB1  3               	adc z80_e		; add sine lb
000DB1  3               	sta (z80_ix),y		; store new coordinate lb.
000DB1  3               	ldy #3
000DB1  3               	lda (z80_ix),y
000DB1  3               	adc z80_d		; add sine hb
000DB1  3               	sta (z80_ix),y		; store new coordinate hb.
000DB1  3               
000DB1  3               	ldy #4
000DB1  3               	lda (z80_ix),y	 	; y coordinate in hl.
000DB1  3               	clc
000DB1  3               	adc z80_c		; add cosine lb
000DB1  3               	sta (z80_ix),y		; store new coordinate lb.
000DB1  3               	ldy #5
000DB1  3               	lda (z80_ix),y
000DB1  3               	adc z80_b		; add cosine lb
000DB1  3               	sta (z80_ix),y		; store new coordinate hb.
000DB1  3               
000DB1  3               	rts
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Move dots
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               dotl:
000DB1  3               	ldy #5
000DB1  3               	lda (z80_ix),y
000DB1  3               	sec
000DB1  3               	sbc #1		 	; move left.
000DB1  3               	sta (z80_ix),y
000DB1  3               	rts
000DB1  3               dotr:
000DB1  3               	ldy #5
000DB1  3               	lda (z80_ix),y
000DB1  3               	clc
000DB1  3               	adc #1		 	; move left.
000DB1  3               	sta (z80_ix),y
000DB1  3               	rts
000DB1  3               dotu:
000DB1  3               	ldy #3
000DB1  3               	lda (z80_ix),y
000DB1  3               	sec
000DB1  3               	sbc #1		 	; move up.
000DB1  3               	sta (z80_ix),y
000DB1  3               	rts
000DB1  3               dotd:
000DB1  3               	ldy #3
000DB1  3               	lda (z80_ix),y
000DB1  3               	clc
000DB1  3               	adc #1			; move down.
000DB1  3               	sta (z80_ix),y
000DB1  3               	rts
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Check if coordinates are ok before redrawing at new position.
000DB1  3               ;
000DB1  3               ; left:   X>L		X=L	Ok
000DB1  3               ; right:  R+15>X	X=R	Ok
000DB1  3               ; top:    Y>T		Y=T	Ok
000DB1  3               ; bottom: B+15>Y	Y=B	Ok
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               chkxy:
000DB1  3               
000DB1  3               ; top:    Y>T		Y=T	Ok
000DB1  3               
000DB1  3               	ldy #3
000DB1  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000DB1  3               	cmp wntopx		; window top.
000DB1  3               	beq kill
000DB1  3               	bcs :+			; compare with top window limit.
000DB1  3               kill:	jmp kilshr		; out of window, kill shrapnel.
000DB1  3               :
000DB1  3               ; left:   X>L		X=L	Ok
000DB1  3               
000DB1  3               	ldy #5
000DB1  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000DB1  3               	cmp wnlftx		; left edge.
000DB1  3               	beq kill
000DB1  3               	bcs :+			; compare with left window limit.
000DB1  3               	jmp kilshr		; out of window, kill shrapnel.
000DB1  3               :
000DB1  3               ; bottom: B+15>Y	Y=B	Ok
000DB1  3               
000DB1  3               	lda wnbotx		; point to bottom.
000DB1  3               	clc
000DB1  3               	adc #15
000DB1  3               	ldy #3
000DB1  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000DB1  3               	beq kill
000DB1  3               	bcs :+			; compare with shrapnel x coordinate.
000DB1  3               	jmp kilshr		; off screen, kill shrapnel..
000DB1  3               :
000DB1  3               ; right:  R+15>X	X=R	Ok
000DB1  3               
000DB1  3               	lda wnrgtx		; point to right edge.
000DB1  3               	clc
000DB1  3               	adc #15
000DB1  3               	ldy #5
000DB1  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000DB1  3               	beq kill
000DB1  3               	bcs :+			; compare with window limit.
000DB1  3               	jmp kilshr		; off screen, kill shrapnel.
000DB1  3               :
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Drop through.
000DB1  3               ; Display shrapnel.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               plot:
000DB1  3               	ldy #3
000DB1  3               	lda (z80_ix),y		; y integer.
000DB1  3               	sta dispy	 	; workspace coordinates.
000DB1  3               	ldy #5
000DB1  3               	lda (z80_ix),y	 	; x integer.
000DB1  3               	sta dispx 		; workspace coordinates.
000DB1  3               
000DB1  3               	ldy #0
000DB1  3               	lda (z80_ix),y 		; type.
000DB1  3               	bne :+			; is it a laser?
000DB1  3               	jmp plot1 		; yes, draw laser instead.
000DB1  3               :
000DB1  3               plot0:
000DB1  3               	lda dispx		; which pixel within byte do we
000DB1  3               	and #7			; want to set first?
000DB1  3               	tay
000DB1  3               	lda dots,y 		; table of small pixel positions.
000DB1  3               	sta z80_e 		; get value.
000DB1  3               
000DB1  3               	jsr scadd 		; screen address.
000DB1  3               	ldy #0
000DB1  3               	lda (scraddr),y		; see what's already there.
000DB1  3               	eor z80_e
000DB1  3               	sta (scraddr),y 	; put back on screen.
000DB1  3               	rts
000DB1  3               
000DB1  3               plot1:
000DB1  3               	jsr scadd 		; screen address.
000DB1  3               	ldy #0
000DB1  3               	lda (scraddr),y 	; fetch byte there.
000DB1  3               	eor #255 		; toggle all bits.
000DB1  3               	sta (scraddr),y 	; new byte.
000DB1  3               	rts
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Switch off shrapnel
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               kilshr:
000DB1  3               	lda #128
000DB1  3               	ldy #0
000DB1  3               	sta (z80_ix),y	; switch off shrapnel.
000DB1  3               	rts
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Sine/cosine table
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               shrsin:	.word 0,1024,391,946,724,724,946,391
000DB1  3               	.word 1024,0,946,65144,724,64811,391,64589
000DB1  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000DB1  3               	.word 64512,0,64589,391,64811,724,65144,946
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Create trail
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               trail:
000DB1  3               	ldy #1
000DB1  3               	lda (z80_ix),y 	; time remaining.
000DB1  3               	sec
000DB1  3               	sbc #1
000DB1  3               	sta (z80_ix),y
000DB1  3               	bne :+
000DB1  3               	jmp trailk		; time to switch it off.
000DB1  3               :
000DB1  3               	jsr qrand		; get a random number.
000DB1  3               	lsr a 			; x or y axis?
000DB1  3               	bcc :+
000DB1  3               	jmp trailv		; use y.
000DB1  3               :
000DB1  3               ; Trail horizontal
000DB1  3               
000DB1  3               	lsr a 			; which direction?
000DB1  3               	bcc :+
000DB1  3               	jmp traill		; go left.
000DB1  3               :
000DB1  3               ; Trail right
000DB1  3               
000DB1  3               	ldy #5
000DB1  3               	lda (z80_ix),y
000DB1  3               	clc
000DB1  3               	adc #1	 		; go right.
000DB1  3               	sta (z80_ix),y
000DB1  3               	rts
000DB1  3               
000DB1  3               ; Trail left
000DB1  3               
000DB1  3               traill:
000DB1  3               	ldy #5
000DB1  3               	lda (z80_ix),y
000DB1  3               	sec
000DB1  3               	sbc #1 			; go left.
000DB1  3               	sta (z80_ix),y
000DB1  3               	rts
000DB1  3               
000DB1  3               ; Trail vertical
000DB1  3               
000DB1  3               trailv:
000DB1  3               	lsr a		 	; which direction?
000DB1  3               	bcc :+
000DB1  3               	jmp trailu		; go up.
000DB1  3               :
000DB1  3               ; Trail down
000DB1  3               
000DB1  3               	ldy #3
000DB1  3               	lda (z80_ix),y
000DB1  3               	clc
000DB1  3               	adc #1 			; go down.
000DB1  3               	sta (z80_ix),y
000DB1  3               	rts
000DB1  3               
000DB1  3               ; Trail up
000DB1  3               
000DB1  3               trailu:
000DB1  3               	ldy #3
000DB1  3               	lda (z80_ix),y
000DB1  3               	sec
000DB1  3               	sbc #1 			; go up.
000DB1  3               	sta (z80_ix),y
000DB1  3               	rts
000DB1  3               
000DB1  3               ; Kill trail
000DB1  3               
000DB1  3               trailk:
000DB1  3               	lda #200		; set off-screen to kill vapour trail.
000DB1  3               	ldy #3
000DB1  3               	sta (z80_ix),y
000DB1  3               	rts
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Create laser beam
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               laser:
000DB1  3               	ldy #1
000DB1  3               	lda (z80_ix),y 		; direction.
000DB1  3               	ror a 			; left or right?
000DB1  3               	bcc :+
000DB1  3               	jmp laserl		; move left.
000DB1  3               :
000DB1  3               ; Laser right
000DB1  3               
000DB1  3               	lda #8			; distance to travel.
000DB1  3               	sta z80_b
000DB1  3               	jmp laserm		; move laser.
000DB1  3               
000DB1  3               ; Laser left
000DB1  3               
000DB1  3               laserl:
000DB1  3               	lda #248		; distance to travel.
000DB1  3               	sta z80_b
000DB1  3               laserm:
000DB1  3               	ldy #5
000DB1  3               	lda (z80_ix),y		; x position.
000DB1  3               	clc
000DB1  3               	adc z80_b		; add distance.
000DB1  3               	sta (z80_ix),y		; set new x coordinate.
000DB1  3               
000DB1  3               ; Test new block.
000DB1  3               
000DB1  3               	sta dispx 		; set x for block collision detection purposes.
000DB1  3               	ldy #3
000DB1  3               	lda (z80_ix),y 		; get y.
000DB1  3               	sta dispy		; set coordinate for collision test.
000DB1  3               	jsr tstbl 		; get block type there.
000DB1  3               	cmp #WALL		; is it solid?
000DB1  3               	bne :+
000DB1  3               	jmp trailk		; yes, it cannot pass.
000DB1  3               :
000DB1  3               .if pflag .or dflag
000DB1  3                       cmp #FODDER             ; is it fodder?
000DB1  3                       bne :+
000DB1  3                       jsr fdchk               ; remove fodder block.
000DB1  3                       jmp trailk              ; destroy laser.
000DB1  3               :
000DB1  3               .endif
000DB1  3                       rts                     ; no, ignore it.
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Dots mask
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               dots:	.byte 128,64,32,16,8,4,2,1
000DB1  3               
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Plot, preserving de.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               plotde:
000DB1  3               	lda z80_d 		; put de on stack.
000DB1  3               	pha
000DB1  3               	lda z80_e
000DB1  3               	pha
000DB1  3               
000DB1  3               	jsr plot 		; plot pixel.
000DB1  3               
000DB1  3               	pla			; restore de from stack.
000DB1  3               	sta z80_e
000DB1  3               	pla
000DB1  3               	sta z80_d
000DB1  3               
000DB1  3               	rts
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Shoot a laser.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               shoot:
000DB1  3               	sta z80_c		; store direction in c register.
000DB1  3               	ldy #8
000DB1  3               	lda (z80_ix),y 		; y coordinate.
000DB1  3               	clc
000DB1  3               shoot1:
000DB1  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
000DB1  3               	sta z80_l 		; put y coordinate in l.
000DB1  3               
000DB1  3               	ldy #9
000DB1  3               	lda (z80_ix),y 		; x coordinate in h.
000DB1  3               	sta z80_h
000DB1  3               
000DB1  3               	lda z80_i		; store pointer to sprite.
000DB1  3               	pha
000DB1  3               	lda z80_x
000DB1  3               	pha
000DB1  3               
000DB1  3               	jsr fpslot 		; find particle slot.
000DB1  3               	bcs :+
000DB1  3               	jmp vapou2		; failed, restore ix.
000DB1  3               :
000DB1  3               	lda #0
000DB1  3               	ldy #0
000DB1  3               	sta (z80_ix),y 		; set up a laser.
000DB1  3               
000DB1  3               	lda z80_c
000DB1  3               	ldy #1
000DB1  3               	sta (z80_ix),y 		; set the direction.
000DB1  3               
000DB1  3               	lda z80_l
000DB1  3               	ldy #3
000DB1  3               	sta (z80_ix),y		; set y coordinate.
000DB1  3               
000DB1  3               	ror z80_c		; check direction we want.
000DB1  3               	bcc :+
000DB1  3               	jmp shootr		; shoot right.
000DB1  3               :
000DB1  3               	lda z80_h		; X position.
000DB1  3               shoot0:
000DB1  3               	and #248		; align on character boundary.
000DB1  3               	ldy #5
000DB1  3               	sta (z80_ix),y		; set x coordinate.
000DB1  3               	jmp vapou0 		; draw first image.
000DB1  3               shootr:
000DB1  3               	lda z80_h		; x position.
000DB1  3               	clc
000DB1  3               	adc #15			; look right.
000DB1  3               	jmp shoot0		; align and continue.
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Create a bit of vapour trail.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               vapour:
000DB1  3               	lda z80_i		; store pointer to sprite.
000DB1  3               	pha
000DB1  3               	lda z80_x
000DB1  3               	pha
000DB1  3               
000DB1  3               	ldy #8
000DB1  3               	lda (z80_ix),y 		; y coordinate.
000DB1  3               	clc
000DB1  3               vapou3:
000DB1  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
000DB1  3               	sta z80_l
000DB1  3               
000DB1  3               	ldy #9
000DB1  3               	lda (z80_ix),y 		; x coordinate.
000DB1  3               	adc #7
000DB1  3               	sta z80_h
000DB1  3               
000DB1  3               	jsr fpslot 		; find particle slot.
000DB1  3               	bcc :+
000DB1  3               	jmp vapou1		; no, we can use it.
000DB1  3               :
000DB1  3               vapou2:
000DB1  3               	pla
000DB1  3               	sta z80_x
000DB1  3               	pla
000DB1  3               	sta z80_i
000DB1  3               	rts
000DB1  3               vapou1:
000DB1  3               	lda z80_l
000DB1  3               	ldy #3
000DB1  3               	sta (z80_ix),y		; set up y.
000DB1  3               
000DB1  3               	lda z80_h
000DB1  3               	ldy #5
000DB1  3               	sta (z80_ix),y 		; set up x coordinate.
000DB1  3               
000DB1  3               	jsr qrand		; get quick random number.
000DB1  3               	and #15			; random time.
000DB1  3               	clc
000DB1  3               	adc #15			; minimum time on screen.
000DB1  3               	ldy #1
000DB1  3               	sta (z80_ix),y		; set time on screen.
000DB1  3               
000DB1  3               	lda #1
000DB1  3               	ldy #0
000DB1  3               	sta (z80_ix),y		; define particle as vapour trail.
000DB1  3               vapou0:
000DB1  3               	jsr chkxy		; plot first position.
000DB1  3               	jmp vapou2
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Create a user particle.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               ptusr:
000DB1  3               	sta z80_f		; store timer.
000DB1  3               
000DB1  3               	ldy #8
000DB1  3               	lda (z80_ix),y 		; y coordinate.
000DB1  3               	clc
000DB1  3               	adc #7			; mid-point of sprite.
000DB1  3               	sta z80_l
000DB1  3               
000DB1  3               	ldy #9
000DB1  3               	lda (z80_ix),y 		; x coordinate.
000DB1  3               	clc
000DB1  3               	adc #7			; mid-point of sprite.
000DB1  3               	sta z80_h
000DB1  3               
000DB1  3               	jsr fpslot 		; find particle slot.
000DB1  3               	bcs ptusr1
000DB1  3               	rts 			; out of slots, can't generate anything.
000DB1  3               ptusr1:
000DB1  3               	lda z80_l
000DB1  3               	ldy #3
000DB1  3               	sta (z80_ix),y 		; set up y.
000DB1  3               
000DB1  3               	lda z80_h
000DB1  3               	ldy #5
000DB1  3               	sta (z80_ix),y		; set up x coordinate.
000DB1  3               
000DB1  3               	lda z80_f 		; restore timer.
000DB1  3               	ldy #1
000DB1  3               	sta (z80_ix),y		; set time on screen.
000DB1  3               
000DB1  3               	lda #7
000DB1  3               	ldy #0
000DB1  3               	sta (z80_ix),y		; define particle as user particle.
000DB1  3               
000DB1  3               	jmp chkxy		; plot first position.
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Create a vertical or horizontal star.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               star:
000DB1  3               	lda z80_i		; store pointer to sprite.
000DB1  3               	pha
000DB1  3               	lda z80_x
000DB1  3               	pha
000DB1  3               
000DB1  3               	jsr fpslot 		; find particle slot.
000DB1  3               	bcs star7		; found one we can use.
000DB1  3               star0:
000DB1  3               	pla 			; restore sprite pointer.
000DB1  3               	sta z80_x
000DB1  3               	pla
000DB1  3               	sta z80_i
000DB1  3               	rts 			; out of slots, can't generate anything.
000DB1  3               star7:
000DB1  3               	lda z80_c		; direction.
000DB1  3               	and #3 			; is it left?
000DB1  3               	bne :+
000DB1  3               	jmp star1 		; yes, it's left.
000DB1  3               :
000DB1  3               	cmp #1 			; is it right?
000DB1  3               	bne :+
000DB1  3               	jmp star2 		; yes, it's right.
000DB1  3               :
000DB1  3               	cmp #2 			; is it up?
000DB1  3               	bne :+
000DB1  3               	jmp star3 		; yes, it's up.
000DB1  3               :
000DB1  3               	ldy wntopx 		; get edge of screen.
000DB1  3               	iny			; down one pixel.
000DB1  3               	tya
000DB1  3               star8:
000DB1  3               	ldy #3
000DB1  3               	sta (z80_ix),y 		; set y coord.
000DB1  3               	jsr qrand 		; get quick random number.
000DB1  3               star9:
000DB1  3               	ldy #5
000DB1  3               	sta (z80_ix),y		; set x position.
000DB1  3               
000DB1  3               	lda z80_c		; direction.
000DB1  3               	and #3			; zero to three.
000DB1  3               	clc
000DB1  3               	adc #3			; 3 to 6 for starfield.
000DB1  3               	ldy #0
000DB1  3               	sta (z80_ix),y		; define particle as star.
000DB1  3               	jsr chkxy		; plot first position.
000DB1  3               	jmp star0
000DB1  3               star1:
000DB1  3               	jsr qrand		; get quick random number.
000DB1  3               	ldy #3
000DB1  3               	sta (z80_ix),y 		; set y coord.
000DB1  3               
000DB1  3               	lda wnrgtx 		; get edge of screen.
000DB1  3               	clc
000DB1  3               	adc #15			; add width of sprite minus 1.
000DB1  3               	jmp star9
000DB1  3               star2:
000DB1  3               	jsr qrand 		; get quick random number.
000DB1  3               	ldy #3
000DB1  3               	sta (z80_ix),y		; set y coord.
000DB1  3               
000DB1  3               	lda wnlftx		; get edge of screen.
000DB1  3               	jmp star9
000DB1  3               star3:
000DB1  3               	lda wnbotx 		; get edge of screen.
000DB1  3               	clc
000DB1  3               	adc #15 		; height of sprite minus one pixel.
000DB1  3               	jmp star8
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Find particle slot for lasers or vapour trail.
000DB1  3               ; can't use alternate accumulator.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               ;.repeat 269
000DB1  3               ;  .byte 0
000DB1  3               ;.endrep
000DB1  3               
000DB1  3               fpslot:
000DB1  3               	lda #<SHRAPN 		; shrapnel table.
000DB1  3               	sta z80_x
000DB1  3               	lda #>SHRAPN
000DB1  3               	sta z80_i
000DB1  3               
000DB1  3               	lda #NUMSHR		; number of pieces in table.
000DB1  3               	sta z80_b
000DB1  3               fpslt0:
000DB1  3               	ldy #0
000DB1  3               	lda (z80_ix),y		; get type.
000DB1  3               	asl a  			; is this slot in use?
000DB1  3               	bcc :+
000DB1  3               	rts			; no, we can use it.
000DB1  3               :
000DB1  3               	clc			; point to more shrapnel.
000DB1  3               	lda z80_x
000DB1  3               	adc #SHRSIZ
000DB1  3               	sta z80_x
000DB1  3               	bcc :+
000DB1  3               	inc z80_i
000DB1  3               :
000DB1  3               	dec z80_b		; repeat for all shrapnel.
000DB1  3               	bne fpslt0
000DB1  3               
000DB1  3               	clc
000DB1  3               	rts 			; out of slots, can't generate anything.
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Create an explosion at sprite position.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               explod:
000DB1  3               	sta z80_c 		; particles to create.
000DB1  3               
000DB1  3               	lda z80_i 		; store pointer to sprite.
000DB1  3               	pha
000DB1  3               	lda z80_x
000DB1  3               	pha
000DB1  3               
000DB1  3               	ldy #8
000DB1  3               	lda (z80_ix),y 		; y coordinate.
000DB1  3               	sta z80_l
000DB1  3               	ldy #9
000DB1  3               	lda (z80_ix),y		; x coordinate.
000DB1  3               	sta z80_h
000DB1  3               
000DB1  3               	lda #<SHRAPN		; shrapnel table.
000DB1  3               	sta z80_x
000DB1  3               	lda #>SHRAPN
000DB1  3               	sta z80_i
000DB1  3               
000DB1  3               	lda #NUMSHR		; number of pieces in table.
000DB1  3               	sta explcnt
000DB1  3               expld0:
000DB1  3               	ldy #0
000DB1  3               	lda (z80_ix),y		; get type.
000DB1  3               	asl a 			; is this slot in use?
000DB1  3               	bcs expld1		; no, we can use it.
000DB1  3               expld2:
000DB1  3               	clc
000DB1  3               	lda z80_x
000DB1  3               	adc #SHRSIZ
000DB1  3               	sta z80_x
000DB1  3               	bcc :+
000DB1  3               	inc z80_i
000DB1  3               :
000DB1  3               	dec explcnt		; repeat for all shrapnel.
000DB1  3               	bne expld0
000DB1  3               expld3:
000DB1  3               	pla			; restore sprite pointer.
000DB1  3               	sta z80_x
000DB1  3               	pla
000DB1  3               	sta z80_i
000DB1  3               	rts 			; out of slots, can't generate any more.
000DB1  3               
000DB1  3               expld1:
000DB1  3               	lda z80_c		; shrapnel counter.
000DB1  3               	and #15			; 0 to 15.
000DB1  3               	clc			; add to x.
000DB1  3               	adc z80_l
000DB1  3               	ldy #3
000DB1  3               	sta (z80_ix),y		; y coord.
000DB1  3               
000DB1  3               	lda seed3 		; crap random number.
000DB1  3               	and #15			; 0 to 15.
000DB1  3               	clc 			; add to y.
000DB1  3               	adc z80_h
000DB1  3               	ldy #5
000DB1  3               	sta (z80_ix),y		; x coord.
000DB1  3               
000DB1  3               	lda #2
000DB1  3               	ldy #0
000DB1  3               	sta (z80_ix),y		; switch it on.
000DB1  3               
000DB1  3               	jsr chkxy		; plot first position.
000DB1  3               	jsr qrand		; quick random angle.
000DB1  3               	and #60 		; keep within range.
000DB1  3               	ldy #1
000DB1  3               	sta (z80_ix),y		; angle.
000DB1  3               
000DB1  3               	dec z80_c		; one less piece of shrapnel to generate.
000DB1  3               	bne expld2 		; back to main explosion loop.
000DB1  3               	jmp expld3 		; restore sprite pointer and exit.
000DB1  3               
000DB1  3               ;explcnt:	.byte 0
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Quick random
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               qrand:
000DB1  3               	jsr random		; r register.
000DB1  3               	eor seed3		; combine with seed.
000DB1  3               	sta seed3 		; new seed.
000DB1  3               	rts
000DB1  3               
000DB1  3               ;seed3:	.byte 0
000DB1  3               
000DB1  3               ;----------------------------------------------------
000DB1  3               ; Display all shrapnel.
000DB1  3               ;----------------------------------------------------
000DB1  3               
000DB1  3               dshrp:
000DB1  3               	lda #<plotde		; display routine.
000DB1  3               	sta proshx+1
000DB1  3               	lda #>plotde
000DB1  3               	sta proshx+2
000DB1  3               	jsr proshr		; process shrapnel.
000DB1  3               
000DB1  3               	lda #<prosh1		; processing routine.
000DB1  3               	sta proshx+1
000DB1  3               	lda #>prosh1
000DB1  3               	sta proshx+2
000DB1  3               	rts
000DB1  3               
000DB1  3               ;------------------------------------------------------
000DB1  3               ; Particle engine.
000DB1  3               ;
000DB1  3               ; Init particle data for 55 particles in SHRAPN table.
000DB1  3               ; Every particle has 6 bytes.
000DB1  3               ;
000DB1  3               ; global:	-
000DB1  3               ; local:	x,y,hl
000DB1  3               ; calls:	-
000DB1  3               ;------------------------------------------------------
000DB1  3               
000DB1  3               inishr:
000DB1  3               	lda #<SHRAPN 		; table.
000DB1  3               	sta z80_l
000DB1  3               	lda #>SHRAPN
000DB1  3               	sta z80_h
000DB1  3               
000DB1  3               	ldy #0
000DB1  3               	ldx #NUMSHR		; shrapnel pieces to process.
000DB1  3               inish0:
000DB1  3               	lda #255 		; kill the shrapnel.
000DB1  3               	sta (z80_hl),y
000DB1  3               
000DB1  3               	clc 			; point there.
000DB1  3               	lda z80_l
000DB1  3               	adc #SHRSIZ		; distance to next.
000DB1  3               	sta z80_l
000DB1  3               	bcc :+
000DB1  3               	inc z80_h
000DB1  3               :
000DB1  3               	dex
000DB1  3               	bne inish0 		; round again.
000DB1  3               	rts
000DB1  3               
000DB1  3               ;------------------------------------------------------
000DB1  3               ; Check for collision between laser and sprite.
000DB1  3               ;------------------------------------------------------
000DB1  3               
000DB1  3               lcol:
000DB1  3               	lda #<SHRAPN		; shrapnel table.
000DB1  3               	sta z80_l
000DB1  3               	lda #>SHRAPN
000DB1  3               	sta z80_h
000DB1  3               
000DB1  3               	lda #NUMSHR		; number of pieces in table.
000DB1  3               	sta z80_b
000DB1  3               lcol0:
000DB1  3               	ldy #0
000DB1  3               	lda (z80_hl),y 		; get type.
000DB1  3               	beq lcol1		; yes, check collision.
000DB1  3               lcol3:
000DB1  3               	clc			; point to more shrapnel.
000DB1  3               	lda z80_l
000DB1  3               	adc #SHRSIZ
000DB1  3               	sta z80_l
000DB1  3               	bcc :+
000DB1  3               	inc z80_h
000DB1  3               :
000DB1  3               	dec z80_b		; repeat for all shrapnel.
000DB1  3               	bne lcol0
000DB1  3               	rts 			; no collision, carry not set.
000DB1  3               lcol1:
000DB1  3               	ldy #3
000DB1  3               	lda (z80_hl),y		; get y.
000DB1  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000DB1  3               ;	sta dispy		; store y
000DB1  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000DB1  3               	sec
000DB1  3               	ldy #8
000DB1  3               	sbc (z80_ix),y		; subtract sprite y.
000DB1  3               lcolh:
000DB1  3               	cmp #SPR_HGT 		; within range?
000DB1  3               	bcc :+
000DB1  3               	jmp lcol2		; no, missed.
000DB1  3               :
000DB1  3               	ldy #5
000DB1  3               	lda (z80_hl),y 		; get x.
000DB1  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000DB1  3               ;	sta dispx		; store x
000DB1  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000DB1  3               	sec
000DB1  3               	ldy #9
000DB1  3               	sbc (z80_ix),y 		; subtract sprite y.
000DB1  3               	cmp #16			; within range?
000DB1  3               	bcs :+
000DB1  3               	jmp lcol4 		; yes, collision occurred.
000DB1  3               :
000DB1  3               lcol2:
000DB1  3               	jmp lcol3
000DB1  3               lcol4:
000DB1  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000DB1  3               ;	lda #200		; set off-screen to kill vapour trail.
000DB1  3               ;	ldy #3
000DB1  3               ;	sta (z80_hl),y		; set laser off screen
000DB1  3               ;	jsr scadd		; calculate screenaddress
000DB1  3               ;	ldy #0
000DB1  3               ;	lda (scraddr),y		; get screen byte
000DB1  3               ;	eor #255		; remove laser
000DB1  3               ;	sta (scraddr),y		; store screen byte
000DB1  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000DB1  3               
000DB1  3               	sec
000DB1  3               	rts 			; return with carry set for collision.
000DB1  3               .endif
000DB1  3               
000DB1  3               ;------------------------------------------------------
000DB1  3               ; Main game engine code starts here.
000DB1  3               ; After initialisation, mloop is the main loop
000DB1  3               ;------------------------------------------------------
000DB1  3               
000DB1  3               game:
000DB1  3               
000DB1  3               ; Set up screen address table.
000DB1  3               
000DB1  3               setsat:
000DB1  3  A9 00        	lda #<ScreenAddr		; start of screen.
000DB3  3  85 rr        	sta scraddr
000DB5  3  A9 80        	lda #>ScreenAddr
000DB7  3  85 rr        	sta scraddr+1
000DB9  3               
000DB9  3  A0 00        	ldy #0			; vertical lines on screen.
000DBB  3               setsa0:
000DBB  3  A5 rr        	lda scraddr
000DBD  3  99 00 9B     	sta SCADTB_lb,y		; write low byte.
000DC0  3  A5 rr        	lda scraddr+1
000DC2  3  C0 C0        	cpy #192		; vertical lines on screen.
000DC4  3  90 02        	bcc :+
000DC6  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
000DC8  3               :
000DC8  3  99 00 9C     	sta SCADTB_hb,y		; write high byte.
000DCB  3  20 5E 08     	jsr nline		; next line down.
000DCE  3  C8           	iny			; next position in table.
000DCF  3  D0 EA        	bne setsa0
000DD1  3               
000DD1  3               ; Init graphics mode
000DD1  3               
000DD1  3  A9 F0        	lda #ScrMode		; graphics mode
000DD3  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
000DD6  3  20 AF 0D     	jsr setpal 		; set up palette.
000DD9  3               
000DD9  3               ; Init AtoMMC joystick
000DD9  3  20 9C 17     	jsr joyinit		; AtoMMC joystick on PORT B
000DDC  3               
000DDC  3               rpblc2:
000DDC  3               .if pflag
000DDC  3               	jsr inishr 		; initialise particle engine.
000DDC  3               .endif
000DDC  3               evintr:
000DDC  3  20 D0 25     	jsr evnt12 		; call intro/menu event.
000DDF  3               
000DDF  3  A9 02        	lda #WALL 		; write default property.
000DE1  3  A2 00        	ldx #0
000DE3  3               clrmap:
000DE3  3  9D 00 98     	sta MAP,x 		; block properties.
000DE6  3  9D 00 99     	sta MAP+256,x
000DE9  3  9D 00 9A     	sta MAP+512,x
000DEC  3  E8           	inx			; next byte.
000DED  3  D0 F4        	bne clrmap
000DEF  3               .if oflag
000DEF  3  20 E8 0C     	jsr iniob 		; initialise objects.
000DF2  3               .endif
000DF2  3  A9 00        	lda #0			; put zero in accumulator.
000DF4  3  85 rr        	sta gamwon		; reset game won flag.
000DF6  3               
000DF6  3  20 62 0F     	jsr inisc 		; init the score.
000DF9  3               mapst:
000DF9  3  AD 3D 1A     	lda stmap 		; start position on map.
000DFC  3  8D 0A 04     	sta roomtb		; set up position in table, if there is one.
000DFF  3               
000DFF  3               inipbl:
000DFF  3               .if aflag
000DFF  3               	lda #<eop		; reset blockpointer
000DFF  3               	sta pbptr
000DFF  3               	lda #>eop
000DFF  3               	sta pbptr+1
000DFF  3               .endif
000DFF  3  20 11 08     	jsr initsc 		; set up first screen.
000E02  3               
000E02  3  A9 F9        	lda #<ssprit 		; default to spare sprite in table.
000E04  3  85 68        	sta z80_x
000E06  3  A9 03        	lda #>ssprit
000E08  3  85 69        	sta z80_i
000E0A  3               evini:
000E0A  3  20 DC 26     	jsr evnt13 		; initialisation.
000E0D  3               
000E0D  3               ; Two restarts.
000E0D  3               ; First restart - clear all sprites and initialise everything.
000E0D  3               
000E0D  3               rstrt:
000E0D  3  20 02 0F     	jsr rsevt 		; restart events.
000E10  3  20 DB 0C     	jsr xspr 		; clear sprite table.
000E13  3  20 F9 05     	jsr sprlst 		; fetch pointer to screen sprites.
000E16  3  20 82 06     	jsr ispr 		; initialise sprite table.
000E19  3               
000E19  3  4C 28 0E     	jmp rstrt0
000E1C  3               
000E1C  3               ; Second restart - clear all but player, and don't initialise him.
000E1C  3               
000E1C  3               rstrtn:
000E1C  3  20 02 0F     	jsr rsevt		; restart events.
000E1F  3  20 26 06     	jsr nspr 		; clear all non-player sprites.
000E22  3  20 F9 05     	jsr sprlst 		; fetch pointer to screen sprites.
000E25  3  20 BF 06     	jsr kspr 		; initialise sprite table, no more players.
000E28  3               
000E28  3               ; Set up the player and/or enemy sprites.
000E28  3               
000E28  3               rstrt0:
000E28  3  A9 00        	lda #0 			; zero in accumulator.
000E2A  3  85 rr        	sta nexlev 		; reset next level flag.
000E2C  3  85 rr        	sta restfl 		; reset restart flag.
000E2E  3  85 rr        	sta deadf 		; reset dead flag.
000E30  3  20 5F 14     	jsr droom 		; show screen layout.
000E33  3               rpblc0:
000E33  3               .if pflag
000E33  3               	jsr inishr 		; initialise particle engine.
000E33  3               .endif
000E33  3               .if aflag
000E33  3               	jsr rbloc		; draw blocks for this screen
000E33  3               .endif
000E33  3               .if oflag
000E33  3  20 B2 0F     	jsr shwob		; draw objects.
000E36  3               .endif
000E36  3               
000E36  3  A9 2D        	lda #<sprtab 		; address of sprite table, even sprites.
000E38  3  85 68        	sta z80_x
000E3A  3  A9 03        	lda #>sprtab
000E3C  3  85 69        	sta z80_i
000E3E  3  20 9B 08     	jsr dspr 		; display sprites.
000E41  3               
000E41  3  A9 3E        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000E43  3  85 68        	sta z80_x
000E45  3  A9 03        	lda #>(sprtab+TABSIZ)
000E47  3  85 69        	sta z80_i
000E49  3  20 9B 08     	jsr dspr 		; display sprites.
000E4C  3               mloop:
000E4C  3  20 1A 0D     	jsr vsync 		; synchronise with display.
000E4F  3  A9 2D        	lda #<sprtab 		; address of sprite table, even sprites.
000E51  3  85 68        	sta z80_x
000E53  3  A9 03        	lda #>sprtab
000E55  3  85 69        	sta z80_i
000E57  3  20 9B 08     	jsr dspr 		; display even sprites.
000E5A  3               
000E5A  3               ;	jsr plsnd 		; play sounds.
000E5A  3  20 B0 0D     	jsr proshr
000E5D  3               
000E5D  3  A9 3E        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000E5F  3  85 68        	sta z80_x
000E61  3  A9 03        	lda #>(sprtab+TABSIZ)
000E63  3  85 69        	sta z80_i
000E65  3  20 9B 08     	jsr dspr 		; display odd sprites.
000E68  3               
000E68  3  A9 F9        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000E6A  3  85 68        	sta z80_x
000E6C  3  A9 03        	lda #>(ssprit)
000E6E  3  85 69        	sta z80_i
000E70  3               evlp1:
000E70  3  20 00 25     	jsr evnt10 		; called once per main loop.
000E73  3  20 15 0A     	jsr pspr 		; process sprites.
000E76  3               
000E76  3               ; Main loop events.
000E76  3               
000E76  3  A9 F9        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000E78  3  85 68        	sta z80_x
000E7A  3  A9 03        	lda #>ssprit
000E7C  3  85 69        	sta z80_i
000E7E  3               evlp2:
000E7E  3  20 CF 25     	jsr evnt11 		; called once per main loop.
000E81  3               bsortx:
000E81  3               ;	jsr bsort 		; sort sprites.
000E81  3               
000E81  3  A5 rr        	lda nexlev		; finished level flag.
000E83  3  F0 03        	beq :+
000E85  3  4C AD 0E     	jmp newlev		; is set, go to next level.
000E88  3               :
000E88  3  A5 rr        	lda gamwon		; finished game flag.
000E8A  3  F0 03        	beq :+
000E8C  3  4C BC 0E     	jmp evwon		; is set, finish the game.
000E8F  3               :
000E8F  3  A5 rr        	lda restfl 		; finished level flag.
000E91  3  C9 01        	cmp #1			; has it been set?
000E93  3  D0 03        	bne :+
000E95  3  4C 0D 0E     	jmp rstrt		; yes, go to next level.
000E98  3               :
000E98  3  C9 02        	cmp #2			; has it been set?
000E9A  3  D0 03        	bne :+
000E9C  3  4C 1C 0E     	jmp rstrtn		; yes, go to next level.
000E9F  3               :
000E9F  3  A5 rr        	lda deadf 		; dead flag.
000EA1  3  F0 03        	beq :+
000EA3  3  4C C2 0E     	jmp pdead		; yes, player dead.
000EA6  3               :
000EA6  3               ; back to start of main loop.
000EA6  3               
000EA6  3  E6 rr        	inc frmno
000EA8  3  E6 rr        	inc clock
000EAA  3  4C 4C 0E     	jmp mloop		; switched to a jmp mloop during test mode.
000EAD  3               
000EAD  3               ;----------------------------------------------------------
000EAD  3               ; Read blocks from list and update screen accordingly.
000EAD  3               ;----------------------------------------------------------
000EAD  3               
000EAD  3               .if aflag
000EAD  3               rbloc:
000EAD  3               	lda #<eop		; reset temp blockpointer
000EAD  3               	sta pbbuf
000EAD  3               	lda #>eop
000EAD  3               	sta pbbuf+1
000EAD  3               
000EAD  3               rbloc2:
000EAD  3               	lda pbbuf			; check for last block
000EAD  3               	cmp pbptr
000EAD  3               	bne rbloc1
000EAD  3               	lda pbbuf+1
000EAD  3               	cmp pbptr+1
000EAD  3               	bne rbloc1
000EAD  3               	rts
000EAD  3               rbloc1:
000EAD  3               	ldy #0
000EAD  3               	lda (pbbuf),y		; check if block for this scno
000EAD  3               	cmp scno
000EAD  3               	bne rbloc0		; if not, skip
000EAD  3               	iny
000EAD  3               	lda (pbbuf),y		; get y
000EAD  3               	sta dispy
000EAD  3               	iny
000EAD  3               	lda (pbbuf),y		; get x
000EAD  3               	sta dispx
000EAD  3               	iny
000EAD  3               	lda (pbbuf),y		; get blocknr
000EAD  3               	jsr pattr2		; draw block
000EAD  3               rbloc0:
000EAD  3               	clc			; point to next block
000EAD  3               	lda pbbuf
000EAD  3               	adc #4
000EAD  3               	sta pbbuf
000EAD  3               	bcc rbloc2
000EAD  3               	inc pbbuf+1
000EAD  3               	jmp rbloc2
000EAD  3               .endif
000EAD  3               
000EAD  3               ;----------------------------------------------------------
000EAD  3               ; New level
000EAD  3               ;----------------------------------------------------------
000EAD  3               
000EAD  3               ;.repeat 268
000EAD  3               ;  .byte 0
000EAD  3               ;.endrep
000EAD  3               
000EAD  3               
000EAD  3               newlev:
000EAD  3  A5 rr        	lda scno 			; current screen.
000EAF  3  18           	clc
000EB0  3  69 01        	adc #1				; next screen.
000EB2  3  CD 98 65     	cmp numsc			; total number of screens.
000EB5  3  B0 05        	bcs evwon			; yes, game finished.
000EB7  3  85 rr        	sta scno			; set new level number.
000EB9  3  4C 0D 0E     	jmp rstrt			; restart, clearing all aliens.
000EBC  3               
000EBC  3               evwon:
000EBC  3  20 25 28     	jsr evnt18		 	; game completed.
000EBF  3  4C D5 0E     	jmp tidyup			; tidy up and return to BASIC/calling routine.
000EC2  3               
000EC2  3               ;----------------------------------------------------------
000EC2  3               ; Player dead.
000EC2  3               ;----------------------------------------------------------
000EC2  3               
000EC2  3               ;.repeat 265
000EC2  3               ;  .byte 0
000EC2  3               ;.endrep
000EC2  3               
000EC2  3               pdead:
000EC2  3  A9 00        	lda #0				; zeroise accumulator.
000EC4  3  85 rr        	sta deadf			; reset dead flag.
000EC6  3  85 rr        	sta clock
000EC8  3               evdie:
000EC8  3  20 B5 27     	jsr evnt16 			; death subroutine.
000ECB  3  A5 rr        	lda numlif			; number of lives.
000ECD  3  F0 03        	beq :+
000ECF  3  4C 0D 0E     	jmp rstrt 			; restart game.
000ED2  3               :
000ED2  3               evfail:
000ED2  3  20 E7 27     	jsr evnt17 			; failure event.
000ED5  3               
000ED5  3               ;----------------------------------------------------------
000ED5  3               ; Tidy things up
000ED5  3               ;----------------------------------------------------------
000ED5  3               
000ED5  3               ;.repeat 291
000ED5  3               ;  .byte 0
000ED5  3               ;.endrep
000ED5  3               
000ED5  3               tidyup:
000ED5  3  A0 00        	ldy #0				; digits to check.
000ED7  3               tidyu2:
000ED7  3  B9 6C 11     	lda score,y 			; get score digit.
000EDA  3  CD 72 11     	cmp hiscor 			; are we larger than high score digit?
000EDD  3  90 07        	bcc tidyu0			; high score is bigger.
000EDF  3  D0 10        	bne tidyu1			; score is greater, record new high score.
000EE1  3  C8           	iny				; next digit of high score.
000EE2  3  C0 06        	cpy #6
000EE4  3  D0 F1        	bne tidyu2			; repeat for all digits
000EE6  3               tidyu0:
000EE6  3  A9 6C        	lda #<score			; return pointing to score.
000EE8  3  85 62        	sta z80_c
000EEA  3  A9 11        	lda #>score
000EEC  3  85 63        	sta z80_b
000EEE  3  4C B1 0D     	jmp game			; restart game
000EF1  3               tidyu1:
000EF1  3  A0 05        	ldy #5
000EF3  3               tidyu3:
000EF3  3  B9 6C 11     	lda score,y			; score.
000EF6  3  99 72 11     	sta hiscor,y			; high score.
000EF9  3  88           	dey
000EFA  3  10 F7        	bpl tidyu3 			; copy score to high score.
000EFC  3               evnewh:
000EFC  3  20 4B 28     	jsr evnt19			; new high score event.
000EFF  3  4C E6 0E     	jmp tidyu0			; tidy up.
000F02  3               
000F02  3               ;--------------------------------------------------
000F02  3               ; Restart event.
000F02  3               ;--------------------------------------------------
000F02  3               
000F02  3               ;.repeat 262
000F02  3               ;  .byte 0
000F02  3               ;.endrep
000F02  3               
000F02  3               rsevt:
000F02  3  A9 F9        	lda #<ssprit 			; default to spare element in table.
000F04  3  85 68        	sta z80_x
000F06  3  A9 03        	lda #>ssprit
000F08  3  85 69        	sta z80_i
000F0A  3               evrs:
000F0A  3  4C B3 27     	jmp evnt14	 		; call restart event.
000F0D  3               
000F0D  3               ;------------------------------------------------------------------
000F0D  3               ; Copy number passed in a to string position bc, right-justified.
000F0D  3               ;
000F0D  3               ; Input:
000F0D  3               ;  A  = number
000F0D  3               ;  BC = string address
000F0D  3               ;
000F0D  3               ; Output:
000F0D  3               ;  BC = string with number
000F0D  3               ;-----------------------------------------------------------------
000F0D  3               
000F0D  3               num2ch:
000F0D  3  85 65        	sta z80_d		; Save number
000F0F  3               
000F0F  3  A9 00        	lda #0
000F11  3  85 rr        	sta flag
000F13  3               numdg3:
000F13  3  A2 64        	ldx #100		; hundreds column.
000F15  3  86 64        	stx z80_e
000F17  3  20 27 0F     	jsr numdg		; show digit.
000F1A  3               numdg2:
000F1A  3  A2 0A        	ldx #10			; tens column.
000F1C  3  86 64        	stx z80_e
000F1E  3  20 27 0F     	jsr numdg		; show digit.
000F21  3               
000F21  3  E6 rr        	inc flag
000F23  3  A2 01        	ldx #1			; units column.
000F25  3  86 64        	stx z80_e
000F27  3               numdg:
000F27  3  A9 30        	lda #48 			; clear digit.
000F29  3  85 61        	sta z80_a
000F2B  3               numdg1:
000F2B  3  A5 65        	lda z80_d
000F2D  3  C5 64        	cmp z80_e
000F2F  3  90 0E        	bcc numdg0		; nothing to show.
000F31  3  38           	sec
000F32  3  A5 65        	lda z80_d
000F34  3  E5 64        	sbc z80_e		; subtract from column.
000F36  3  85 65        	sta z80_d
000F38  3  E6 61        	inc z80_a		; increment digit.
000F3A  3  E6 rr        	inc flag
000F3C  3  4C 2B 0F     	jmp numdg1		; repeat until column is zero.
000F3F  3               numdg0:
000F3F  3  A0 00        	ldy #0
000F41  3  A5 61        	lda z80_a
000F43  3  91 62        	sta (z80_bc),y		; write digit to buffer.
000F45  3  A5 rr        	lda flag
000F47  3  F0 06        	beq :+
000F49  3  E6 62        	inc z80_c		; next buffer position.
000F4B  3  D0 02        	bne :+
000F4D  3  E6 63        	inc z80_b
000F4F  3               :
000F4F  3  60           	rts
000F50  3               num2dd:
000F50  3  85 65        	sta z80_d		; Save number
000F52  3               
000F52  3  A9 01        	lda #1
000F54  3  85 rr        	sta flag
000F56  3               
000F56  3  4C 1A 0F     	jmp numdg2
000F59  3               num2td:
000F59  3  85 65        	sta z80_d		; Save number
000F5B  3               
000F5B  3  A9 01        	lda #1
000F5D  3  85 rr        	sta flag
000F5F  3  4C 13 0F     	jmp numdg3
000F62  3               
000F62  3               ;flag:	.byte 0
000F62  3               
000F62  3               ;---------------------------------------------------------
000F62  3               ; Reset score to "000000"
000F62  3               ;---------------------------------------------------------
000F62  3               
000F62  3               inisc:
000F62  3  A9 30        	lda #'0'
000F64  3  A2 05        	ldx #5			; digits to initialise.
000F66  3               inisc0:
000F66  3  9D 6C 11     	sta score,x 		; write zero digit.
000F69  3  CA           	dex			; next column.
000F6A  3  10 FA        	bpl inisc0		; repeat for all digits.
000F6C  3               
000F6C  3  60           	rts
000F6D  3               
000F6D  3               ;-----------------------------------------------------
000F6D  3               ; Multiply h by d and return in hl.
000F6D  3               ;
000F6D  3               ; Input:
000F6D  3               ;  H = first number
000F6D  3               ;  D = second number
000F6D  3               ;
000F6D  3               ; Output:
000F6D  3               ;  HL = result H x D
000F6D  3               ;-----------------------------------------------------
000F6D  3               
000F6D  3               imul:
000F6D  3  A5 65        	lda z80_d		; HL = H * D
000F6F  3  85 64        	sta z80_e
000F71  3  A5 67        	lda z80_h
000F73  3  85 62        	sta z80_c		; make c first multiplier.
000F75  3               imul0:
000F75  3  A9 00        	lda #0			; zeroise total.
000F77  3  85 66        	sta z80_l
000F79  3  85 67        	sta z80_h
000F7B  3               
000F7B  3  A5 67        	lda z80_h
000F7D  3  85 65        	sta z80_d		; zeroise high byte.
000F7F  3               
000F7F  3  A9 08        	lda #8			; repeat 8 times.
000F81  3  85 63        	sta z80_b
000F83  3               imul1:
000F83  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
000F85  3  90 0E        	bcc imul2		; wasn't set.
000F87  3  18           	clc			; bit was set, so add de.
000F88  3  A5 66        	lda z80_l
000F8A  3  65 64        	adc z80_e
000F8C  3  85 66        	sta z80_l
000F8E  3  A5 67        	lda z80_h
000F90  3  65 65        	adc z80_d
000F92  3  85 67        	sta z80_h
000F94  3  18           	clc 			; reset carry.
000F95  3               imul2:
000F95  3  06 64        	asl z80_e 		; shift de 1 bit left.
000F97  3  26 65        	rol z80_d
000F99  3  C6 63        	dec z80_b
000F9B  3  D0 E6        	bne imul1		; repeat 8 times.
000F9D  3               
000F9D  3  60           	rts
000F9E  3               
000F9E  3               ;-----------------------------------------------
000F9E  3               ; Divide d by e and return in d, remainder in a.
000F9E  3               ;
000F9E  3               ; Input:
000F9E  3               ;  D = first number
000F9E  3               ;  E = second number
000F9E  3               ;
000F9E  3               ; Output:
000F9E  3               ;  D = result D/E
000F9E  3               ;  A = remainder
000F9E  3               ;-----------------------------------------------
000F9E  3               
000F9E  3               idiv:
000F9E  3  A9 00        	lda #0
000FA0  3  A0 08        	ldy #8		 	; bits to shift.
000FA2  3  06 65        	asl z80_d
000FA4  3               idiv0:
000FA4  3  2A           	rol a 			; multiply d by 2.
000FA5  3  C5 64        	cmp z80_e 		; test if e is smaller.
000FA7  3  90 02        	bcc idiv1		; e is greater, no division this time.
000FA9  3  E5 64        	sbc z80_e		; subtract it.
000FAB  3               idiv1:
000FAB  3  26 65        	rol z80_d		; rotate into d.
000FAD  3  88           	dey
000FAE  3  D0 F4        	bne idiv0		; repeat
000FB0  3  60           	rts
000FB1  3               
000FB1  3               ;---------------------------------------------------
000FB1  3               ; Play AY sound effect
000FB1  3               ;---------------------------------------------------
000FB1  3               
000FB1  3               plsnd:
000FB1  3  60           	rts
000FB2  3               
000FB2  3               ;---------------------------------------------------
000FB2  3               ; Objects handling.
000FB2  3               ; 32 bytes for image
000FB2  3               ; 3 for room, y and x
000FB2  3               ; 3 for starting room, y and x.
000FB2  3               ; 254 = disabled.
000FB2  3               ; 255 = object in player"s pockets.
000FB2  3               ;---------------------------------------------------
000FB2  3               
000FB2  3               ;---------------------------------------------------
000FB2  3               ; Show items present.
000FB2  3               ;---------------------------------------------------
000FB2  3               
000FB2  3               ;.repeat 273
000FB2  3               ;  .byte 0
000FB2  3               ;.endrep
000FB2  3               
000FB2  3               .if oflag
000FB2  3               shwob:
000FB2  3  A9 75        	lda #<objdta 			; objects table.
000FB4  3  85 66        	sta z80_l
000FB6  3  A9 67        	lda #>objdta
000FB8  3  85 67        	sta z80_h
000FBA  3               
000FBA  3  AD FF 09     	lda numob 			; number of objects in the game.
000FBD  3  85 rr        	sta sprcnt
000FBF  3               shwob0:
000FBF  3  A0 20        	ldy #32 			; distance to room number.
000FC1  3  B1 66        	lda (z80_hl),y 			; same as an item?
000FC3  3  C5 rr        	cmp scno 			; current location.
000FC5  3  D0 03        	bne :+
000FC7  3  20 DC 0F     	jsr dobj 			; yes, display object.
000FCA  3               :
000FCA  3  18           	clc
000FCB  3  A5 66        	lda z80_l
000FCD  3  69 26        	adc #38 			; distance to next item.
000FCF  3  85 66        	sta z80_l
000FD1  3  A5 67        	lda z80_h
000FD3  3  69 00        	adc #0
000FD5  3  85 67        	sta z80_h	 		; point to it.
000FD7  3  C6 rr        	dec sprcnt
000FD9  3  D0 E4        	bne shwob0 			; repeat for others.
000FDB  3  60           	rts
000FDC  3               
000FDC  3               ;---------------------------------------------------
000FDC  3               ; Display object.
000FDC  3               ; hl must point to object's start address.
000FDC  3               ;
000FDC  3               ; Input:
000FDC  3               ;  HL = object address
000FDC  3               ;---------------------------------------------------
000FDC  3               
000FDC  3               dobj:
000FDC  3  A0 21        	ldy #33
000FDE  3  B1 66        	lda (z80_hl),y 			; point to y.
000FE0  3  85 rr        	sta dispy
000FE2  3  C8           	iny
000FE3  3  B1 66        	lda (z80_hl),y 			; point to x.
000FE5  3  85 rr        	sta dispx
000FE7  3               dobj1:
000FE7  3  4C A7 13     	jmp sprite 			; draw this sprite.
000FEA  3               
000FEA  3               ;--------------------------------------
000FEA  3               ; Remove an object.
000FEA  3               ;
000FEA  3               ; Input:
000FEA  3               ;  A = object number
000FEA  3               ;--------------------------------------
000FEA  3               
000FEA  3               remob:
000FEA  3  CD FF 09     	cmp numob			; number of objects in game.
000FED  3  90 01        	bcc :+				; are we checking past the end?
000FEF  3  60           	rts				; yes, can't get non-existent item.
000FF0  3               :
000FF0  3  48           	pha				; remember object.
000FF1  3  20 FF 0F     	jsr getob			; pick it up if we haven't already got it.
000FF4  3  68           	pla				; retrieve object number.
000FF5  3  20 2E 10     	jsr gotob			; get its address.
000FF8  3  A9 FE        	lda #254
000FFA  3  A0 20        	ldy #32
000FFC  3  91 66        	sta (z80_hl),y			; remove it.
000FFE  3  60           	rts
000FFF  3               
000FFF  3               ;---------------------------------------------------
000FFF  3               ; Pick up object number held in the accumulator.
000FFF  3               ;
000FFF  3               ; Input:
000FFF  3               ;  A = object number
000FFF  3               ;---------------------------------------------------
000FFF  3               
000FFF  3               getob:
000FFF  3  CD FF 09     	cmp numob 		; number of objects in game.
001002  3  90 01        	bcc :+			; are we checking past the end?
001004  3  60           	rts			; yes, can't get non-existent item.
001005  3               :
001005  3  20 2E 10     	jsr gotob 		; check if we already have it.
001008  3  C9 FF        	cmp #255
00100A  3  D0 01        	bne :+
00100C  3  60           	rts			; we already do.
00100D  3               :
00100D  3  A0 20        	ldy #32
00100F  3  B1 66        	lda (z80_hl),y		; is it on this screen?
001011  3  C5 rr        	cmp scno 		; current screen.
001013  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
001015  3               
001015  3  A9 FF        	lda #255
001017  3  91 66        	sta (z80_hl),y		; pick it up.
001019  3  C8           	iny 			; point to y coord.
00101A  3               getob1:
00101A  3  A0 21        	ldy #33
00101C  3  B1 66        	lda (z80_hl),y		; y coord.
00101E  3  85 rr        	sta dispy
001020  3  A0 22        	ldy #34
001022  3  B1 66        	lda (z80_hl),y 		; x coord.
001024  3  85 rr        	sta dispx
001026  3  4C E7 0F     	jmp dobj1 		; delete object sprite.
001029  3               getob0:
001029  3  A9 FF        	lda #255
00102B  3  91 66        	sta (z80_hl),y 		; pick it up.
00102D  3  60           	rts
00102E  3               .endif
00102E  3               
00102E  3               ;-----------------------------------------------------------------
00102E  3               ; Got object check.
00102E  3               ; Call with object in accumulator, returns zero set if in pockets.
00102E  3               ;
00102E  3               ; Input:
00102E  3               ;  A = object number
00102E  3               ;-----------------------------------------------------------------
00102E  3               .if oflag .or mflag
00102E  3               gotob:
00102E  3  CD FF 09     	cmp numob 		; number of objects in game.
001031  3  90 03        	bcc :+ 			; are we checking past the end?
001033  3  4C 3A 10     	jmp gotob0 		; yes, we can't have a non-existent object.
001036  3               :
001036  3  20 3F 10     	jsr findob		; find the object.
001039  3               gotob1:
001039  3  60           	rts
00103A  3               
00103A  3               gotob0:
00103A  3  A9 FE        	lda #254 		; missing.
00103C  3  4C 39 10     	jmp gotob1
00103F  3               
00103F  3               findob:
00103F  3  48           	pha			; save object number
001040  3  A9 75        	lda #<objdta 		; objects.
001042  3  85 66        	sta z80_l
001044  3  A9 67        	lda #>objdta
001046  3  85 67        	sta z80_h
001048  3  68           	pla			; retreive object number
001049  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
00104B  3  AA           	tax 			; loop counter
00104C  3               fndob2:
00104C  3  18           	clc
00104D  3  A5 66        	lda z80_l
00104F  3  69 26        	adc #38 		; size of each object.
001051  3  85 66        	sta z80_l
001053  3  90 02        	bcc :+
001055  3  E6 67        	inc z80_h
001057  3               :
001057  3  CA           	dex 			; repeat until we find address.
001058  3  D0 F2        	bne fndob2
00105A  3               fndob1:
00105A  3  A0 20        	ldy #32			; distance to room it's in.
00105C  3  B1 66        	lda (z80_hl),y		; fetch status.
00105E  3  60           	rts
00105F  3               .endif
00105F  3               
00105F  3               ;---------------------------------------------
00105F  3               ; Drop object number at (dispx, dispy).
00105F  3               ;
00105F  3               ; Input:
00105F  3               ;  A = object number
00105F  3               ;---------------------------------------------
00105F  3               
00105F  3               .if oflag
00105F  3               drpob:
00105F  3  CD FF 09     	cmp numob 		; are we checking past the end?
001062  3  90 01        	bcc :+
001064  3  60           	rts			; yes, can't drop non-existent item.
001065  3               :
001065  3  20 2E 10     	jsr gotob		; make sure object is in inventory.
001068  3  C5 rr        	cmp scno		; already on this screen?
00106A  3  D0 01        	bne :+
00106C  3  60           	rts			; yes, nothing to do.
00106D  3               :
00106D  3  A0 20        	ldy #32
00106F  3  A5 rr        	lda scno
001071  3  91 66        	sta (z80_hl),y		; bring onto screen.
001073  3  A5 rr        	lda dispy		; sprite y coordinate.
001075  3  C8           	iny
001076  3  91 66        	sta (z80_hl),y		; point to object y.
001078  3  A5 rr        	lda dispx 		; sprite x coordinate.
00107A  3  C8           	iny
00107B  3  91 66        	sta (z80_hl),y 		; point to object x
00107D  3  4C DC 0F     	jmp dobj		; draw the object sprite.
001080  3               
001080  3               ;-----------------------------------------------
001080  3               ; Seek objects at sprite position.
001080  3               ;
001080  3               ; Output:
001080  3               ;  A = object number, if not found A=255
001080  3               ;-----------------------------------------------
001080  3               
001080  3               ;.repeat 319
001080  3               ;  .byte 0
001080  3               ;.endrep
001080  3               
001080  3               skobj:
001080  3  A9 75        	lda #<objdta 		; pointer to objects.
001082  3  85 66        	sta z80_l
001084  3  A9 67        	lda #>objdta
001086  3  85 67        	sta z80_h
001088  3               
001088  3  AD FF 09     	lda numob 		; number of objects in game.
00108B  3  85 63        	sta z80_b 		; set up the loop counter.
00108D  3               skobj0:
00108D  3  A5 rr        	lda scno		; current room number.
00108F  3  A0 20        	ldy #32
001091  3  D1 66        	cmp (z80_hl),y		; is object in here?
001093  3  D0 03        	bne :+
001095  3  20 AA 10     	jsr skobj1		; yes, check coordinates.
001098  3               :
001098  3  18           	clc			; point to next object in table.
001099  3  A5 66        	lda z80_l
00109B  3  69 26        	adc #38			; size of each object.
00109D  3  85 66        	sta z80_l
00109F  3  90 02        	bcc :+
0010A1  3  E6 67        	inc z80_h
0010A3  3               :
0010A3  3  C6 63        	dec z80_b
0010A5  3  D0 E6        	bne skobj0		; repeat for all objects.
0010A7  3               
0010A7  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
0010A9  3  60           	rts
0010AA  3               
0010AA  3               skobj1:
0010AA  3  A0 21        	ldy #33			; point to y coordinate.
0010AC  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
0010AE  3  38           	sec
0010AF  3  A0 08        	ldy #8
0010B1  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
0010B3  3  18           	clc
0010B4  3  69 0F        	adc #15			; add sprite height minus one.
0010B6  3  C9 1F        	cmp #31			; within range?
0010B8  3  B0 18        	bcs skobj2		; no, ignore object.
0010BA  3               
0010BA  3  A0 22        	ldy #34			; point to x coordinate now.
0010BC  3  B1 66        	lda (z80_hl),y 		; get coordinate.
0010BE  3  38           	sec
0010BF  3  A0 09        	ldy #9
0010C1  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
0010C3  3  18           	clc			; add sprite width minus one.
0010C4  3  69 0F        	adc #15
0010C6  3  C9 1F        	cmp #31			; within range?
0010C8  3  B0 08        	bcs skobj2		; no, ignore object.
0010CA  3               
0010CA  3  68           	pla			; remove return address from stack.
0010CB  3  68           	pla
0010CC  3               
0010CC  3  AD FF 09     	lda numob 		; objects in game.
0010CF  3  38           	sec
0010D0  3  E5 63        	sbc z80_b		; subtract loop counter.
0010D2  3               skobj2:
0010D2  3  60           	rts			; accumulator now points to object.
0010D3  3               .endif
0010D3  3               
0010D3  3               ;---------------------------------------------------------------------
0010D3  3               ; Spawn a new sprite.
0010D3  3               ;---------------------------------------------------------------------
0010D3  3               
0010D3  3               .if gflag
0010D3  3                 offset = 0
0010D3  3               .else
0010D3  3                 offset = 20
0010D3  3               .endif
0010D3  3               
0010D3  3               ;.repeat 264+73
0010D3  3               ;  .byte 0
0010D3  3               ;.endrep
0010D3  3               
0010D3  3               spawn:
0010D3  3  A9 2D        	lda #<sprtab		; sprite table.
0010D5  3  85 66        	sta z80_l
0010D7  3  A9 03        	lda #>sprtab
0010D9  3  85 67        	sta z80_h
0010DB  3               numsp1:
0010DB  3  A9 0C        	lda #NUMSPR		; number of sprites.
0010DD  3  85 rr        	sta spcnt
0010DF  3               spaw0:
0010DF  3  A0 00        	ldy #0
0010E1  3  B1 66        	lda (z80_hl),y		; get sprite type.
0010E3  3  C9 FF        	cmp #255		; is it an unused slot?
0010E5  3  F0 0F        	beq spaw1
0010E7  3  18           	clc 			; point to next sprite in table.
0010E8  3  A5 66        	lda z80_l
0010EA  3  69 11        	adc #TABSIZ		; size of each entry.
0010EC  3  85 66        	sta z80_l
0010EE  3  90 02        	bcc :+
0010F0  3  E6 67        	inc z80_h
0010F2  3               :
0010F2  3  C6 rr        	dec spcnt		; one less iteration.
0010F4  3  D0 E9        	bne spaw0		; keep going until we find a slot.
0010F6  3               
0010F6  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0010F6  3               
0010F6  3               spaw1:
0010F6  3  A5 69        	lda z80_i		; address of original sprite.
0010F8  3  48           	pha
0010F9  3  A5 68        	lda z80_x
0010FB  3  48           	pha
0010FC  3               
0010FC  3  A5 66        	lda z80_l		; store spawned sprite address.
0010FE  3  85 rr        	sta spptr
001100  3  A5 67        	lda z80_h
001102  3  85 rr        	sta spptr+1
001104  3               
001104  3  A5 62        	lda z80_c
001106  3  A0 00        	ldy #0
001108  3  91 66        	sta (z80_hl),y 		; set the type.
00110A  3  A0 05        	ldy #5
00110C  3  91 66        	sta (z80_hl),y		; copy
00110E  3               
00110E  3  A5 63        	lda z80_b
001110  3  A0 01        	ldy #1
001112  3  91 66        	sta (z80_hl),y		; set the image.
001114  3  A0 06        	ldy #6
001116  3  91 66        	sta (z80_hl),y		; copy
001118  3               
001118  3  A9 00        	lda #0 			; frame zero.
00111A  3  A0 02        	ldy #2
00111C  3  91 66        	sta (z80_hl),y		; set frame.
00111E  3  A0 07        	ldy #7
001120  3  91 66        	sta (z80_hl),y		; copy
001122  3               
001122  3  A0 08        	ldy #8
001124  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001126  3  A0 03        	ldy #3
001128  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00112A  3  A0 08        	ldy #8
00112C  3  91 66        	sta (z80_hl),y		; copy
00112E  3               
00112E  3  A0 09        	ldy #9
001130  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001132  3  A0 04        	ldy #4
001134  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
001136  3  A0 09        	ldy #9
001138  3  91 66        	sta (z80_hl),y		; copy
00113A  3               
00113A  3  A0 0A        	ldy #10			; direction of original.
00113C  3  B1 68        	lda (z80_ix),y
00113E  3  91 66        	sta (z80_hl),y		; direction
001140  3               
001140  3  A9 00        	lda #0
001142  3  A0 0B        	ldy #11
001144  3  91 66        	sta (z80_hl),y		; reset parameter.
001146  3  C8           	iny
001147  3  91 66        	sta (z80_hl),y		; reset parameter.
001149  3  C8           	iny
00114A  3  91 66        	sta (z80_hl),y		; reset parameter.
00114C  3  C8           	iny
00114D  3  91 66        	sta (z80_hl),y		; reset parameter.
00114F  3               rtssp:
00114F  3  A5 rr        	lda spptr		; address of new sprite.
001151  3  85 68        	sta z80_x
001153  3  A5 rr        	lda spptr+1
001155  3  85 69        	sta z80_i
001157  3               evis1:
001157  3  20 CC 24     	jsr evnt09 		; call sprite initialisation event.
00115A  3               
00115A  3  A5 rr        	lda spptr 		; address of new sprite.
00115C  3  85 68        	sta z80_x
00115E  3  A5 rr        	lda spptr+1
001160  3  85 69        	sta z80_i
001162  3  20 17 19     	jsr sspria 		; display the new sprite.
001165  3               
001165  3  68           	pla			; address of original sprite.
001166  3  85 68        	sta z80_x
001168  3  68           	pla
001169  3  85 69        	sta z80_i
00116B  3               
00116B  3  60           	rts
00116C  3               
00116C  3               ;spcnt:	.byte 0
00116C  3               ;spptr:	.word 0			; spawned sprite pointer.
00116C  3               ;seed:	.byte 0			; seed for random numbers.
00116C  3  30 30 30 30  score:	.byte "000000"		; player"s score.
001170  3  30 30        
001172  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
001176  3  30 30        
001178  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00117C  3  30 30        
00117E  3  00 80        grbase:	.word ScreenAddr	; graphics base address.
001180  3               
001180  3               ;----------------------------------------------------
001180  3               ; Check y-pos
001180  3               ;----------------------------------------------------
001180  3               
001180  3               checkx:
001180  3  A5 rr        	lda dispy		; y position.
001182  3  C9 18        	cmp #24			; off screen?
001184  3  B0 01        	bcs :+
001186  3  60           	rts			; no, it's okay.
001187  3               :
001187  3  68           	pla			; remove return address from stack.
001188  3  85 66        	sta z80_l
00118A  3  68           	pla
00118B  3  85 67        	sta z80_h
00118D  3  60           	rts
00118E  3               
00118E  3               ;-----------------------------------------------
00118E  3               ; Displays the current high score.
00118E  3               ;-----------------------------------------------
00118E  3               
00118E  3               dhisc:
00118E  3  A9 72        	lda #<hiscor 		; high score text.
001190  3  8D B2 11     	sta dscor3+1
001193  3               .if bigflag
001193  3               	sta bscor3+1
001193  3               .endif
001193  3  A9 11        	lda #>hiscor
001195  3  8D B3 11     	sta dscor3+2
001198  3               .if bigflag
001198  3               	sta bscor3+2
001198  3               .endif
001198  3  4C A5 11     	jmp dscor1		; check in printable range then show 6 digits.
00119B  3               
00119B  3               ;------------------------------------------------------
00119B  3               ; Displays the current score.
00119B  3               ;------------------------------------------------------
00119B  3               
00119B  3               dscor:
00119B  3  A9 6C        	lda #<score		; score text.
00119D  3  8D B2 11     	sta dscor3+1
0011A0  3               .if bigflag
0011A0  3               	sta bscor3+1
0011A0  3               .endif
0011A0  3  A9 11        	lda #>score
0011A2  3  8D B3 11     	sta dscor3+2
0011A5  3               .if bigflag
0011A5  3               	sta bscor3+2
0011A5  3               .endif
0011A5  3               dscor1:
0011A5  3  8C 00 0A     	sty tmpscr
0011A8  3  20 8E 18     	jsr preprt		; set up font and print position.
0011AB  3  20 80 11     	jsr checkx		; make sure we're in a printable range.
0011AE  3               
0011AE  3               .if bigflag
0011AE  3               	lda prtmod		; get print mode.
0011AE  3               	beq :+			; standard size text?
0011AE  3               	jmp bscor0		; no, show double-height.
0011AE  3               :
0011AE  3               .endif
0011AE  3               dscor0:
0011AE  3  AC 00 0A     	ldy tmpscr
0011B1  3               dscor3:
0011B1  3  B9 6C 11     	lda score,y
0011B4  3  20 EC 12     	jsr pchar 		; display character.
0011B7  3  E6 rr        	inc dispx		; move along x coordinate
0011B9  3               
0011B9  3  EE 00 0A     	inc tmpscr
0011BC  3  C6 63        	dec z80_b
0011BE  3  D0 EE        	bne dscor0 		; repeat for all digits.
0011C0  3               dscor2:
0011C0  3  A5 rr        	lda dispx 		; set up display coordinates.
0011C2  3  85 rr        	sta charx
0011C4  3  A5 rr        	lda dispy
0011C6  3  85 rr        	sta chary
0011C8  3  60           	rts
0011C9  3               
0011C9  3               ;------------------------------------------------------
0011C9  3               ; Displays the current score in double-height characters.
0011C9  3               ;
0011C9  3               ; Input:
0011C9  3               ;  B  = digit number
0011C9  3               ;  HL = score string
0011C9  3               ;------------------------------------------------------
0011C9  3               
0011C9  3               .if bigflag
0011C9  3               bscor0:
0011C9  3               	ldy tmpscr
0011C9  3               bscor3:
0011C9  3               	lda score,y
0011C9  3               	jsr bchar 		; display big char.
0011C9  3               
0011C9  3               	inc tmpscr
0011C9  3               	dec z80_b
0011C9  3               	beq :+
0011C9  3               	jmp bscor0 		; repeat for all digits.
0011C9  3               :
0011C9  3               	jmp dscor2 		; tidy up line and column variables.
0011C9  3               .endif
0011C9  3               
0011C9  3               ;-----------------------------------------------------
0011C9  3               ; Adds number in the hl pair to the score.
0011C9  3               ;-----------------------------------------------------
0011C9  3               
0011C9  3               ;.repeat 409
0011C9  3               ;  .byte 0
0011C9  3               ;.endrep
0011C9  3               
0011C9  3               addsc:
0011C9  3  A9 6D        	lda #<(score+1) 	; ten thousands column.
0011CB  3  85 64        	sta z80_e
0011CD  3  A9 11        	lda #>(score+1)
0011CF  3  85 65        	sta z80_d
0011D1  3  A9 10        	lda #<10000		; amount to add each time.
0011D3  3  85 62        	sta z80_c
0011D5  3  A9 27        	lda #>10000
0011D7  3  85 63        	sta z80_b
0011D9  3  20 1D 12     	jsr incsc		; add to score.
0011DC  3               
0011DC  3  E6 64        	inc z80_e		; thousands column.
0011DE  3  D0 02        	bne :+
0011E0  3  E6 65        	inc z80_d
0011E2  3               :
0011E2  3  A9 E8        	lda #<1000		; amount to add each time.
0011E4  3  85 62        	sta z80_c
0011E6  3  A9 03        	lda #>1000
0011E8  3  85 63        	sta z80_b
0011EA  3  20 1D 12     	jsr incsc 		; add to score.
0011ED  3               
0011ED  3  E6 64        	inc z80_e		; hundreds column.
0011EF  3  D0 02        	bne :+
0011F1  3  E6 65        	inc z80_d
0011F3  3               :
0011F3  3  A9 64        	lda #<100		; amount to add each time.
0011F5  3  85 62        	sta z80_c
0011F7  3  A9 00        	lda #>100
0011F9  3  85 63        	sta z80_b
0011FB  3  20 1D 12     	jsr incsc		; add to score.
0011FE  3               
0011FE  3  E6 64        	inc z80_e 		; tens column.
001200  3  D0 02        	bne :+
001202  3  E6 65        	inc z80_d
001204  3               :
001204  3  A9 0A        	lda #<10		; amount to add each time.
001206  3  85 62        	sta z80_c
001208  3  A9 00        	lda #>10
00120A  3  85 63        	sta z80_b
00120C  3  20 1D 12     	jsr incsc 		; add to score.
00120F  3               
00120F  3  E6 64        	inc z80_e		; units column.
001211  3  D0 02        	bne :+
001213  3  E6 65        	inc z80_d
001215  3               :
001215  3  A9 01        	lda #<1			; units.
001217  3  85 62        	sta z80_c
001219  3  A9 00        	lda #>1
00121B  3  85 63        	sta z80_b
00121D  3               incsc:
00121D  3  A5 67        	lda z80_h		; store amount to add.
00121F  3  48           	pha
001220  3  A5 66        	lda z80_l
001222  3  48           	pha
001223  3               
001223  3  38           	sec			; subtract from amount to add.
001224  3  A5 66        	lda z80_l
001226  3  E5 62        	sbc z80_c
001228  3  85 66        	sta z80_l
00122A  3  A5 67        	lda z80_h
00122C  3  E5 63        	sbc z80_b
00122E  3  85 67        	sta z80_h
001230  3  90 14        	bcc incsc0		; too much, restore value.
001232  3               
001232  3  68           	pla			; delete the previous amount from the stack.
001233  3  68           	pla
001234  3               
001234  3  A5 65        	lda z80_d 		; store column position.
001236  3  48           	pha
001237  3  A5 64        	lda z80_e
001239  3  48           	pha
00123A  3  20 4D 12     	jsr incsc2		; do the increment.
00123D  3               
00123D  3  68           	pla			; restore column.
00123E  3  85 64        	sta z80_e
001240  3  68           	pla
001241  3  85 65        	sta z80_d
001243  3  4C 1D 12     	jmp incsc		; repeat until all added.
001246  3               
001246  3               incsc0:
001246  3  68           	pla			; restore previous value.
001247  3  85 66        	sta z80_l
001249  3  68           	pla
00124A  3  85 67        	sta z80_h
00124C  3  60           	rts
00124D  3               incsc2:
00124D  3  A0 00        	ldy #0
00124F  3  B1 64        	lda (z80_de),y 		; get amount.
001251  3  18           	clc
001252  3  69 01        	adc #1			; add one to column.
001254  3  91 64        	sta (z80_de),y		; write new column total.
001256  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
001258  3  B0 01        	bcs :+
00125A  3  60           	rts			; no, carry on.
00125B  3               :
00125B  3  A9 30        	lda #'0'		; make it zero.
00125D  3  91 64        	sta (z80_de),y		; write new column total.
00125F  3  C6 64        	dec z80_e		; back one column.
001261  3  D0 02        	bne :+
001263  3  C6 65        	dec z80_d
001265  3               :
001265  3  4C 4D 12     	jmp incsc2
001268  3               
001268  3               ;------------------------------------
001268  3               ; Add bonus to score and reset bonus
001268  3               ;------------------------------------
001268  3               
001268  3               ;.repeat 256+24
001268  3               ;  .byte 0
001268  3               ;.endrep
001268  3               
001268  3               addbo:
001268  3  A2 05        	ldx #5			; last digit.
00126A  3  18           	clc
00126B  3               addbo0:
00126B  3  BD 6C 11     	lda score,x		; get score.
00126E  3  7D 78 11     	adc bonus,x		; add bonus.
001271  3  38           	sec			; 0 to 18.
001272  3  E9 30        	sbc #48
001274  3  48           	pha
001275  3  A9 30        	lda #'0'
001277  3  9D 78 11     	sta bonus,x
00127A  3  68           	pla
00127B  3  C9 3A        	cmp #58
00127D  3  90 03        	bcc addbo1
00127F  3  38           	sec
001280  3  E9 0A        	sbc #10
001282  3               addbo1:
001282  3  9D 6C 11     	sta score,x		; zeroise bonus.
001285  3  CA           	dex			; next digit.
001286  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
001288  3  60           	rts
001289  3               
001289  3               ;------------------------------------
001289  3               ; Swap score and bonus.
001289  3               ;------------------------------------
001289  3               
001289  3               swpsb:
001289  3  A2 05        	ldx #5			; digits to add.
00128B  3               swpsb0:
00128B  3  BD 6C 11     	lda score,x 		; get score digits.
00128E  3  48           	pha			; save digit
00128F  3  BD 78 11     	lda bonus,x 		; get bonus digits.
001292  3  9D 6C 11     	sta score,x		; switch score-bonus
001295  3  68           	pla
001296  3  9D 78 11     	sta bonus,x
001299  3  CA           	dex 			; repeat for all 6 digits.
00129A  3  10 EF        	bpl swpsb0
00129C  3  60           	rts
00129D  3               
00129D  3               ;----------------------------------------------------
00129D  3               ; Get print address.
00129D  3               ;----------------------------------------------------
00129D  3               
00129D  3               gprad:
00129D  3               ;	ldy dispy
00129D  3               ;	lda SCADTB_lb,y
00129D  3               ;	clc
00129D  3               ;	adc dispx
00129D  3               ;	sta scraddr
00129D  3               ;	lda dispy
00129D  3               ;	clc
00129D  3               ;	adc #$80
00129D  3               ;	sta scraddr+1
00129D  3               ;	lda prtmod
00129D  3               ;	bne :+
00129D  3               ;	inc scraddr+1
00129D  3               ;:
00129D  3               ;	rts
00129D  3               
00129D  3  A5 rr        	lda dispx		; get x
00129F  3  85 rr        	sta scraddr		; store lb address
0012A1  3               
0012A1  3  2A           	rol a
0012A2  3  26 rr        	rol tmp
0012A4  3  2A           	rol a
0012A5  3  26 rr        	rol tmp
0012A7  3  2A           	rol a
0012A8  3  26 rr        	rol tmp
0012AA  3  A5 rr        	lda tmp
0012AC  3  29 07        	and #7
0012AE  3  85 rr        	sta tmp
0012B0  3  A5 rr        	lda prtmod
0012B2  3  F0 02        	beq :+
0012B4  3  06 rr        	asl tmp
0012B6  3               :
0012B6  3  A5 rr        	lda tmp
0012B8  3  18           	clc
0012B9  3  65 rr        	adc dispy		; get y
0012BB  3  09 80        	ora #$80		; add $80
0012BD  3  85 rr        	sta scraddr+1		; store hb address
0012BF  3  60           	rts
0012C0  3               
0012C0  3               ;--------------------------------------------------------------
0012C0  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0012C0  3               ;
0012C0  3               ; Output:
0012C0  3               ;  bufaddr = MAP + dispy*32 + dispx
0012C0  3               ;--------------------------------------------------------------
0012C0  3               
0012C0  3               pradd:
0012C0  3  A5 rr        	lda dispy 		; y coordinate.
0012C2  3  85 rr        	sta bufaddr
0012C4  3  A9 00        	lda #0
0012C6  3  85 rr        	sta bufaddr+1
0012C8  3  06 rr        	asl bufaddr  		; multiply char by 32
0012CA  3  26 rr        	rol bufaddr+1
0012CC  3  06 rr        	asl bufaddr
0012CE  3  26 rr        	rol bufaddr+1
0012D0  3  06 rr        	asl bufaddr
0012D2  3  26 rr        	rol bufaddr+1
0012D4  3  06 rr        	asl bufaddr
0012D6  3  26 rr        	rol bufaddr+1
0012D8  3  06 rr        	asl bufaddr
0012DA  3  26 rr        	rol bufaddr+1
0012DC  3  18           	clc			; add address of MAP graphics.
0012DD  3  A5 rr        	lda bufaddr
0012DF  3  65 rr        	adc dispx
0012E1  3  69 00        	adc #<MAP
0012E3  3  85 rr        	sta bufaddr
0012E5  3  A5 rr        	lda bufaddr+1
0012E7  3  69 98        	adc #>MAP
0012E9  3  85 rr        	sta bufaddr+1
0012EB  3  60           	rts
0012EC  3               
0012EC  3               ;----------------------------------------------------
0012EC  3               ; Display character in A at dispx,dispy.
0012EC  3               ;
0012EC  3               ; Input:
0012EC  3               ;  A 	   = character to print
0012EC  3               ;----------------------------------------------------
0012EC  3               
0012EC  3               pchar:
0012EC  3  85 rr        	sta fntaddr
0012EE  3  A9 00        	lda #0
0012F0  3  85 rr        	sta fntaddr+1
0012F2  3  06 rr        	asl fntaddr  		; multiply char by 8.
0012F4  3  26 rr        	rol fntaddr+1
0012F6  3  06 rr        	asl fntaddr
0012F8  3  26 rr        	rol fntaddr+1
0012FA  3  06 rr        	asl fntaddr
0012FC  3  26 rr        	rol fntaddr+1
0012FE  3               
0012FE  3  A5 rr        	lda fntaddr
001300  3  18           	clc
001301  3  69 6D        	adc #<(FONT-256)
001303  3  85 rr        	sta fntaddr		; that's the low byte.
001305  3  A5 rr        	lda fntaddr+1
001307  3  69 69        	adc #>(FONT-256)
001309  3  85 rr        	sta fntaddr+1		; add displacement.
00130B  3               pchark:
00130B  3  20 9D 12     	jsr gprad		; get screen address.
00130E  3  A2 07        	ldx #7			; lines to write.
001310  3               pchar0:
001310  3  A0 00        	ldy #0
001312  3  B1 rr        	lda (fntaddr),y 	; get image byte.
001314  3  BC 85 13     	ldy scrtab,x		; Get rowoffset
001317  3               .if gflag
001317  3               	and andeor
001317  3               	eor andeor+1
001317  3               .endif
001317  3               .if iflag
001317  3               	eor #$ff
001317  3               .endif
001317  3  91 rr        	sta (scraddr),y 	; copy to screen.
001319  3  E6 rr        	inc fntaddr		; next image byte.
00131B  3  D0 02        	bne :+
00131D  3  E6 rr        	inc fntaddr+1
00131F  3               :
00131F  3  CA           	dex			; next screen row down.
001320  3  10 EE        	bpl pchar0		; repeat.
001322  3  60           	rts
001323  3               
001323  3               ;.repeat 262
001323  3               ;  .byte 0
001323  3               ;.endrep
001323  3               
001323  3               ;scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
001323  3               
001323  3               ;----------------------------------------------
001323  3               
001323  3               ; Print attributes, properties and pixels.
001323  3               ;
001323  3               ; Input:
001323  3               ;  A	= tile number
001323  3               ;----------------------------------------------
001323  3               
001323  3               ;.repeat 258
001323  3               ;  .byte 0
001323  3               ;.endrep
001323  3               
001323  3               pbpattr:			; entry PUTBLOCK command
001323  3  A4 rr        	ldy charx
001325  3  84 rr        	sty dispx
001327  3  A4 rr        	ldy chary
001329  3  84 rr        	sty dispy
00132B  3               pattr:
00132B  3               .if aflag
00132B  3               	pha
00132B  3               	jsr wbloc		; save blockinfo
00132B  3               	pla
00132B  3               .endif
00132B  3               
00132B  3               pattr2:
00132B  3  85 63        	sta z80_b		; store cell in b register for now.
00132D  3  AA           	tax
00132E  3  BD 1D 2F     	lda bprop,x 		; block properties.
001331  3  85 62        	sta z80_c
001333  3  C9 08        	cmp #COLECT
001335  3  D0 05        	bne :+
001337  3  A5 63        	lda z80_b
001339  3  8D 02 0A     	sta colpatt
00133C  3               :
00133C  3  20 C0 12     	jsr pradd 		; get property buffer address.
00133F  3  A5 62        	lda z80_c
001341  3  A0 00        	ldy #0
001343  3  91 rr        	sta (bufaddr),y 	; write property.
001345  3  A5 63        	lda z80_b 		; restore cell.
001347  3  4C 4A 13     	jmp panp
00134A  3               ; Print attributes, no properties.
00134A  3               
00134A  3               ;.repeat 257
00134A  3               ;  .byte 0
00134A  3               ;.endrep
00134A  3               
00134A  3               panp:
00134A  3  85 64        	sta z80_e		; displacement in e.
00134C  3  A9 00        	lda #0
00134E  3  85 65        	sta z80_d		; no high byte.
001350  3  06 64        	asl z80_e  		; multiply char by 8.
001352  3  26 65        	rol z80_d
001354  3  06 64        	asl z80_e
001356  3  26 65        	rol z80_d
001358  3  06 64        	asl z80_e
00135A  3  26 65        	rol z80_d
00135C  3  18           	clc
00135D  3  A5 64        	lda z80_e
00135F  3  69 A5        	adc #<chgfx 		; address of graphics.
001361  3  85 rr        	sta tileaddr
001363  3  A5 65        	lda z80_d
001365  3  69 2C        	adc #>chgfx
001367  3  85 rr        	sta tileaddr+1
001369  3  20 9D 12     	jsr gprad 		; get screen address.
00136C  3  A2 07        	ldx #7			; number of pixel rows to write.
00136E  3               panp0:
00136E  3  A0 00        	ldy #0
001370  3  B1 rr        	lda (tileaddr),y 	; get image byte.
001372  3               .if iflag
001372  3               	eor #$ff		; Invert
001372  3               .endif
001372  3  BC 85 13     	ldy scrtab,x
001375  3  91 rr        	sta (scraddr),y 	; copy to screen.
001377  3  E6 rr        	inc tileaddr 		; next image byte.
001379  3  D0 02        	bne :+
00137B  3  E6 rr        	inc tileaddr+1
00137D  3               :
00137D  3  CA           	dex	 		; repeat for 8 pixel rows.
00137E  3  10 EE        	bpl panp0
001380  3  E6 rr        	inc dispx 		; move along one.
001382  3  E6 rr        	inc charx
001384  3  60           	rts
001385  3               
001385  3               ;.REPEAT 259
001385  3               ;  .BYTE 0
001385  3               ;.ENDREP
001385  3               
001385  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
001389  3  60 40 20 00  
00138D  3               
00138D  3               ;----------------------------------------------
00138D  3               ; Write block
00138D  3               ;----------------------------------------------
00138D  3               
00138D  3               .if aflag
00138D  3               wbloc:
00138D  3               	ldy #3
00138D  3               	sta (pbptr),y		; store block number
00138D  3               	dey
00138D  3               	lda dispx
00138D  3               	sta (pbptr),y		; write x position of block.
00138D  3               	dey
00138D  3               	lda dispy
00138D  3               	sta (pbptr),y		; write y position of block.
00138D  3               	dey
00138D  3               	lda scno
00138D  3               	sta (pbptr),y		; write screen.
00138D  3               	clc			; point to next free location
00138D  3               	lda pbptr
00138D  3               	adc #4
00138D  3               	sta pbptr
00138D  3               	bcc :+
00138D  3               	inc pbptr+1
00138D  3               :
00138D  3               	rts
00138D  3               .endif
00138D  3               
00138D  3               ;----------------------------------------------
00138D  3               ; Print character pixels, no more.
00138D  3               ;
00138D  3               ; Input:
00138D  3               ;  A	= character to print
00138D  3               ;----------------------------------------------
00138D  3               
00138D  3               pchr:
00138D  3  20 EC 12     	jsr pchar 		; show character in accumulator.
001390  3  E6 rr        	inc dispx		; move along one.
001392  3  60           	rts
001393  3               
001393  3               ;----------------------------------------------------
001393  3               ; Shifter sprite routine for objects.
001393  3               ;----------------------------------------------------
001393  3               
001393  3               .if oflag
001393  3               sprit7:
001393  3  A5 63        	lda z80_b
001395  3  F0 0F        	beq sprit0
001397  3  85 61        	sta z80_a
001399  3               sprit3:
001399  3  4E 27 14     	lsr spr			; shift into position.
00139C  3  6E 28 14     	ror spr+1
00139F  3  6E 29 14     	ror spr+2
0013A2  3  C6 61        	dec z80_a		; one less iteration.
0013A4  3  D0 F3        	bne sprit3
0013A6  3               sprit0:
0013A6  3  60           	rts 			; now apply to screen.
0013A7  3               
0013A7  3               ;----------------------------------------------------
0013A7  3               ; Draw sprite
0013A7  3               ;----------------------------------------------------
0013A7  3               
0013A7  3               sprite:
0013A7  3  86 rr        	stx xtmp		; Save X-reg
0013A9  3  20 F4 18     	jsr scadd 		; get screen address in scraddr.
0013AC  3               
0013AC  3  A5 rr        	lda dispx 		; x position.
0013AE  3  29 07        	and #7 			; position straddling cells.
0013B0  3  85 63        	sta z80_b		; store in b register.
0013B2  3               
0013B2  3  A5 66        	lda z80_l		; store sprite graphic address.
0013B4  3  8D C7 13     	sta sprit1+1
0013B7  3  8D CE 13     	sta sprit2+1
0013BA  3  A5 67        	lda z80_h
0013BC  3  8D C8 13     	sta sprit1+2
0013BF  3  8D CF 13     	sta sprit2+2
0013C2  3               
0013C2  3  A2 00        	ldx #0			; pixel height.
0013C4  3  A0 00        	ldy #0
0013C6  3               sprit1:
0013C6  3  BD 75 67     	lda objdta,x		; fetch first byte.
0013C9  3  8D 27 14     	sta spr
0013CC  3  E8           	inx
0013CD  3               sprit2:
0013CD  3  BD 75 67     	lda objdta,x
0013D0  3  8D 28 14     	sta spr+1
0013D3  3               
0013D3  3  A9 00        	lda #0
0013D5  3  8D 29 14     	sta spr+2
0013D8  3  20 93 13     	jsr sprit7		; shift sprite
0013DB  3               
0013DB  3  CA           	dex
0013DC  3  AD 27 14     	lda spr			; fetch graphic.
0013DF  3  BC 07 14     	ldy spritetab,x
0013E2  3  51 rr        	eor (scraddr),y		; merge with screen image.
0013E4  3  91 rr        	sta (scraddr),y		; write to screen.
0013E6  3  E8           	inx			; next screen byte.
0013E7  3               
0013E7  3  AD 28 14     	lda spr+1		; fetch graphic.
0013EA  3  BC 07 14     	ldy spritetab,x
0013ED  3  51 rr        	eor (scraddr),y		; merge with screen image.
0013EF  3  91 rr        	sta (scraddr),y		; write to screen.
0013F1  3  C8           	iny
0013F2  3               
0013F2  3  AD 29 14     	lda spr+2		; fetch graphic.
0013F5  3  51 rr        	eor (scraddr),y		; merge with screen image.
0013F7  3  91 rr        	sta (scraddr),y		; write to screen.
0013F9  3               
0013F9  3  E8           	inx			; next source byte.
0013FA  3  E0 10        	cpx #16
0013FC  3  D0 02        	bne :+
0013FE  3  E6 rr        	inc scraddr+1
001400  3               :
001400  3  E0 20        	cpx #32
001402  3  D0 C2        	bne sprit1		; repeat
001404  3               
001404  3  A6 rr        	ldx xtmp		; retreive X-reg
001406  3  60           	rts
001407  3               
001407  3               spritetab:
001407  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
00140B  3  40 41 60 61  
00140F  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001413  3  C0 C1 E0 E1  
001417  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
00141B  3  40 41 60 61  
00141F  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001423  3  C0 C1 E0 E1  
001427  3               
001427  3  00 00 00     spr:	.byte 0,0,0
00142A  3               
00142A  3               ;xtmp:	.byte 0
00142A  3               .endif
00142A  3               
00142A  3               ;-----------------------------------------------------------
00142A  3               ; Get room address.
00142A  3               ;-----------------------------------------------------------
00142A  3               
00142A  3               ;.repeat 305
00142A  3               ;  .byte 0
00142A  3               ;.endrep
00142A  3               
00142A  3               groom:
00142A  3  A6 rr        	ldx scno 		; screen number.
00142C  3  A0 00        	ldy #0
00142E  3               groomx:
00142E  3  A9 04        	lda #<scdat 		; pointer to screens.
001430  3  85 66        	sta z80_l
001432  3  A9 43        	lda #>scdat
001434  3  85 67        	sta z80_h
001436  3               groom1:
001436  3  E0 00        	cpx #0			; is it the first one?
001438  3  F0 15        	beq groom0 		; no more screens to skip.
00143A  3               
00143A  3  18           	clc
00143B  3  A5 66        	lda z80_l
00143D  3  79 04 43     	adc scdat,y 		; low byte of screen size.
001440  3  85 66        	sta z80_l
001442  3  C8           	iny			; point to high byte.
001443  3  A5 67        	lda z80_h
001445  3  79 04 43     	adc scdat,y 		; high byte of screen size.
001448  3  85 67        	sta z80_h
00144A  3  C8           	iny			; next address.
00144B  3               
00144B  3  CA           	dex 			; one less iteration.
00144C  3  4C 36 14     	jmp groom1 		; loop until we reach the end.
00144F  3               groom0:
00144F  3  AD 98 65     	lda numsc 		; add displacement.
001452  3  0A           	asl a
001453  3  18           	clc			; add double displacement to address.
001454  3  65 66        	adc z80_l
001456  3  85 66        	sta z80_l
001458  3  A5 67        	lda z80_h
00145A  3  69 00        	adc #0
00145C  3  85 67        	sta z80_h
00145E  3  60           	rts
00145F  3               
00145F  3               ;-----------------------------------------------------------
00145F  3               ; Draw present room.
00145F  3               ;-----------------------------------------------------------
00145F  3               
00145F  3               droom:
00145F  3  AD FB 09     	lda wintop 		; window top.
001462  3  85 rr        	sta dispy		; set cursor y position.
001464  3               droom2:
001464  3  20 2A 14     	jsr groom 		; get address of current room.
001467  3  A9 00        	lda #0	 		; zero in accumulator.
001469  3  85 rr        	sta comcnt 		; reset compression counter.
00146B  3  AD FD 09     	lda winhgt 		; height of window.
00146E  3  85 rr        	sta rrow		; set row counter
001470  3               droom0:
001470  3  AD FC 09     	lda winlft 		; window left edge.
001473  3  85 rr        	sta dispx 		; set cursor x position.
001475  3  AD FE 09     	lda winwid 		; width of window.
001478  3  85 rr        	sta rcol		; set column counter
00147A  3               droom1:
00147A  3  20 8B 14     	jsr flbyt 		; decompress next byte on the fly.
00147D  3               .if xflag
00147D  3               	jsr drwmeta
00147D  3               .else
00147D  3  20 2B 13     	jsr pattr2 		; show attributes and block.
001480  3               .endif
001480  3  C6 rr        	dec rcol		; one less column.
001482  3  D0 F6        	bne droom1 		; repeat for entire line.
001484  3  E6 rr        	inc dispy		; move down one line.
001486  3               .if xflag
001486  3               	inc dispy
001486  3               .endif
001486  3  C6 rr        	dec rrow 		; one less row.
001488  3  D0 E6        	bne droom0 		; repeat for all rows.
00148A  3  60           	rts
00148B  3               
00148B  3               ;rcol:	.byte 0
00148B  3               ;rrow:	.byte 0
00148B  3               
00148B  3               ;----------------------------------------------
00148B  3               ; Decompress bytes on-the-fly.
00148B  3               ;----------------------------------------------
00148B  3               
00148B  3               flbyt:
00148B  3  A5 rr        	lda comcnt 		; compression counter.
00148D  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
00148F  3               
00148F  3  A0 00        	ldy #0
001491  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
001493  3  E6 66        	inc z80_l 		; point to next cell.
001495  3  D0 02        	bne :+
001497  3  E6 67        	inc z80_h
001499  3               :
001499  3  C9 FF        	cmp #255 		; is this byte a control code?
00149B  3  F0 01        	beq :+
00149D  3  60           	rts 			; no, this byte is uncompressed.
00149E  3               :
00149E  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
0014A0  3  85 rr        	sta combyt 		; set up the type.
0014A2  3  E6 66        	inc z80_l 		; point to quantity.
0014A4  3  D0 02        	bne :+
0014A6  3  E6 67        	inc z80_h
0014A8  3               :
0014A8  3  B1 66        	lda (z80_hl),y 		; get quantity.
0014AA  3  E6 66        	inc z80_l 		; point to next byte.
0014AC  3  D0 02        	bne :+
0014AE  3  E6 67        	inc z80_h
0014B0  3               :
0014B0  3               flbyt1:
0014B0  3  85 rr        	sta comcnt 		; store new quantity.
0014B2  3  C6 rr        	dec comcnt		; one less.
0014B4  3  A5 rr        	lda combyt 		; byte to expand.
0014B6  3  60           	rts
0014B7  3               
0014B7  3               ; ------------------------------------------------------------------------------------------------------------------------------------------
0014B7  3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
0014B7  3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
0014B7  3               ; ------------------------------------------------------------------------------------------------------------------------------------------
0014B7  3               .if xflag
0014B7  3               drwmeta:
0014B7  3               	sta tmpblk
0014B7  3               	jsr pattr2
0014B7  3               
0014B7  3               	inc dispy
0014B7  3               	dec dispx
0014B7  3               	ldx tmpblk
0014B7  3               	beq :+
0014B7  3               	inx
0014B7  3               :
0014B7  3               	txa
0014B7  3               	jsr pattr2
0014B7  3               
0014B7  3               	ldx tmpblk
0014B7  3               	beq :+
0014B7  3               	inx
0014B7  3               	inx
0014B7  3               	inx
0014B7  3               :
0014B7  3               	txa
0014B7  3               	jsr pattr2
0014B7  3               
0014B7  3               	dec dispy
0014B7  3               	dec dispx
0014B7  3               	ldx tmpblk
0014B7  3               	beq :+
0014B7  3               	inx
0014B7  3               	inx
0014B7  3               :
0014B7  3               	txa
0014B7  3               	jsr pattr2
0014B7  3               	rts
0014B7  3               
0014B7  3               tmpblk:	.byte 0
0014B7  3               
0014B7  3               .endif
0014B7  3               
0014B7  3               ;------------------------------------------
0014B7  3               ; Ladder down check.
0014B7  3               ;
0014B7  3               ; Input:
0014B7  3               ;  IX = sprite pointer
0014B7  3               ;------------------------------------------
0014B7  3               
0014B7  3               .if lflag
0014B7  3               laddd:
0014B7  3  A0 09        	ldy #9
0014B9  3  B1 68        	lda (z80_ix),y		; x coordinate.
0014BB  3  85 rr        	sta dispx
0014BD  3               
0014BD  3  A0 08        	ldy #8
0014BF  3  B1 68        	lda (z80_ix),y		; y coordinate.
0014C1  3  29 FE        	and #254		; make it even.
0014C3  3  91 68        	sta (z80_ix),y 		; reset it.
0014C5  3  18           	clc 			; look down 16 pixels.
0014C6  3               numsp5:
0014C6  3  69 10        	adc #SPR_HGT
0014C8  3  85 rr        	sta dispy		; coords in dispx,dispy.
0014CA  3  4C E0 14     	jmp laddv
0014CD  3               
0014CD  3               ;------------------------------------------
0014CD  3               ; Ladder up check.
0014CD  3               ;
0014CD  3               ; Input:
0014CD  3               ;  IX = sprite pointer
0014CD  3               ;
0014CD  3               ; Output:
0014CD  3               ;  A  = 0 is ok, A <>0 is not ok
0014CD  3               ;------------------------------------------
0014CD  3               
0014CD  3               laddu:
0014CD  3  A0 09        	ldy #9
0014CF  3  B1 68        	lda (z80_ix),y		; x coordinate.
0014D1  3  85 rr        	sta dispx
0014D3  3               
0014D3  3  A0 08        	ldy #8
0014D5  3  B1 68        	lda (z80_ix),y		; y coordinate.
0014D7  3  29 FE        	and #254 		; make it even.
0014D9  3  91 68        	sta (z80_ix),y		; reset it.
0014DB  3  18           	clc 			; look 2 pixels above feet.
0014DC  3               numsp6:
0014DC  3  69 0E        	adc #SPR_HGT-2
0014DE  3  85 rr        	sta dispy		; coords in dispx,dispy.
0014E0  3               laddv:
0014E0  3  20 B4 16     	jsr tstbl 		; get map address.
0014E3  3  20 E9 15     	jsr ldchk 		; standard ladder check.
0014E6  3  F0 01        	beq :+
0014E8  3  60           	rts 			; no way through.
0014E9  3               :
0014E9  3  E6 rr        	inc bufaddr 		; look right one cell.
0014EB  3  D0 02        	bne :+
0014ED  3  E6 rr        	inc bufaddr+1
0014EF  3               :
0014EF  3  20 E9 15     	jsr ldchk 		; do the check.
0014F2  3  F0 01        	beq :+
0014F4  3  60           	rts 			; impassable.
0014F5  3               :
0014F5  3  A5 rr        	lda dispx 		; y coordinate.
0014F7  3  29 07        	and #7 			; position straddling block cells.
0014F9  3  D0 01        	bne :+
0014FB  3  60           	rts 			; no more checks needed.
0014FC  3               :
0014FC  3  E6 rr        	inc bufaddr 		; look to third cell.
0014FE  3  D0 02        	bne :+
001500  3  E6 rr        	inc bufaddr+1
001502  3               :
001502  3  20 E9 15     	jsr ldchk 		; do the check.
001505  3  60           	rts  			; return with zero flag set accordingly.
001506  3               .endif
001506  3               
001506  3               ;---------------------------------------------------------
001506  3               ; Can go up check.
001506  3               ;
001506  3               ; Input:
001506  3               ;  IX = sprite pointer
001506  3               ;
001506  3               ; Output:
001506  3               ;  A  = 0 is ok, A <>0 is not ok
001506  3               ;---------------------------------------------------------
001506  3               
001506  3               ;.repeat 305-32
001506  3               ;  .byte 0
001506  3               ;.endrep
001506  3               
001506  3               cangu:
001506  3  A0 09        	ldy #9
001508  3  B1 68        	lda (z80_ix),y		; x coordinate.
00150A  3  85 rr        	sta dispx
00150C  3  A0 08        	ldy #8
00150E  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001510  3  38           	sec
001511  3  E9 02        	sbc #2
001513  3  85 rr        	sta dispy		; coords in dispx,dispy.
001515  3  20 B4 16     	jsr tstbl 		; get map address.
001518  3  20 B8 15     	jsr lrchk 		; standard left/right check.
00151B  3  F0 01        	beq :+
00151D  3  60           	rts			; no way through.
00151E  3               :
00151E  3  E6 rr        	inc bufaddr		; look right one cell.
001520  3  D0 02        	bne :+
001522  3  E6 rr        	inc bufaddr+1
001524  3               :
001524  3  20 B8 15     	jsr lrchk 		; do the check.
001527  3  F0 01        	beq :+
001529  3  60           	rts			; impassable.
00152A  3               :
00152A  3  A5 rr        	lda dispx		; x coordinate.
00152C  3  29 07        	and #7			; position straddling block cells.
00152E  3  D0 01        	bne :+
001530  3  60           	rts			; no more checks needed.
001531  3               :
001531  3  E6 rr        	inc bufaddr		; look to third cell.
001533  3  D0 02        	bne :+
001535  3  E6 rr        	inc bufaddr+1
001537  3               :
001537  3  20 B8 15     	jsr lrchk		; do the check.
00153A  3  60           	rts 			; return with zero flag set accordingly.
00153B  3               
00153B  3               ;---------------------------------------------------------
00153B  3               ; Can go down check.
00153B  3               ;
00153B  3               ; Input:
00153B  3               ;  IX = sprite pointer
00153B  3               ;
00153B  3               ; Output:
00153B  3               ;  A  = 0 is ok, A <>0 is not ok
00153B  3               ;---------------------------------------------------------
00153B  3               
00153B  3               ;.repeat 300
00153B  3               ;  .byte 0
00153B  3               ;.endrep
00153B  3               
00153B  3               cangd:
00153B  3  A0 09        	ldy #9
00153D  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00153F  3  85 rr        	sta dispx
001541  3  A0 08        	ldy #8
001543  3  B1 68        	lda (z80_ix),y		; y coordinate.
001545  3  18           	clc
001546  3               numsp3:
001546  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
001548  3  85 rr        	sta dispy		; coords in dispx,dispy.
00154A  3  20 B4 16     	jsr tstbl 		; get map address.
00154D  3  20 CD 15     	jsr plchk 		; block, platform check.
001550  3  F0 01        	beq :+
001552  3  60           	rts			; no way through.
001553  3               :
001553  3  E6 rr        	inc bufaddr		; look right one cell.
001555  3  D0 02        	bne :+
001557  3  E6 rr        	inc bufaddr+1
001559  3               :
001559  3  20 CD 15     	jsr plchk		; block, platform check.
00155C  3  F0 01        	beq :+
00155E  3  60           	rts			; impassable.
00155F  3               :
00155F  3  A5 rr        	lda dispx		; x coordinate.
001561  3  29 07        	and #7			; position straddling block cells.
001563  3  D0 01        	bne :+
001565  3  60           	rts			; no more checks needed.
001566  3               :
001566  3  E6 rr        	inc bufaddr		; look to third cell.
001568  3  D0 02        	bne :+
00156A  3  E6 rr        	inc bufaddr+1
00156C  3               :
00156C  3  20 CD 15     	jsr plchk		; block, platform check.
00156F  3  60           	rts			; return with zero flag set accordingly.
001570  3               
001570  3               ;---------------------------------------------------------
001570  3               ; Can go left check.
001570  3               ;
001570  3               ; Input:
001570  3               ;  IX = sprite pointer
001570  3               ;
001570  3               ; Output:
001570  3               ;  A  = 0 is ok, A <>0 is not ok
001570  3               ;---------------------------------------------------------
001570  3               ;.repeat 266
001570  3               ;  .byte 0
001570  3               ;.endrep
001570  3               
001570  3               cangl:
001570  3  A0 08        	ldy #8
001572  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001574  3  85 rr        	sta dispy
001576  3  A0 09        	ldy #9
001578  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00157A  3  38           	sec
00157B  3  E9 02        	sbc #2			; look left 2 pixels.
00157D  3  85 rr        	sta dispx		; coords in dispx,dispy.
00157F  3  4C 91 15     	jmp cangh		; test if we can go there.
001582  3               
001582  3               ;---------------------------------------------------------
001582  3               ; Can go right check.
001582  3               ;
001582  3               ; Input:
001582  3               ;  IX = sprite pointer
001582  3               ;
001582  3               ; Output:
001582  3               ;  A  = 0 is ok, A <>0 is not ok
001582  3               ;---------------------------------------------------------
001582  3               
001582  3               ;.repeat 267
001582  3               ;  .byte 0
001582  3               ;.endrep
001582  3               
001582  3               cangr:
001582  3  A0 08        	ldy #8
001584  3  B1 68        	lda (z80_ix),y		; y coordinate.
001586  3  85 rr        	sta dispy
001588  3  A0 09        	ldy #9
00158A  3  B1 68        	lda (z80_ix),y		; x coordinate.
00158C  3  18           	clc
00158D  3  69 10        	adc #16			; look right 16 pixels.
00158F  3  85 rr        	sta dispx		; coords in dispx,dispy.
001591  3               cangh:
001591  3               cangh2:
001591  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
001593  3  85 63        	sta z80_b
001595  3  A5 rr        	lda dispy		; y position.
001597  3  29 07        	and #7			; does x straddle cells?
001599  3  D0 02        	bne cangh0		; yes, loop counter is good.
00159B  3  C6 63        	dec z80_b		; one less row to write.
00159D  3               cangh0:
00159D  3  20 B4 16     	jsr tstbl		; get map address.
0015A0  3               cangh1:
0015A0  3  20 B8 15     	jsr lrchk		; standard left/right check.
0015A3  3  F0 01        	beq :+
0015A5  3  60           	rts			; no way through.
0015A6  3               :
0015A6  3  48           	pha
0015A7  3  18           	clc
0015A8  3  A5 rr        	lda bufaddr
0015AA  3  69 20        	adc #32			; look down.
0015AC  3  85 rr        	sta bufaddr
0015AE  3  90 02        	bcc :+
0015B0  3  E6 rr        	inc bufaddr+1
0015B2  3               :
0015B2  3  68           	pla
0015B3  3               
0015B3  3  C6 63        	dec z80_b
0015B5  3  D0 E9        	bne cangh1
0015B7  3  60           	rts
0015B8  3               
0015B8  3               ;-------------------------------------
0015B8  3               ; Check left/right movement is okay.
0015B8  3               ;
0015B8  3               ; Input:
0015B8  3               ;  bufaddr = MAP + x/8 + y/8*32
0015B8  3               ;
0015B8  3               ; Output:
0015B8  3               ;  A  = 0 is ok, A <>0 is not ok
0015B8  3               ;-------------------------------------
0015B8  3               
0015B8  3               ;.repeat 274
0015B8  3               ;  .byte 0
0015B8  3               ;.endrep
0015B8  3               
0015B8  3               lrchk:
0015B8  3  A0 00        	ldy #0
0015BA  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
0015BC  3  C9 02        	cmp #WALL 		; is it passable?
0015BE  3  F0 0A        	beq lrchkx		; no.
0015C0  3               
0015C0  3  C9 04        	cmp #FODDER		; fodder has to be dug.
0015C2  3  F0 06        	beq lrchkx		; not passable.
0015C4  3               lrlchkx:
0015C4  3  A9 00        	lda #0
0015C6  3  60           	rts
0015C7  3               
0015C7  3               ;--------------------------------------------------------------
0015C7  3               ; Called by mmenu
0015C7  3               ;--------------------------------------------------------------
0015C7  3               
0015C7  3               always:
0015C7  3  A9 FF        	lda #255		; report it as okay.
0015C9  3  60           	rts
0015CA  3               
0015CA  3               lrchkx:
0015CA  3  A9 01        	lda #1 			; reset all bits.
0015CC  3  60           	rts
0015CD  3               
0015CD  3               
0015CD  3               ;--------------------------------------------------------------
0015CD  3               ; Check platform or solid item is not in way.
0015CD  3               ;
0015CD  3               ; Input:
0015CD  3               ;  bufaddr = MAP + x/8 + y/8*32
0015CD  3               ;
0015CD  3               ; Output:
0015CD  3               ;  A  = 0 is ok, A <>0 is not ok
0015CD  3               ;--------------------------------------------------------------
0015CD  3               
0015CD  3               plchk:
0015CD  3  A0 00        	ldy #0
0015CF  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
0015D1  3  C9 02        	cmp #WALL 		; is it passable?
0015D3  3  F0 F5        	beq lrchkx		; no.
0015D5  3               .if pflag .or dflag
0015D5  3               	cmp #FODDER		; fodder has to be dug.
0015D5  3               	beq lrchkx		; not passable.
0015D5  3               .endif
0015D5  3  C9 01        	cmp #PLATFM		; platform is solid.
0015D7  3  F0 07        	beq plchkx		; not passable.
0015D9  3               .if lflag
0015D9  3  C9 03        	cmp #LADDER		; is it a ladder?
0015DB  3  F0 ED        	beq lrchkx		; on ladder, deny movement.
0015DD  3               .endif
0015DD  3               plchk0:
0015DD  3               .if crflag
0015DD  3               	cmp #9
0015DD  3               	bcc :+
0015DD  3               	jmp lrchkx
0015DD  3               :
0015DD  3               .endif
0015DD  3  A9 00        	lda #0			; report as ok
0015DF  3  60           	rts
0015E0  3               plchkx:
0015E0  3  A5 rr        	lda dispy		; x coordinate.
0015E2  3  29 07        	and #7			; position straddling blocks.
0015E4  3  F0 E4        	beq lrchkx		; on platform, deny movement.
0015E6  3  4C DD 15     	jmp plchk0
0015E9  3               
0015E9  3               ;--------------------------------------------------------------
0015E9  3               ; Check ladder is available.
0015E9  3               ;
0015E9  3               ; Input:
0015E9  3               ;  bufaddr = MAP + x/8 + y/8*32
0015E9  3               ;
0015E9  3               ; Output:
0015E9  3               ;  A  = 0 is ok, A <>0 is not ok
0015E9  3               ;--------------------------------------------------------------
0015E9  3               
0015E9  3               .if lflag
0015E9  3               ldchk:
0015E9  3  A0 00        	ldy #0
0015EB  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
0015ED  3  85 F0        	sta $f0
0015EF  3  C9 03        	cmp #LADDER 		; is it a ladder?
0015F1  3  F0 03        	beq :+
0015F3  3  A9 01        	lda #1
0015F5  3  60           	rts  			; return with zero flag set accordingly.
0015F6  3               :
0015F6  3  A9 00        	lda #0
0015F8  3  60           	rts
0015F9  3               .endif
0015F9  3               
0015F9  3               ;--------------------------------------------------------------
0015F9  3               ; Get collectables.
0015F9  3               ;--------------------------------------------------------------
0015F9  3               
0015F9  3               .if cflag
0015F9  3               getcol:
0015F9  3                       lda #COLECT             ; collectable blocks.
0015F9  3                       sta z80_b
0015F9  3                       jsr tded                ; test for collectable blocks.
0015F9  3                       cmp z80_b               ; did we find one?
0015F9  3                       beq :+
0015F9  3                       rts                     ; none were found, job done.
0015F9  3               :
0015F9  3                       jsr gtblk               ; get block.
0015F9  3                       jsr evnt20              ; collected block event.
0015F9  3                       jmp getcol              ; repeat until none left.
0015F9  3               
0015F9  3               ; Get collectable block.
0015F9  3               
0015F9  3               gtblk:
0015F9  3               	ldy #0
0015F9  3               	lda (bufaddr),y
0015F9  3               	sta z80_a
0015F9  3                       lda #0
0015F9  3                       sta (bufaddr),y		; make it empty now.
0015F9  3               
0015F9  3               	lda bufaddr		; set dispx
0015F9  3               	and #31
0015F9  3               	sta dispx
0015F9  3               
0015F9  3               	lda bufaddr+1		; Set dispy
0015F9  3               	sec
0015F9  3               	sbc #>MAP
0015F9  3               	sta bufaddr+1
0015F9  3               	asl bufaddr
0015F9  3               	rol bufaddr+1
0015F9  3               	asl bufaddr
0015F9  3               	rol bufaddr+1
0015F9  3               	asl bufaddr
0015F9  3               	rol bufaddr+1
0015F9  3               	lda bufaddr+1
0015F9  3               	sta dispy
0015F9  3               
0015F9  3               	lda colpatt		; get blocknr
0015F9  3               	sta z80_e		; displacement in e.
0015F9  3               	lda #0
0015F9  3               	sta z80_d		; no high byte.
0015F9  3               	asl z80_e  		; multiply char by 8.
0015F9  3               	rol z80_d
0015F9  3               	asl z80_e
0015F9  3               	rol z80_d
0015F9  3               	asl z80_e
0015F9  3               	rol z80_d
0015F9  3               	clc
0015F9  3               	lda z80_e
0015F9  3               	adc #<chgfx 		; address of graphics.
0015F9  3               	sta tileaddr
0015F9  3               	lda z80_d
0015F9  3               	adc #>chgfx
0015F9  3               	sta tileaddr+1
0015F9  3               	jsr gprad 		; get screen address.
0015F9  3               	ldx #7			; number of pixel rows to write.
0015F9  3               gtblk0:
0015F9  3               	ldy #0
0015F9  3               	lda (tileaddr),y 	; get image byte.
0015F9  3               	ldy scrtab,x
0015F9  3               	eor (scraddr),y 	; XOR tile on screen
0015F9  3               	sta (scraddr),y 	; copy to screen.
0015F9  3               	inc tileaddr 		; next image byte.
0015F9  3               	bne :+
0015F9  3               	inc tileaddr+1
0015F9  3               :
0015F9  3               	dex	 		; repeat for 8 pixel rows.
0015F9  3               	bpl gtblk0
0015F9  3               	rts
0015F9  3               .endif
0015F9  3               
0015F9  3               ;--------------------------------------------------------------
0015F9  3               ; Touched deadly block check.
0015F9  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0015F9  3               ;
0015F9  3               ; Input:
0015F9  3               ;  IX = sprite address
0015F9  3               ;
0015F9  3               ; Output:
0015F9  3               ;  A  = 0 is ok, A=5 is not ok
0015F9  3               ;--------------------------------------------------------------
0015F9  3               
0015F9  3               tded:
0015F9  3  A0 08        	ldy #8
0015FB  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0015FD  3  85 rr        	sta dispy
0015FF  3  C8           	iny
001600  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001602  3  85 rr        	sta dispx		; coords in dispx,dispy.
001604  3  20 B4 16     	jsr tstbl		; get map address.
001607  3  48           	pha
001608  3  A9 1F        	lda #31			; default distance to next line down.
00160A  3  85 64        	sta z80_e
00160C  3  68           	pla
00160D  3  C5 63        	cmp z80_b		; is this the required block?
00160F  3  D0 01        	bne :+
001611  3  60           	rts			; yes.
001612  3               :
001612  3  E6 rr        	inc bufaddr 		; next cell.
001614  3  D0 02        	bne :+
001616  3  E6 rr        	inc bufaddr+1
001618  3               :
001618  3  A0 00        	ldy #0
00161A  3  B1 rr        	lda (bufaddr),y		; fetch type.
00161C  3  C5 63        	cmp z80_b 		; is this deadly/custom?
00161E  3  D0 01        	bne :+
001620  3  60           	rts			; yes.
001621  3               :
001621  3  A5 rr        	lda dispx		; horizontal position.
001623  3  85 62        	sta z80_c 		; store column in c register.
001625  3  29 07        	and #7			; is it straddling cells?
001627  3  D0 03        	bne :+
001629  3  4C 3D 16     	jmp tded0		; no.
00162C  3               :
00162C  3  E6 rr        	inc bufaddr 		; last cell.
00162E  3  D0 02        	bne :+
001630  3  E6 rr        	inc bufaddr+1
001632  3               :
001632  3  A0 00        	ldy #0
001634  3  B1 rr        	lda (bufaddr),y 	; fetch type.
001636  3  C5 63        	cmp z80_b		; is this the block?
001638  3  D0 01        	bne :+
00163A  3  60           	rts			; yes.
00163B  3               :
00163B  3  C6 64        	dec z80_e		; one less cell to next row down.
00163D  3               tded0:
00163D  3  18           	clc 			; point to next row.
00163E  3  A5 rr        	lda bufaddr
001640  3  65 64        	adc z80_e
001642  3  85 rr        	sta bufaddr
001644  3  90 02        	bcc :+
001646  3  E6 rr        	inc bufaddr+1
001648  3               :
001648  3  A0 00        	ldy #0
00164A  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
00164C  3  C5 63        	cmp z80_b		; is this fatal?
00164E  3  D0 01        	bne :+
001650  3  60           	rts			; yes.
001651  3               :
001651  3  E6 rr        	inc bufaddr 		; next cell.
001653  3  D0 02        	bne :+
001655  3  E6 rr        	inc bufaddr+1
001657  3               :
001657  3  A0 00        	ldy #0
001659  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00165B  3  C5 63        	cmp z80_b		; is this fatal?
00165D  3  D0 01        	bne :+
00165F  3  60           	rts			; yes.
001660  3               :
001660  3  A5 62        	lda z80_c		; horizontal position.
001662  3  29 07        	and #7			; is it straddling cells?
001664  3  D0 03        	bne :+
001666  3  4C 78 16     	jmp tded1 		; no.
001669  3               :
001669  3  E6 rr        	inc bufaddr		; last cell.
00166B  3  D0 02        	bne :+
00166D  3  E6 rr        	inc bufaddr+1
00166F  3               :
00166F  3  A0 00        	ldy #0
001671  3  B1 rr        	lda (bufaddr),y		; fetch type.
001673  3  C5 63        	cmp z80_b		; is this fatal?
001675  3  D0 01        	bne :+
001677  3  60           	rts			; yes.
001678  3               :
001678  3               tded1:
001678  3  A5 rr        	lda dispy		; vertical position.
00167A  3  29 07        	and #7 			; is it straddling cells?
00167C  3  D0 01        	bne :+
00167E  3  60           	rts			; no, job done.
00167F  3               :
00167F  3  18           	clc			; point to next row.
001680  3  A5 rr        	lda bufaddr
001682  3  65 64        	adc z80_e
001684  3  85 rr        	sta bufaddr
001686  3  90 02        	bcc :+
001688  3  E6 rr        	inc bufaddr+1
00168A  3               :
00168A  3  A0 00        	ldy #0
00168C  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
00168E  3  C5 63        	cmp z80_b		; is this fatal?
001690  3  D0 01        	bne :+
001692  3  60           	rts			; yes.
001693  3               :
001693  3  E6 rr        	inc bufaddr		; next cell.
001695  3  D0 02        	bne :+
001697  3  E6 rr        	inc bufaddr+1
001699  3               :
001699  3  A0 00        	ldy #0
00169B  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00169D  3  C5 63        	cmp z80_b		; is this fatal?
00169F  3  D0 01        	bne :+
0016A1  3  60           	rts			; yes.
0016A2  3               :
0016A2  3  A5 62        	lda z80_c		; horizontal position.
0016A4  3  29 07        	and #7			; is it straddling cells?
0016A6  3  D0 01        	bne :+
0016A8  3  60           	rts			; no.
0016A9  3               :
0016A9  3  E6 rr        	inc bufaddr		; last cell.
0016AB  3  D0 02        	bne :+
0016AD  3  E6 rr        	inc bufaddr+1
0016AF  3               :
0016AF  3  A0 00        	ldy #0
0016B1  3  B1 rr        	lda (bufaddr),y		; fetch final type.
0016B3  3  60           	rts 			; return with final type in accumulator.
0016B4  3               
0016B4  3               ;---------------------------------------------------
0016B4  3               ; Fetch block type at (dispx, dispy).
0016B4  3               ;
0016B4  3               ; Output:
0016B4  3               ;  A = block type
0016B4  3               ;---------------------------------------------------
0016B4  3               
0016B4  3               tstbl:
0016B4  3  A5 rr        	lda dispy 		; fetch y coord.
0016B6  3  4A           	lsr a			; bufaddr = y/8
0016B7  3  4A           	lsr a
0016B8  3  4A           	lsr a
0016B9  3  85 rr        	sta chary
0016BB  3               
0016BB  3  85 rr        	sta bufaddr
0016BD  3  A9 00        	lda #0
0016BF  3  85 rr        	sta bufaddr+1
0016C1  3               
0016C1  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0016C3  3  26 rr        	rol bufaddr+1
0016C5  3  06 rr        	asl bufaddr
0016C7  3  26 rr        	rol bufaddr+1
0016C9  3  06 rr        	asl bufaddr
0016CB  3  26 rr        	rol bufaddr+1
0016CD  3  06 rr        	asl bufaddr
0016CF  3  26 rr        	rol bufaddr+1
0016D1  3  06 rr        	asl bufaddr
0016D3  3  26 rr        	rol bufaddr+1
0016D5  3               
0016D5  3  A5 rr        	lda dispx		; x/8
0016D7  3  4A           	lsr a
0016D8  3  4A           	lsr a
0016D9  3  4A           	lsr a
0016DA  3  85 rr        	sta charx
0016DC  3               
0016DC  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0016DD  3  65 rr        	adc bufaddr
0016DF  3  69 00        	adc #<MAP
0016E1  3  85 rr        	sta bufaddr
0016E3  3  A5 rr        	lda bufaddr+1
0016E5  3  69 98        	adc #>MAP
0016E7  3  85 rr        	sta bufaddr+1
0016E9  3               
0016E9  3  A0 00        	ldy #0
0016EB  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0016ED  3  60           	rts
0016EE  3               
0016EE  3               
0016EE  3               ;-------------------------------------------------------------------
0016EE  3               ; Jump - if we can.
0016EE  3               ; Requires initial speed to be set up in accumulator prior to call.
0016EE  3               ;
0016EE  3               ; Input:
0016EE  3               ;  IX = sprite address
0016EE  3               ;-------------------------------------------------------------------
0016EE  3               
0016EE  3  49 FF        jump:	eor #$ff	; jump   neg                 ; switch sign so we jump up.
0016F0  3  18           	clc
0016F1  3  69 01        	adc #1
0016F3  3  85 62        	sta z80_c	;        ld c,a              ; store in c register.
0016F5  3  A0 0D        jump0:	ldy #13		; jump0  ld a,(ix+13)        ; jumping flag.
0016F7  3  B1 68        	lda (z80_ix),y
0016F9  3               			;        and a               ; is it set?
0016F9  3  F0 01        	beq :+
0016FB  3  60           	rts		;        ret nz              ; already in the air.
0016FC  3               :
0016FC  3  18           	clc
0016FD  3  69 01        	adc #1		;        inc (ix+13)         ; set it.
0016FF  3  91 68        	sta (z80_ix),y
001701  3  A5 62        	lda z80_c	;        ld (ix+14),c        ; set jump height.
001703  3  C8           	iny
001704  3  91 68        	sta (z80_ix),y
001706  3  60           	rts		;        ret
001707  3               
001707  3  A0 0D        hop:	ldy #13		; hop    ld a,(ix+13)        ; jumping flag.
001709  3  B1 68        	lda (z80_ix),y
00170B  3               			;        and a               ; is it set?
00170B  3  F0 01        	beq :+
00170D  3  60           	rts		;        ret nz              ; already in the air.
00170E  3  A9 FF        :	lda #255	;        ld (ix+13),255      ; set it.
001710  3  91 68        	sta (z80_ix),y
001712  3  A9 00        	lda #0
001714  3  C8           	iny		;        ld (ix+14),0        ; set jump table displacement.
001715  3  91 68        	sta (z80_ix),y
001717  3  60           	rts		;        ret
001718  3               
001718  3               ;------------------------------------------------
001718  3               ; Random numbers code.
001718  3               ; Pseudo-random number generator, 8-bit.
001718  3               ;
001718  3               ; Output:
001718  3               ;  RND = random number
001718  3               ;------------------------------------------------
001718  3               
001718  3               random:
001718  3  A5 rr        	lda seed
00171A  3  F0 05        	beq doEor
00171C  3  0A           	asl a
00171D  3  F0 04        	beq noEor
00171F  3  90 02        	bcc noEor
001721  3  49 1D        doEor:	eor #$1d
001723  3  85 rr        noEor:	sta seed
001725  3  60           	rts
001726  3               
001726  3  A5 rr        	lda seed		; get last random number.
001728  3  0A           	asl a
001729  3  0A           	asl a
00172A  3  18           	clc
00172B  3  65 rr        	adc seed
00172D  3  18           	clc
00172E  3  69 45        	adc #$45
001730  3  85 rr        	sta seed		; store new seed.
001732  3  85 rr        	sta varrnd		; return number in variable.
001734  3  60           	rts
001735  3               
001735  3               ;--------------------------------------------------------
001735  3               ; Keys
001735  3               ;
001735  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
001735  3               ;             ||||||||
001735  3               ;             |||||||+> Right    KEY 0  - X
001735  3               ;             ||||||+-> Left     KEY 1  - Z
001735  3               ;             |||||+--> Down     KEY 2  - .
001735  3               ;             ||||+---> Up       KEY 3  - ;
001735  3               ;             |||+----> Fire1    KEY 4  - SPC
001735  3               ;             ||+-----> Fire2    KEY 5  - Q
001735  3               ;             |+------> Fire3    KEY 6  - P
001735  3               ;             +-------> Not used
001735  3               ;
001735  3               ;                       Option1  KEY 7  - 1
001735  3               ;                       Option2  KEY 8  - 2
001735  3               ;                       Option3  KEY 9  - 3
001735  3               ;                       Option4  KEY 10 - 4
001735  3               ;--------------------------------------------------------
001735  3               
001735  3               ;              X   Z   .   ;  SPC  Q   P
001735  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
001735  3               ;        .byte $21,$11,$01,$92                   ; menu options.
001735  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
001739  3  00 04 14     
00173C  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
001740  3               
001740  3               ;--------------------------------------------------------
001740  3               ; Keyboard test routine.
001740  3               ;
001740  3               ; Input:
001740  3               ;  A = key to read, high nibble=row and low nibble=col
001740  3               ;
001740  3               ; Output:
001740  3               ;  carry clr = key pressed
001740  3               ;  carry set = key not pressed
001740  3               ;--------------------------------------------------------
001740  3               
001740  3               ktest:
001740  3  85 61        	sta z80_a		; save key
001742  3               
001742  3  4A           	lsr a			; set row
001743  3  4A           	lsr a
001744  3  4A           	lsr a
001745  3  4A           	lsr a
001746  3  09 F0        	ora #ScrMode		; don't flip screenmode
001748  3  8D 00 B0     	sta KeyRowAddr
00174B  3               
00174B  3  A5 61        	lda z80_a
00174D  3  29 0F        	and #$0f
00174F  3  AA           	tax
001750  3  AD 01 B0     	lda KeyColAddr		; read column
001753  3               
001753  3  3D 5C 17     	and keymask,x		; check key pressed
001756  3  F0 02        	beq pressed
001758  3  38           	sec			; key not pressed
001759  3  60           	rts
00175A  3               pressed:
00175A  3  18           	clc			; key pressed
00175B  3  60           	rts
00175C  3               
00175C  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
001760  3  10 20        
001762  3               
001762  3               ;-------------------------------------------------------
001762  3               ; Joystick and keyboard reading routines.
001762  3               ;
001762  3               ; contrl = 0, Keyboard
001762  3               ;          1, JoyKeyb
001762  3               ;          2, JoyMMC
001762  3               ;-------------------------------------------------------
001762  3               
001762  3               joykey:
001762  3  A5 rr        	lda contrl 		; control flag.
001764  3  C9 01        	cmp #1
001766  3  D0 03        	bne :+
001768  3  4C 86 17     	jmp joyjoy 		; read keyboard joystick
00176B  3               :
00176B  3  C9 02        	cmp #2
00176D  3  D0 03        	bne :+
00176F  3  4C AF 17     	jmp joysin 		; read MMC joystick.
001772  3               :
001772  3               ; Keyboard controls.
001772  3               
001772  3  A9 00        	lda #0		 	; zero reading.
001774  3  85 64        	sta z80_e
001776  3               
001776  3  A0 06        	ldy #6	 		; address of last key.
001778  3               joyke0:
001778  3  B9 83 6D     	lda keys,y 		; get key from table.
00177B  3  20 40 17     	jsr ktest		; being pressed?
00177E  3  26 64        	rol z80_e 		; rotate into reading.
001780  3               
001780  3  88           	dey		 	; next key.
001781  3  10 F5        	bpl joyke0 		; repeat for all keys.
001783  3  4C 97 17     	jmp joyjo1 		; store the value.
001786  3               
001786  3               ; Keyboard joystick controls.
001786  3               
001786  3               joyjoy:
001786  3  A9 00        	lda #0		 	; zero reading.
001788  3  85 64        	sta z80_e
00178A  3               
00178A  3  A0 06        	ldy #6	 		; address of last key.
00178C  3               joyjo3:
00178C  3  B9 35 17     	lda jkeys,y 		; get key from table.
00178F  3  20 40 17     	jsr ktest		; being pressed?
001792  3  26 64        	rol z80_e 		; rotate into reading.
001794  3               
001794  3  88           	dey		 	; next key.
001795  3  10 F5        	bpl joyjo3 		; repeat for all keys.
001797  3               joyjo1:
001797  3  A5 64        	lda z80_e 		; copy e register to accumulator.
001799  3               joyjo2:
001799  3  85 rr        	sta joyval		; remember value.
00179B  3  60           	rts
00179C  3               
00179C  3               
00179C  3               ; AtoMMC joystick controls.
00179C  3               
00179C  3               ; Set PORTB direction
00179C  3               
00179C  3               joyinit:
00179C  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
00179E  3  8D 01 B4     	sta DatReg
0017A1  3  20 DB 17     	jsr interwritedelay
0017A4  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
0017A6  3  8D 00 B4     	sta CmdReg
0017A9  3               
0017A9  3               wait_until_not_busy:
0017A9  3  AD 00 B4     	lda CmdReg
0017AC  3  30 FB        	bmi wait_until_not_busy
0017AE  3  60           	rts
0017AF  3               
0017AF  3               ; Get PORTB value
0017AF  3               
0017AF  3               joysin:
0017AF  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
0017B1  3  8D 00 B4     	sta CmdReg
0017B4  3  20 DB 17     	jsr interwritedelay
0017B7  3               
0017B7  3  AD 01 B4     	lda DatReg		; Read joystick status
0017BA  3  29 7F        	and #$7f
0017BC  3  85 rr        	sta joyval
0017BE  3               
0017BE  3  AD 88 6D     	lda keys+5		; check fire2
0017C1  3  20 40 17     	jsr ktest
0017C4  3  B0 06        	bcs :+
0017C6  3  A5 rr        	lda joyval
0017C8  3  29 DF        	and #$df
0017CA  3  85 rr        	sta joyval
0017CC  3               :
0017CC  3  AD 89 6D     	lda keys+6		; check fire3
0017CF  3  20 40 17     	jsr ktest
0017D2  3  B0 06        	bcs :+
0017D4  3  A5 rr        	lda joyval
0017D6  3  29 BF        	and #$bf
0017D8  3  85 rr        	sta joyval
0017DA  3               :
0017DA  3  60           	rts
0017DB  3               
0017DB  3               ; Short delay
0017DB  3               ; Enough to intersperse 2 writes to the FATPIC.
0017DB  3               
0017DB  3               interwritedelay:
0017DB  3  A9 08        	lda  #8
0017DD  3  38           	sec
0017DE  3               loop:
0017DE  3  E9 01        	sbc  #1
0017E0  3  D0 FC        	bne  loop
0017E2  3  60           	rts
0017E3  3               
0017E3  3               ;tmp_byte:   .byte 0
0017E3  3               
0017E3  3               ;---------------------------------------------------------------
0017E3  3               ; Getkey in column,row format
0017E3  3               ;
0017E3  3               ; Output:
0017E3  3               ;  A = high nibble=row and low nibble=column key in matrix
0017E3  3               ;---------------------------------------------------------------
0017E3  3               
0017E3  3               kget:
0017E3  3  A9 F0        	lda #ScrMode		; high-mono mode.
0017E5  3  8D 00 B0     	sta ScrSelAddr		; screen select port
0017E8  3  86 rr        	stx xtmp
0017EA  3               kget4:
0017EA  3  20 71 FE     	jsr READKEY		; read key until pressed
0017ED  3  C0 FF        	cpy #255
0017EF  3  F0 F9        	beq kget4
0017F1  3  85 rr        	sta rcol		; save column
0017F3  3  86 rr        	stx rrow		; determine row
0017F5  3               kget3:
0017F5  3  20 71 FE     	jsr READKEY		; wait until key released
0017F8  3  C0 FF        	cpy #255
0017FA  3  D0 F9        	bne kget3
0017FC  3               
0017FC  3  38           	sec			; calculate matrix row
0017FD  3  A9 0A        	lda #10
0017FF  3  E5 rr        	sbc rrow
001801  3  0A           	asl a
001802  3  0A           	asl a
001803  3  0A           	asl a
001804  3  0A           	asl a
001805  3  85 rr        	sta rrow
001807  3               
001807  3  A0 FF        	ldy #255		; find column mask
001809  3               kget1:
001809  3  C8           	iny
00180A  3  B9 5C 17     	lda keymask,y
00180D  3  C5 rr        	cmp rcol
00180F  3  F0 03        	beq kget2
001811  3  4C 09 18     	jmp kget1
001814  3               kget2:
001814  3  98           	tya			; determine column
001815  3  18           	clc
001816  3  65 rr        	adc rrow
001818  3  A6 rr        	ldx xtmp
00181A  3  60           	rts
00181B  3               
00181B  3               ;---------------------------------------------------------------
00181B  3               ; Display message.
00181B  3               ;
00181B  3               ; Input:
00181B  3               ;  A = message number
00181B  3               ;---------------------------------------------------------------
00181B  3               
00181B  3               dmsg:
00181B  3  AA           	tax
00181C  3  A9 4E        	lda #<msgdat		; pointer to messages.
00181E  3  85 66        	sta z80_l
001820  3  A9 28        	lda #>msgdat
001822  3  85 67        	sta z80_h
001824  3  20 B6 09     	jsr getwrd		; get message number.
001827  3               dmsg3:
001827  3  20 8E 18     	jsr preprt		; pre-printing stuff.
00182A  3  20 80 11     	jsr checkx		; make sure we"re in a printable range.
00182D  3               .if bigflag
00182D  3               	lda prtmod		; print mode.
00182D  3               	bne bmsg1		; no, double-height text.
00182D  3               .endif
00182D  3               dmsg0:
00182D  3  A5 67        	lda z80_h		; store string pointer.
00182F  3  48           	pha
001830  3  A5 66        	lda z80_l
001832  3  48           	pha
001833  3               
001833  3  A0 00        	ldy #0
001835  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
001837  3  29 7F        	and #127		; remove any end marker.
001839  3  C9 0D        	cmp #13
00183B  3  F0 24        	beq dmsg1
00183D  3  20 EC 12     	jsr pchar		; display character.
001840  3  20 CF 09     	jsr nexpos 		; display position.
001843  3  D0 03        	bne dmsg2		; not on a new line.
001845  3  20 D4 09     	jsr nexlin		; next line down.
001848  3               dmsg2:
001848  3  68           	pla			; retrieve string pointer
001849  3  85 66        	sta z80_l
00184B  3  68           	pla
00184C  3  85 67        	sta z80_h
00184E  3               
00184E  3  A0 00        	ldy #0
001850  3  B1 66        	lda (z80_hl),y		; fetch last character.
001852  3  0A           	asl a  			; was it the end?
001853  3  90 03        	bcc :+
001855  3  4C C0 11     	jmp dscor2		; yes, job done.
001858  3               :
001858  3  E6 66        	inc z80_l		; next character to display.
00185A  3  D0 02        	bne :+
00185C  3  E6 67        	inc z80_h
00185E  3               :
00185E  3  4C 2D 18     	jmp dmsg0
001861  3               dmsg1:
001861  3  E6 rr        	inc dispy
001863  3  A5 rr        	lda dispy
001865  3  C9 18        	cmp #24
001867  3  90 04        	bcc dmsg4
001869  3  A9 00        	lda #0
00186B  3  85 rr        	sta dispy
00186D  3               dmsg4:
00186D  3  A9 00        	lda #0
00186F  3  85 rr        	sta dispx
001871  3  4C 48 18     	jmp dmsg2
001874  3               
001874  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
001874  3               
001874  3               ;----------------------------------------------------------
001874  3               ; Display message in big text.
001874  3               ;
001874  3               ; Input:
001874  3               ;  HL = string pointer
001874  3               ;----------------------------------------------------------
001874  3               
001874  3               .if bigflag
001874  3               bmsg1:
001874  3               	ldy #0
001874  3               	lda (z80_hl),y 		; get character to display.
001874  3               	and #127		; only want 7 bits.
001874  3               	cmp #13
001874  3               	beq bmsg2
001874  3               	jsr bchar 		; display big char.
001874  3               bmsg3:
001874  3               	ldy #0
001874  3               	lda (z80_hl),y 		; look at last character.
001874  3               	pha
001874  3               	inc z80_l 		; next character in list.
001874  3               	bne :+
001874  3               	inc z80_h
001874  3               :
001874  3               	pla
001874  3               	asl a  			; was terminator flag set?
001874  3               	bcc bmsg1		; no, keep going.
001874  3               	rts
001874  3               bmsg2:
001874  3               	lda #0
001874  3               	sta dispx
001874  3               	inc dispy
001874  3               	inc dispy
001874  3               	lda dispy
001874  3               	cmp #23
001874  3               	bcc bmsg3
001874  3               	lda #0
001874  3               	sta dispy
001874  3               	jmp bmsg3
001874  3               .endif
001874  3               
001874  3               ;----------------------------------------------------------
001874  3               ; Big character display.
001874  3               ;
001874  3               ; Input:
001874  3               ;  A = character
001874  3               ;----------------------------------------------------------
001874  3               
001874  3               .if bigflag
001874  3               bchar:
001874  3               	sta z80_e		; save char in lb
001874  3               	lda #0
001874  3               	sta z80_d		; reset hb
001874  3               
001874  3               	asl z80_e 		; multiply char by 8.
001874  3               	rol z80_d
001874  3               	asl z80_e
001874  3               	rol z80_d
001874  3               	asl z80_e
001874  3               	rol z80_d		; de = a*8
001874  3               
001874  3               	clc			; de = Fontpointer + a*8
001874  3               	lda z80_e
001874  3               	adc #<(FONT-256) 		; address of font.
001874  3               	sta z80_e
001874  3               	lda z80_d
001874  3               	adc #>(FONT-256)
001874  3               	sta z80_d
001874  3               
001874  3               	jsr gprad 		; get screen address.
001874  3               
001874  3               	ldx #0			; height of character in font.
001874  3               bchar0:
001874  3               	ldy #0
001874  3               	lda (z80_de),y 		; get a bit of the font.
001874  3               
001874  3               .if gflag
001874  3               	and andeor
001874  3               	eor andeor+1
001874  3               .endif
001874  3               .if iflag
001874  3               	eor #$ff
001874  3               .endif
001874  3               
001874  3               	sta (scraddr),y
001874  3               	pha
001874  3               	jsr nline 		; next line down.
001874  3               	pla
001874  3               	sta (scraddr),y
001874  3               	jsr nline 		; next line down.
001874  3               
001874  3               	clc
001874  3               	inc z80_e 		; next line of font.
001874  3               	bne :+
001874  3               	inc z80_d
001874  3               :
001874  3               	inx
001874  3               	cpx #8
001874  3               	bne bchar0
001874  3               
001874  3               	jsr nexpos		; display position.
001874  3               	bne bchar2 		; not on a new line.
001874  3               .endif
001874  3               bchar3:
001874  3  E6 rr        	inc dispy
001876  3  20 D4 09     	jsr nexlin 		; next line check.
001879  3               bchar2:
001879  3  4C C0 11     	jmp dscor2		; tidy up line and column variables.
00187C  3               
00187C  3               ;-------------------------------------------------
00187C  3               ; Display a character.
00187C  3               ;
00187C  3               ; Input:
00187C  3               ;  A = character
00187C  3               ;-------------------------------------------------
00187C  3               
00187C  3               achar:
00187C  3  85 63        	sta z80_b 		; copy to b.
00187E  3  20 8E 18     	jsr preprt 		; get ready to print.
001881  3  A5 63        	lda z80_b		; character in accumulator.
001883  3               .if bigflag
001883  3               	ldx prtmod 		; print mode.
001883  3               	beq :+
001883  3               	jmp bchar 		; no, double-height text.
001883  3               :
001883  3               .endif
001883  3  20 EC 12     	jsr pchar 		; display character.
001886  3  20 CF 09     	jsr nexpos 		; display position.
001889  3  F0 E9        	beq bchar3		; next line down.
00188B  3  4C 79 18     	jmp bchar2 		; tidy up.
00188E  3               
00188E  3               
00188E  3               ;--------------------------------------------------------
00188E  3               ; Pre-print preliminaries.
00188E  3               ;--------------------------------------------------------
00188E  3               
00188E  3               preprt:
00188E  3  A9 6D        	lda #<(FONT-256)		; font pointer.
001890  3  8D 7E 11     	sta grbase		; set up graphics base.
001893  3  A9 69        	lda #>(FONT-256)
001895  3  8D 7F 11     	sta grbase+1
001898  3               prescr:
001898  3  A5 rr        	lda charx 		; display coordinates.
00189A  3  85 rr        	sta dispx		; set up general coordinates.
00189C  3  A5 rr        	lda chary
00189E  3  85 rr        	sta dispy
0018A0  3  60           	rts
0018A1  3               
0018A1  3               
0018A1  3               
0018A1  3               ;-----------------------------------------
0018A1  3               ; Calculate old sprite address
0018A1  3               ;
0018A1  3               ; Input:
0018A1  3               ;  IX = sprite address
0018A1  3               ;
0018A1  3               ; Output:
0018A1  3               ;  B  = right byte mask
0018A1  3               ;  C  = left byte mask
0018A1  3               ;  DE = spriteframe address
0018A1  3               ;  scraddr = screenaddress(dispx,dispy)
0018A1  3               ;-----------------------------------------
0018A1  3               
0018A1  3               gsprad:
0018A1  3  A0 03        	ldy #3
0018A3  3  B1 68        	lda (z80_ix),y		; y coordinate.
0018A5  3  85 rr        	sta dispy
0018A7  3  A0 04        	ldy #4
0018A9  3  B1 68        	lda (z80_ix),y		; x coordinate.
0018AB  3  85 rr        	sta dispx
0018AD  3  A0 01        	ldy #1
0018AF  3  B1 68        	lda (z80_ix),y 		; sprite image.
0018B1  3  20 EC 05     	jsr gfrm 		; fetch start frame for this sprite.
0018B4  3               
0018B4  3  A0 00        	ldy #0
0018B6  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0018B8  3  A0 02        	ldy #2
0018BA  3  18           	clc
0018BB  3  71 68        	adc (z80_ix),y 		; add frame number.
0018BD  3               gspra0:
0018BD  3               .if rflag
0018BD  3               	sta z80_e		; multiply by 32.
0018BD  3               	lda #0
0018BD  3               	sta z80_d
0018BD  3               
0018BD  3               	asl z80_e
0018BD  3               	rol z80_d
0018BD  3               	asl z80_e
0018BD  3               	rol z80_d
0018BD  3               	asl z80_e
0018BD  3               	rol z80_d
0018BD  3               	asl z80_e
0018BD  3               	rol z80_d
0018BD  3               .if bflag
0018BD  3               	lda z80_e		; multiply by 48
0018BD  3               	sta tmp1
0018BD  3               	lda z80_d
0018BD  3               	sta tmp2
0018BD  3               .endif
0018BD  3               	asl z80_e
0018BD  3               	rol z80_d
0018BD  3               .if bflag
0018BD  3               	clc
0018BD  3               	lda z80_e
0018BD  3               	adc tmp1
0018BD  3               	sta z80_e
0018BD  3               	lda z80_d
0018BD  3               	adc tmp2
0018BD  3               	sta z80_d
0018BD  3               .endif
0018BD  3               .else
0018BD  3  4A           	lsr a	  		; multiply by 128.
0018BE  3  85 65        	sta z80_d 		; store in d.
0018C0  3  8D 15 19     	sta tmp1
0018C3  3  A9 00        	lda #0
0018C5  3  6A           	ror a
0018C6  3  85 64        	sta z80_e 		; got low byte.
0018C8  3  8D 16 19     	sta tmp2
0018CB  3               .if bflag
0018CB  3               	lsr tmp1
0018CB  3               	ror tmp2
0018CB  3               	clc
0018CB  3               	lda tmp2
0018CB  3               	adc z80_e
0018CB  3               	sta z80_e
0018CB  3               	lda tmp1
0018CB  3               	adc z80_d
0018CB  3               	sta z80_d
0018CB  3               .endif
0018CB  3               .endif
0018CB  3  18           	clc 			; address of play sprites.
0018CC  3  A5 64        	lda z80_e
0018CE  3  69 6C        	adc #<sprgfx
0018D0  3  85 64        	sta z80_e
0018D2  3  A5 65        	lda z80_d
0018D4  3  69 2F        	adc #>sprgfx
0018D6  3  85 65        	sta z80_d
0018D8  3               
0018D8  3  A5 rr        	lda dispx 		; y coordinate.
0018DA  3  29 06        	and #6 			; position within byte boundary.
0018DC  3  AA           	tax	 		; low byte of table displacement.
0018DD  3               
0018DD  3               .if rflag
0018DD  3               	stx sprshft
0018DD  3               .else
0018DD  3  0A           	asl a	  		; multiply by 32.
0018DE  3  0A           	asl a  			; already a multiple
0018DF  3  0A           	asl a  			; of 2, so just 4
0018E0  3               .if bflag
0018E0  3               	sta tmp1
0018E0  3               	asl a  			; shifts needed.
0018E0  3               	clc
0018E0  3               	adc tmp1
0018E0  3               .else
0018E0  3  0A           	asl a  			; shifts needed.
0018E1  3               .endif
0018E1  3  18           	clc 			; add to sprite address.
0018E2  3  65 64        	adc z80_e
0018E4  3  85 64        	sta z80_e
0018E6  3  90 02        	bcc :+
0018E8  3  E6 65        	inc z80_d
0018EA  3               :
0018EA  3               .endif
0018EA  3  BD 0D 19     	lda spmask,x		 ; pointer to mask table.
0018ED  3  85 62        	sta z80_c 		; left mask.
0018EF  3  BD 0E 19     	lda spmask+1,x
0018F2  3  85 63        	sta z80_b 		; right mask.
0018F4  3               
0018F4  3               ;------------------------------------------------------------------
0018F4  3               ; Drop into screen address routine.
0018F4  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
0018F4  3               ;------------------------------------------------------------------
0018F4  3               
0018F4  3               scadd:
0018F4  3  A6 rr        	ldx dispy
0018F6  3  E0 C0        	cpx #192
0018F8  3  90 02        	bcc :+
0018FA  3  A2 C0        	ldx #192
0018FC  3               :
0018FC  3  A5 rr        	lda dispx
0018FE  3  4A           	lsr a
0018FF  3  4A           	lsr a
001900  3  4A           	lsr a
001901  3  18           	clc
001902  3  7D 00 9B     	adc SCADTB_lb,x
001905  3  85 rr        	sta scraddr
001907  3  BD 00 9C     	lda SCADTB_hb,x
00190A  3  85 rr        	sta scraddr+1
00190C  3  60           	rts
00190D  3               
00190D  3  FF 00        spmask:	.byte $ff,$00
00190F  3  3F C0        	.byte $3f,$c0
001911  3  0F F0        	.byte $0f,$f0
001913  3  03 FC        	.byte $03,$fc
001915  3               
001915  3  00           tmp1:	.byte 0
001916  3  00           tmp2:	.byte 0
001917  3               
001917  3               ;-----------------------------------------------------------------
001917  3               ; These are the sprite routines.
001917  3               ; sspria = single sprite, old (ix).
001917  3               ; ssprib = single sprite, new (ix+5).
001917  3               ; sspric = both sprites, old (ix) and new (ix+5).
001917  3               ;-----------------------------------------------------------------
001917  3               
001917  3               sspria:
001917  3  20 A1 18     	jsr gsprad		; get old sprite address.
00191A  3               sspri2:
00191A  3               .if rflag
00191A  3               	lda z80_e				; 3c
00191A  3               	sta dline_spraddr1+1	; 4c
00191A  3               	sta dline_spraddr2+1	; 4c
00191A  3               	lda z80_d				; 3c
00191A  3               	sta dline_spraddr1+2	; 4c
00191A  3               	sta dline_spraddr2+2	; 4c
00191A  3               
00191A  3               	ldx sprshft
00191A  3               	lda shift_table,x
00191A  3               	sta dline_shift1+1
00191A  3               	sta dline_shift2+1
00191A  3               	lda shift_table+1,x
00191A  3               	sta dline_shift1+2
00191A  3               	sta dline_shift2+2
00191A  3               .else
00191A  3  A5 64        	lda z80_e
00191C  3  8D 8E 19     	sta dline1+1		; Set spritedata address
00191F  3  8D 9D 19     	sta dline2+1
001922  3  A5 65        	lda z80_d
001924  3  8D 8F 19     	sta dline1+2
001927  3  8D 9E 19     	sta dline2+2
00192A  3               .endif
00192A  3  86 rr        	stx xtmp
00192C  3  A2 00        	ldx #0			; vertical lines.
00192E  3               sspri0:
00192E  3  20 8A 19     	jsr dline		; draw a line.
001931  3  E0 10        	cpx #16			; detect block boundery
001933  3  D0 02        	bne :+			; skip if not
001935  3  E6 rr        	inc scraddr+1		; jump to next blockline
001937  3               :
001937  3  E0 20        	cpx #32			; check finished
001939  3               .if bflag
001939  3               	bne :+			; skip if not
001939  3               	inc scraddr+1		; jump to next blockline
001939  3               	inc z80_hlp+1		; jump to next blockline
001939  3               :
001939  3               	cpx #48			; check finished
001939  3               .endif
001939  3  D0 F3        	bne sspri0		; no, repeat
00193B  3  A6 rr        	ldx xtmp
00193D  3  60           	rts
00193E  3               
00193E  3               ;-----------------------------------------------------------------
00193E  3               
00193E  3               ssprib:
00193E  3  20 6A 08     	jsr gspran 		; get new sprite address.
001941  3  4C 1A 19     	jmp sspri2
001944  3               
001944  3               ;-----------------------------------------------------------------
001944  3               
001944  3               sspric:
001944  3               .if rflag
001944  3               	jsr gsprad 		; get old sprite address.
001944  3               
001944  3               	lda z80_e				; 3c
001944  3               	sta ddline_spraddr1+1	; 4c
001944  3               	sta ddline_spraddr2+1	; 4c
001944  3               
001944  3               	lda z80_d				; 3c
001944  3               	sta ddline_spraddr1+2	; 4c
001944  3               	sta ddline_spraddr2+2	; 4c
001944  3               
001944  3               	ldx sprshft
001944  3               	lda shift_table,x
001944  3               	sta ddline_shift1+1
001944  3               	sta ddline_shift2+1
001944  3               	lda shift_table+1,x
001944  3               	sta ddline_shift1+2
001944  3               	sta ddline_shift2+2
001944  3               
001944  3               	jsr exx  		; store addresses.
001944  3               	jsr gspran 		; get new sprite addresses.
001944  3               
001944  3               	lda z80_e				; 3c
001944  3               	sta dline_spraddr1+1	; 4c
001944  3               	sta dline_spraddr2+1	; 4c
001944  3               
001944  3               	lda z80_d				; 3c
001944  3               	sta dline_spraddr1+2	; 4c
001944  3               	sta dline_spraddr2+2	; 4c
001944  3               
001944  3               	ldx sprshft
001944  3               	lda shift_table,x
001944  3               	sta dline_shift1+1
001944  3               	sta dline_shift2+1
001944  3               	lda shift_table+1,x
001944  3               	sta dline_shift1+2
001944  3               	sta dline_shift2+2
001944  3               .else
001944  3  20 A1 18     	jsr gsprad 		; get old sprite address.
001947  3  A5 64        	lda z80_e
001949  3  8D B2 19     	sta ddline1+1		; Set spritedata address
00194C  3  8D C1 19     	sta ddline2+1
00194F  3  A5 65        	lda z80_d
001951  3  8D B3 19     	sta ddline1+2
001954  3  8D C2 19     	sta ddline2+2
001957  3  20 8E 6D     	jsr exx  		; store addresses.
00195A  3               
00195A  3  20 6A 08     	jsr gspran 		; get new sprite addresses.
00195D  3  A5 64        	lda z80_e
00195F  3  8D 8E 19     	sta dline1+1		; Set spritedata address
001962  3  8D 9D 19     	sta dline2+1
001965  3  A5 65        	lda z80_d
001967  3  8D 8F 19     	sta dline1+2
00196A  3  8D 9E 19     	sta dline2+2
00196D  3               .endif
00196D  3  86 rr        	stx xtmp
00196F  3  A2 00        	ldx #0			; vertical lines.
001971  3               lloop:
001971  3  20 8A 19     	jsr dline 		; draw a line.
001974  3  CA           	dex
001975  3  CA           	dex
001976  3  20 AE 19     	jsr ddline 		; delete a line.
001979  3  E0 10        	cpx #16			; detect block boundery
00197B  3  D0 04        	bne :+			; skip if not
00197D  3  E6 rr        	inc scraddr+1		; jump to next blockline
00197F  3  E6 73        	inc z80_hlp+1		; jump to next blockline
001981  3               :
001981  3  E0 20        	cpx #32			; check finished
001983  3               .if bflag
001983  3               	bne :+			; skip if not
001983  3               	inc scraddr+1		; jump to next blockline
001983  3               	inc z80_hlp+1		; jump to next blockline
001983  3               :
001983  3               	cpx #48			; check finished
001983  3               .endif
001983  3  D0 EC        	bne lloop		; no, repeat
001985  3  A6 rr        	ldx xtmp
001987  3  60           	rts
001988  3               
001988  3               
001988  3               ;-----------------------------------------------------------------
001988  3               
001988  3               
001988  3               .if rflag
001988  3               
001988  3               ; Left screen byte
001988  3               
001988  3               dline:
001988  3               dline_spraddr1:
001988  3               	ldy objdta,x		; fetch spriteleft byte
001988  3               dline_shift1:
001988  3               	lda $ffff,y		; get pre-shifted byte
001988  3               	sta z80_a		; save spriteleft byte
001988  3               	and z80_c		; mask left
001988  3               	ldy sprline,x		; point to screenbyteleft
001988  3               	eor (scraddr),y		; merge with spriteleft
001988  3               	sta (scraddr),y		; write screenleft
001988  3               
001988  3               	lda z80_a		; fetch data
001988  3               	and z80_b		; mask unwanted
001988  3               	sta z80_a		; store data
001988  3               
001988  3               ; Middle screen byte
001988  3               
001988  3               	inx			; next spritebyte
001988  3               dline_spraddr2:
001988  3               	ldy objdta,x		; fetch spriteright byte
001988  3               dline_shift2:
001988  3               	lda $ffff,y		; get pre-shifted byte
001988  3               	sta z80_f		; save spriteright byte
001988  3               	and z80_c		; mask away what's not needed.
001988  3               	ora z80_a		; merge with mask
001988  3               	ldy sprline,x
001988  3               	eor (scraddr),y		; merge with screenmiddle
001988  3               	sta (scraddr),y		; write screenmiddle
001988  3               
001988  3               ; Right screen byte
001988  3               
001988  3               	iny			; point to screenright
001988  3               	lda z80_f		; get
001988  3               	and z80_b		; mask right
001988  3               	eor (scraddr),y		; merge with screenright
001988  3               	sta (scraddr),y		; write screenright
001988  3               	inx			; next spritebyte
001988  3               
001988  3               	rts
001988  3               
001988  3               ;-----------------------------------------------------------------
001988  3               
001988  3               ; Left screen byte
001988  3               
001988  3               ddline:
001988  3               ddline_spraddr1:
001988  3               	ldy objdta,x		; point to screenleft
001988  3               ddline_shift1:
001988  3               	lda $ffff,y		; fetch spriteleft byte
001988  3               	sta z80_a		; save spriteright byte
001988  3               	and z80_cp		; mask left
001988  3               	ldy sprline,x		; point to byteleft
001988  3               	eor (z80_hlp),y		; merge with screenleft
001988  3               	sta (z80_hlp),y		; write screenleft
001988  3               
001988  3               	lda z80_a		; fetch data
001988  3               	and z80_bp		; mask unwanted
001988  3               	sta z80_a		; store data
001988  3               
001988  3               ; Middle screen byte
001988  3               
001988  3               	inx			; next spritebyte
001988  3               ddline_spraddr2:
001988  3               	ldy objdta,x
001988  3               ddline_shift2:
001988  3               	lda $ffff,y		; fetch spritemiddle byte
001988  3               	sta z80_f		; save spriteright byte
001988  3               	and z80_cp		; mask away what's not needed.
001988  3               	ora z80_a		; merge with mask
001988  3               	ldy sprline,x
001988  3               	eor (z80_hlp),y		; merge with screenmiddle
001988  3               	sta (z80_hlp),y		; write screenmiddle
001988  3               
001988  3               ; Right screen byte
001988  3               
001988  3               	iny			; point to screenright
001988  3               	lda z80_f		; fetch spriteright byte
001988  3               	and z80_bp		; mask right
001988  3               	eor (z80_hlp),y		; merge with screenright
001988  3               	sta (z80_hlp),y		; write screenright
001988  3               	inx			; next spritebyte
001988  3               
001988  3               	rts
001988  3               
001988  3               sprline:
001988  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
001988  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001988  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
001988  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001988  3               .if bflag
001988  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
001988  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001988  3               .endif
001988  3               
001988  3               .else
001988  3  00 00        ddummy:	.byte 0,0
00198A  3               
00198A  3               dline:
00198A  3  BC D2 19     	ldy sprline,x		; point to screenleft
00198D  3               dline1:
00198D  3  BD 75 67     	lda objdta,x		; fetch spriteleft byte
001990  3  85 61        	sta z80_a		; save spriteright byte
001992  3               .if hflag
001992  3               	sty ytmp
001992  3               	clc
001992  3               	tya
001992  3               	adc scraddr
001992  3               	sta ddummy
001992  3               	lda scraddr+1
001992  3               	adc #0
001992  3               	sta ddummy+1
001992  3               	lda ddummy
001992  3               	and #31
001992  3               	sta dispx
001992  3               	sec
001992  3               	lda ddummy+1
001992  3               	sbc #>ScreenAddr
001992  3               	sta dispy
001992  3               	jsr pradd
001992  3               	ldy #0
001992  3               	lda (bufaddr),y
001992  3               	cmp #HIDDEN
001992  3               	beq sline
001992  3               	ldy ytmp
001992  3               .endif
001992  3  A5 61        	lda z80_a
001994  3  25 62        	and z80_c		; mask left
001996  3  51 rr        	eor (scraddr),y		; merge with screenleft
001998  3  91 rr        	sta (scraddr),y		; write screenleft
00199A  3               sline:
00199A  3               .if hflag
00199A  3               	ldy ytmp
00199A  3               .endif
00199A  3  E8           	inx			; next spritebyte
00199B  3  C8           	iny			; point to screenmiddle
00199C  3               .if hflag
00199C  3               	sty ytmp
00199C  3               	ldy #1
00199C  3               	lda (bufaddr),y
00199C  3               	cmp #HIDDEN
00199C  3               	beq sline2
00199C  3               	ldy ytmp
00199C  3               .endif
00199C  3               dline2:
00199C  3  BD 75 67     	lda objdta,x		; fetch spritemiddle byte
00199F  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0019A1  3  91 rr        	sta (scraddr),y		; write screenmiddle
0019A3  3               sline2:
0019A3  3               .if hflag
0019A3  3               	ldy ytmp
0019A3  3               .endif
0019A3  3  C8           	iny			; point to screenright
0019A4  3               .if hflag
0019A4  3               	sty ytmp
0019A4  3               	ldy #2
0019A4  3               	lda (bufaddr),y
0019A4  3               	cmp #HIDDEN
0019A4  3               	beq sline3
0019A4  3               	ldy ytmp
0019A4  3               .endif
0019A4  3  A5 61        	lda z80_a		; fetch spriteright byte
0019A6  3  25 63        	and z80_b		; mask right
0019A8  3  51 rr        	eor (scraddr),y		; merge with screenright
0019AA  3  91 rr        	sta (scraddr),y		; write screenright
0019AC  3               sline3:
0019AC  3               .if hflag
0019AC  3               	ldy ytmp
0019AC  3               .endif
0019AC  3  E8           	inx			; next spritebyte
0019AD  3               
0019AD  3  60           	rts
0019AE  3               
0019AE  3               ;-----------------------------------------------------------------
0019AE  3               
0019AE  3               ddline:
0019AE  3  BC D2 19     	ldy sprline,x		; point to screenleft
0019B1  3               ddline1:
0019B1  3  BD 75 67     	lda objdta,x		; fetch spriteleft byte
0019B4  3  85 61        	sta z80_a		; save spriteright byte
0019B6  3               .if hflag
0019B6  3               	sty ytmp
0019B6  3               	clc
0019B6  3               	tya
0019B6  3               	adc z80_hlp
0019B6  3               	sta ddummy
0019B6  3               	lda z80_hlp+1
0019B6  3               	adc #0
0019B6  3               	sta ddummy+1
0019B6  3               	lda ddummy
0019B6  3               	and #31
0019B6  3               	sta dispx
0019B6  3               	sec
0019B6  3               	lda ddummy+1
0019B6  3               	sbc #>ScreenAddr
0019B6  3               	sta dispy
0019B6  3               	jsr pradd
0019B6  3               	ldy #0
0019B6  3               	lda (bufaddr),y
0019B6  3               	cmp #HIDDEN
0019B6  3               	beq dsline
0019B6  3               	ldy ytmp
0019B6  3               .endif
0019B6  3  A5 61        	lda z80_a
0019B8  3  25 6E        	and z80_cp		; mask left
0019BA  3  51 72        	eor (z80_hlp),y		; merge with screenleft
0019BC  3  91 72        	sta (z80_hlp),y		; write screenleft
0019BE  3               dsline:
0019BE  3               .if hflag
0019BE  3               	ldy ytmp
0019BE  3               .endif
0019BE  3  E8           	inx			; next spritebyte
0019BF  3  C8           	iny			; point to screenmiddle
0019C0  3               .if hflag
0019C0  3               	sty ytmp
0019C0  3               	ldy #1
0019C0  3               	lda (bufaddr),y
0019C0  3               	cmp #HIDDEN
0019C0  3               	beq dsline2
0019C0  3               	ldy ytmp
0019C0  3               .endif
0019C0  3               ddline2:
0019C0  3  BD 75 67     	lda objdta,x		; fetch spritemiddle byte
0019C3  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
0019C5  3  91 72        	sta (z80_hlp),y		; write screenmiddle
0019C7  3               dsline2:
0019C7  3               .if hflag
0019C7  3               	ldy ytmp
0019C7  3               .endif
0019C7  3  C8           	iny			; point to screenright
0019C8  3               .if hflag
0019C8  3               	sty ytmp
0019C8  3               	ldy #2
0019C8  3               	lda (bufaddr),y
0019C8  3               	cmp #HIDDEN
0019C8  3               	beq dsline3
0019C8  3               	ldy ytmp
0019C8  3               .endif
0019C8  3  A5 61        	lda z80_a		; fetch spriteright byte
0019CA  3  25 6F        	and z80_bp		; mask right
0019CC  3  51 72        	eor (z80_hlp),y		; merge with screenright
0019CE  3  91 72        	sta (z80_hlp),y		; write screenright
0019D0  3               dsline3:
0019D0  3               .if hflag
0019D0  3               	ldy ytmp
0019D0  3               .endif
0019D0  3  E8           	inx			; next spritebyte
0019D1  3               
0019D1  3  60           	rts
0019D2  3               
0019D2  3               sprline:
0019D2  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0019D6  3  40 41 60 61  
0019DA  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0019DE  3  C0 C1 E0 E1  
0019E2  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0019E6  3  40 41 60 61  
0019EA  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0019EE  3  C0 C1 E0 E1  
0019F2  3               .if bflag
0019F2  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0019F2  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0019F2  3               .endif
0019F2  3               .endif
0019F2  3               
0019F2  3               ;-------------------------------------
0019F2  3               ; Clear the play area window.
0019F2  3               ;-------------------------------------
0019F2  3               
0019F2  3               .if clwflag
0019F2  3               clw:
0019F2  3               	lda wintop			; get coordinates of window.
0019F2  3               	sta dispy			; put into dispx for calculation.
0019F2  3               	lda winlft
0019F2  3               	sta dispx
0019F2  3               
0019F2  3               	lda winhgt			; height of window.
0019F2  3               	sta rrow			; copy to b register.
0019F2  3               clw3:
0019F2  3               	lda winwid 			; width of window.
0019F2  3               	sta rcol
0019F2  3               clw2:
0019F2  3               	jsr gprad 			; get print address.
0019F2  3               	lda #0				; zero byte to write.
0019F2  3               	ldx #7				; pixel height of each cell.
0019F2  3               clw1:
0019F2  3               	ldy scrtab,x
0019F2  3               	sta (scraddr),y 			; copy to screen.
0019F2  3               	dex				; next screen row down.
0019F2  3               	bpl clw1
0019F2  3               
0019F2  3               	inc dispx			; next column.
0019F2  3               	dec rcol			; one less to do.
0019F2  3               	bne clw2			; repeat for remaining columns.
0019F2  3               
0019F2  3               	lda winlft			; get left edge.
0019F2  3               	sta dispx 			; reset x.
0019F2  3               	inc dispy 			; next line down.
0019F2  3               
0019F2  3               	dec rrow
0019F2  3               	bne clw3			; repeat down the screen.
0019F2  3               
0019F2  3               	lda wintop			; get coordinates of window.
0019F2  3               	sta chary			; put into display position.
0019F2  3               	lda winlft
0019F2  3               	sta charx
0019F2  3               	rts
0019F2  3               .endif
0019F2  3               
0019F2  3               ;----------------------------------------------------------
0019F2  3               ; Effects code.
0019F2  3               ; Ticker routine is called 25 times per second.
0019F2  3               ;
0019F2  3               ; HL = txtscr = left text screen address
0019F2  3               ; DE = txtscr+txtwid-1 = right text screen address
0019F2  3               ; BC = txtpos = text scroller position
0019F2  3               ;
0019F2  3               ;----------------------------------------------------------
0019F2  3               
0019F2  3               .if sflag
0019F2  3               scrly:
0019F2  3               	rts
0019F2  3               	.word txtscr         	; get left screen address.
0019F2  3               	sta scr_l
0019F2  3               	lda txtscr+1
0019F2  3               	sta scr_l+1
0019F2  3               	sta scr_r+1
0019F2  3               
0019F2  3               	stx xtmp
0019F2  3               
0019F2  3               	clc         		; get right screen address.
0019F2  3               	lda scr_l
0019F2  3               	adc txtwid
0019F2  3               	sta scr_r
0019F2  3               	dec scr_r
0019F2  3               .if gflag
0019F2  3               scrly7:
0019F2  3               	ldx #2
0019F2  3               .endif
0019F2  3               scrly1:
0019F2  3               	ldy txtwid		; set txtwide
0019F2  3               	dey
0019F2  3               	clc
0019F2  3               scrly0:
0019F2  3               	lda (scr_l),y		; scroll 1 line
0019F2  3               	rol a
0019F2  3               	sta (scr_l),y
0019F2  3               	dey
0019F2  3               	bpl scrly0
0019F2  3               .if gflag
0019F2  3               	dex
0019F2  3               	bne scrly1
0019F2  3               .endif
0019F2  3               	clc			; point to next line
0019F2  3               	lda scr_l
0019F2  3               	adc #32
0019F2  3               	sta scr_l
0019F2  3               .if gflag
0019F2  3               	bcc scrly7		; repeat 8 times
0019F2  3               .else
0019F2  3               	bcc scrly1		; repeat 8 times
0019F2  3               .endif
0019F2  3               	lda txtpos 		; get text pointer.
0019F2  3               	sta scr_txt
0019F2  3               	lda txtpos+1
0019F2  3               	sta scr_txt+1
0019F2  3               
0019F2  3               	ldy #0
0019F2  3               	lda (scr_txt),y 	; find character we're displaying.
0019F2  3               	and #127 		; remove end marker bit if applicable.
0019F2  3               	cmp #13			; is it newline?
0019F2  3               	bne scrly5 		; no, it's okay.
0019F2  3               	lda #32			; convert to a space instead.
0019F2  3               scrly5:
0019F2  3               	sta fntaddr		; calculate char address
0019F2  3               	lda #0
0019F2  3               	sta fntaddr+1
0019F2  3               	asl fntaddr  		; multiply char by 8.
0019F2  3               	rol fntaddr+1
0019F2  3               	asl fntaddr
0019F2  3               	rol fntaddr+1
0019F2  3               	asl fntaddr
0019F2  3               	rol fntaddr+1
0019F2  3               	lda fntaddr
0019F2  3               	clc
0019F2  3               	adc #<(FONT-256)
0019F2  3               	sta scrly3+1		; that's the low byte.
0019F2  3               	lda fntaddr+1
0019F2  3               	adc #>(FONT-256)
0019F2  3               	sta scrly3+2		; add displacement.
0019F2  3               	lda fntaddr+2
0019F2  3               
0019F2  3               	ldx #0
0019F2  3               scrly3:
0019F2  3               	lda $3333,x		; get image of char line.
0019F2  3               	and txtbit
0019F2  3               	beq scrly2		; don't plot pixel
0019F2  3               	ldy scrline,x
0019F2  3               	lda (scr_r),y
0019F2  3               	clc
0019F2  3               .if gflag
0019F2  3               	ora #3
0019F2  3               .else
0019F2  3               	ora #1
0019F2  3               .endif
0019F2  3               	sta (scr_r),y		; plot pixel
0019F2  3               scrly2:
0019F2  3               	inx			; next line of char.
0019F2  3               	cpx #8
0019F2  3               	bne scrly3
0019F2  3               
0019F2  3               	lsr txtbit		; bit of text to display.
0019F2  3               .if gflag
0019F2  3               	lsr txtbit		; bit of text to display.
0019F2  3               .endif
0019F2  3               	bcs :+
0019F2  3               	rts
0019F2  3               :
0019F2  3               	ldy #0
0019F2  3               	lda (scr_txt),y 	; what was the character?
0019F2  3               	asl a	  		; end of message?
0019F2  3               	bcs scrly4
0019F2  3               	inc txtpos
0019F2  3               	bne :+
0019F2  3               	inc txtpos+1
0019F2  3               :
0019F2  3               	jmp scrly6 		; not yet - continue.
0019F2  3               scrly4:
0019F2  3               	lda txtini 		; start of scrolling message.
0019F2  3               	sta txtpos
0019F2  3               	lda txtini+1
0019F2  3               	sta txtpos+1
0019F2  3               scrly6:
0019F2  3               	lda #128
0019F2  3               	sta txtbit
0019F2  3               	ldx xtmp
0019F2  3               	rts
0019F2  3               
0019F2  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0019F2  3               
0019F2  3               ;-------------------------------------------------------
0019F2  3               ; Entry TICKER command
0019F2  3               ;
0019F2  3               ; Entry:
0019F2  3               ;  z80_b = message nr
0019F2  3               ;  z80_c = width
0019F2  3               ;-------------------------------------------------------
0019F2  3               
0019F2  3               iscrly:
0019F2  3               	jsr prescr 		; set up display position.
0019F2  3               
0019F2  3               	lda #<msgdat 		; text messages.
0019F2  3               	sta z80_l
0019F2  3               	lda #>msgdat
0019F2  3               	sta z80_h
0019F2  3               
0019F2  3               	lda z80_c 		; width.
0019F2  3               	sec
0019F2  3               	sbc #1			; subtract one.
0019F2  3               	cmp #32 		; is it between 1 and 32?
0019F2  3               	bcc :+
0019F2  3               	lda #$60
0019F2  3               	jmp iscrl0		; no, disable messages.
0019F2  3               :
0019F2  3               	ldx z80_b		; message number.
0019F2  3               	jsr getwrd 		; find message start.
0019F2  3               
0019F2  3               	lda z80_l		; set initial text position.
0019F2  3               	sta txtini
0019F2  3               	lda z80_h
0019F2  3               	sta txtini+1
0019F2  3               
0019F2  3               	lda #$ad		; code for lda adrr
0019F2  3               iscrl0:
0019F2  3               	sta scrly		; enable/disable scrolling routine.
0019F2  3               
0019F2  3               	jsr prescr 		; set up display position.
0019F2  3               	jsr gprad 		; get print address.
0019F2  3               
0019F2  3               	lda scraddr 		; set text screen address.
0019F2  3               	sta txtscr
0019F2  3               	lda scraddr+1
0019F2  3               	sta txtscr+1
0019F2  3               
0019F2  3               	lda z80_c		; width.
0019F2  3               	sta txtwid		; set width in working storage.
0019F2  3               
0019F2  3               	lda #128 		; start with leftmost bit.
0019F2  3               	sta txtbit
0019F2  3               
0019F2  3               	jmp scrly4
0019F2  3               .endif
0019F2  3               
0019F2  3               ;------------------------------------------------------------------
0019F2  3               ; Dig routine, conditional assembly depending on dflag
0019F2  3               ;------------------------------------------------------------------
0019F2  3               .if dflag
0019F2  3               dig:
0019F2  3               	and #3
0019F2  3               	beq digr		; dig right
0019F2  3               	cmp #1
0019F2  3               	beq digl		; dig left
0019F2  3               	cmp #2
0019F2  3               	beq digd		; dig down
0019F2  3               
0019F2  3               ; Dig up.
0019F2  3               
0019F2  3               digu:				; dig up
0019F2  3               	ldy #8
0019F2  3               	lda (z80_ix),y
0019F2  3               	sec
0019F2  3               	sbc #2
0019F2  3               	sta dispy		; set y
0019F2  3               
0019F2  3               	iny
0019F2  3               	lda (z80_ix),y
0019F2  3               	sta dispx		; set x
0019F2  3               	jmp digv
0019F2  3               
0019F2  3               ; Dig down.
0019F2  3               
0019F2  3               digd:
0019F2  3               	ldy #9
0019F2  3               	lda (z80_ix),y
0019F2  3               	sta dispx		; set y
0019F2  3               
0019F2  3               	dey
0019F2  3               	clc
0019F2  3               	lda (z80_ix),y
0019F2  3               	adc #16
0019F2  3               	sta dispy		; set y
0019F2  3               	jmp digv
0019F2  3               
0019F2  3               ; Dig left.
0019F2  3               
0019F2  3               digl:
0019F2  3               	ldy #8
0019F2  3               	lda (z80_ix),y
0019F2  3               	sta dispy		; set y
0019F2  3               
0019F2  3               	iny
0019F2  3               	lda (z80_ix),y
0019F2  3               	sec
0019F2  3               	sbc #2			; x=x-2
0019F2  3               	sta dispx		; set x
0019F2  3               	jmp digh
0019F2  3               
0019F2  3               ; Dig right.
0019F2  3               
0019F2  3               digr:
0019F2  3               	ldy #8
0019F2  3               	lda (z80_ix),y
0019F2  3               	sta dispy		; set y
0019F2  3               
0019F2  3               	iny
0019F2  3               	lda (z80_ix),y
0019F2  3               	clc
0019F2  3               	adc #16
0019F2  3               	sta dispx		; set x+16
0019F2  3               	jmp digh
0019F2  3               
0019F2  3               ; Vertical digging
0019F2  3               
0019F2  3               digv:
0019F2  3               	jsr tstbl		; check blocktype in MAP
0019F2  3               	jsr fdchk		; test if FODDER
0019F2  3               
0019F2  3               	clc
0019F2  3               	lda dispx		; look 1 cell down
0019F2  3               	adc #8
0019F2  3               	sta dispx
0019F2  3               	jsr tstbl		; check blocktype in MAP
0019F2  3               	jsr fdchk
0019F2  3               	lda dispx
0019F2  3               	and #7
0019F2  3               	bne :+
0019F2  3               	rts
0019F2  3               :
0019F2  3               	clc
0019F2  3               	lda dispx		; look 1 cell down
0019F2  3               	adc #8
0019F2  3               	sta dispx
0019F2  3               	jsr tstbl		; check blocktype in MAP
0019F2  3               	jmp fdchk
0019F2  3               
0019F2  3               ; Horizontal digging
0019F2  3               
0019F2  3               digh:
0019F2  3               	jsr tstbl		; check blocktype in MAP
0019F2  3               	jsr fdchk		; test if FODDER
0019F2  3               
0019F2  3               	clc
0019F2  3               	lda dispy		; look 1 cell down
0019F2  3               	adc #8
0019F2  3               	sta dispy
0019F2  3               	jsr tstbl		; check blocktype in MAP
0019F2  3               	jsr fdchk
0019F2  3               	lda dispy
0019F2  3               	and #7
0019F2  3               	bne :+
0019F2  3               	rts
0019F2  3               :
0019F2  3               	clc
0019F2  3               	lda dispy		; look 1 cell down
0019F2  3               	adc #8
0019F2  3               	sta dispy
0019F2  3               	jsr tstbl		; check blocktype in MAP
0019F2  3               	jmp fdchk
0019F2  3               
0019F2  3               digcnt:	.byte 0
0019F2  3               .endif
0019F2  3               
0019F2  3               ;------------------------------------------------------------------
0019F2  3               ; Code added to process Crumbling Blocks
0019F2  3               ;------------------------------------------------------------------
0019F2  3               
0019F2  3               .if crflag
0019F2  3               crumble:
0019F2  3               	lda vard
0019F2  3               	and #3
0019F2  3               	bne crumble3
0019F2  3               
0019F2  3               	ldy #9
0019F2  3               	lda (z80_ix),y
0019F2  3               	sta dispx
0019F2  3               
0019F2  3               	dey
0019F2  3               	clc
0019F2  3               	lda (z80_ix),y
0019F2  3               	adc #16
0019F2  3               	sta dispy
0019F2  3               
0019F2  3               	and #6
0019F2  3               	bne crumble3
0019F2  3               
0019F2  3               	jsr tstbl		; test block left
0019F2  3               	cmp #9
0019F2  3               	bcc crumble1
0019F2  3               	jsr crumble5
0019F2  3               crumble1:
0019F2  3               	clc
0019F2  3               	lda dispx		; look 1 cell down
0019F2  3               	adc #8
0019F2  3               	sta dispx
0019F2  3               	jsr tstbl		; test block left
0019F2  3               	cmp #9
0019F2  3               	bcc crumble2
0019F2  3               	jsr crumble5
0019F2  3               crumble2:
0019F2  3               	lda dispx
0019F2  3               	and #7
0019F2  3               	beq crumble3
0019F2  3               	clc
0019F2  3               	lda dispx		; look 1 cell down
0019F2  3               	adc #8
0019F2  3               	sta dispx
0019F2  3               	jsr tstbl		; test block left
0019F2  3               	cmp #9
0019F2  3               	bcc crumble3
0019F2  3               	jsr crumble5
0019F2  3               crumble3:
0019F2  3               	rts
0019F2  3               
0019F2  3               crumble5:
0019F2  3               	clc
0019F2  3               	adc #1
0019F2  3               	cmp #$11
0019F2  3               	bcc crumble4
0019F2  3               	lda #0
0019F2  3               crumble4:
0019F2  3               	ldy #0
0019F2  3               	sta (bufaddr),y
0019F2  3               	sta tmp
0019F2  3               
0019F2  3               	lda dispx		; x=x/8
0019F2  3               	pha
0019F2  3               	lsr a
0019F2  3               	lsr a
0019F2  3               	lsr a
0019F2  3               	sta dispx
0019F2  3               
0019F2  3               	lda dispy		; y=y/8
0019F2  3               	pha
0019F2  3               	lsr a
0019F2  3               	lsr a
0019F2  3               	lsr a
0019F2  3               	sta dispy
0019F2  3               
0019F2  3               	lda tmp
0019F2  3               	jsr pattr 		; write block.
0019F2  3               
0019F2  3               	pla
0019F2  3               	sta dispy
0019F2  3               	pla
0019F2  3               	sta dispx
0019F2  3               	rts
0019F2  3               .endif
0019F2  3               
0019F2  3               ; User routine.  Put your own code in here to be called with USER instruction.
0019F2  3               ; if USER has an argument it will be passed in the accumulator.
0019F2  3               
0019F2  3               user:
0019F2  3               	.include "user.inc"
0019F2  4  60           	rts
0019F3  4               
0019F3  3               
0019F3  3               ;----------------------------------------------------
0019F3  3               ; Missing vars
0019F3  3               ;----------------------------------------------------
0019F3  3               
0019F3  3               MAP 		= $9800			; properties map buffer (3x256 bytes)
0019F3  3               SCADTB_lb 	= MAP+3*256		; screen address table lo-byte (256 bytes)
0019F3  3               SCADTB_hb 	= SCADTB_lb+256		; screen address table hi-byte (256 bytes)
0019F3  3               SHRAPN 		= SCADTB_hb+256		; shrapnel table (55x6 bytes)
0019F3  3               
0019F3  3               ;Fontpointer:	.byte 0,0
0019F3  3               ;TmpAddr:	.byte 0,0
0019F3  3               
0019F3  3               ;loopa:		.byte 0
0019F3  3               ;loopb:		.byte 0
0019F3  3               ;loopc:		.byte 0
0019F3  3               
0019F3  3               .if gflag
0019F3  3               setfgcol:
0019F3  3               	and #3
0019F3  3               	tay
0019F3  3               	lda codcol,y
0019F3  3               	jmp calfgc
0019F3  3               
0019F3  3               setbgcol:
0019F3  3               	and #3
0019F3  3               calbgc:
0019F3  3               	tay
0019F3  3               	lda codcol,y
0019F3  3               	pha
0019F3  3               	lda andeor
0019F3  3               	eor andeor+1
0019F3  3               	tax
0019F3  3               	pla
0019F3  3               	sta andeor+1
0019F3  3               	txa
0019F3  3               calfgc:
0019F3  3               	eor andeor+1
0019F3  3               	sta andeor
0019F3  3               calex1:
0019F3  3               	rts
0019F3  3               
0019F3  3               codcol:	.byte $00,$55,$aa,$ff
0019F3  3               .else
0019F3  3               setfgcol:
0019F3  3               setbgcol:
0019F3  3  60           	rts
0019F4  3               .endif
0019F4  3  00 00        andeor:	.byte 0,0
0019F6  3               
0019F6  3               .if rflag
0019F6  3               ;----------------------------------------------------
0019F6  3               ; Shift tables
0019F6  3               ;----------------------------------------------------
0019F6  3               
0019F6  3               shift_table:
0019F6  3               .word shift0
0019F6  3               .word shift2
0019F6  3               .word shift4
0019F6  3               .word shift6
0019F6  3               
0019F6  3               ;.align 256
0019F6  3               shift0:
0019F6  3               .repeat 256, i
0019F6  3               	.byte i
0019F6  3               .endrep
0019F6  3               
0019F6  3               shift2:
0019F6  3               .repeat 256, i
0019F6  3               	.byte (i >> 2) | (i << 6) & $c0
0019F6  3               .endrep
0019F6  3               
0019F6  3               shift4:
0019F6  3               .repeat 256, i
0019F6  3               	.byte (i >> 4) | ((i << 4) & $f0)
0019F6  3               .endrep
0019F6  3               
0019F6  3               shift6:
0019F6  3               .repeat 256, i
0019F6  3               	.byte (i >> 6) | ((i << 2) & $fc)
0019F6  3               .endrep
0019F6  3               .endif
0019F6  3               
0019F6  3               ; Everything below here will be generated by the editors.
0019F6  3               
0019F6  3  60                   rts
0019F7  3               WINDOWTOP = 0
0019F7  3               WINDOWLFT = 2
0019F7  3               WINDOWHGT = 20
0019F7  3               WINDOWWID = 28 ;a
0019F7  3               MAPWID = 10
0019F7  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255
0019FB  3  FF FF FF FF  
0019FF  3  FF FF        
001A01  3               mapdat:
001A01  3  FF 1B FF 14          .byte 255,27,255,20,255,23,255,255,255,255,255,255,255,19,21,22,24,25,26,255,255,255,14,13,12,11,10,18,17,255,255,255,255,15,3,0,4,6,8,255,255,255,255,16,2,1,5,7,9,255
001A05  3  FF 17 FF FF  
001A09  3  FF FF FF FF  
001A33  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255
001A37  3  FF FF FF FF  
001A3B  3  FF FF        
001A3D  3  23           stmap:  .byte 35
001A3E  3               
001A3E  3               evnt00:
001A3E  3  20 3B 15             jsr cangd	; CANGODOWN
001A41  3  F0 03                beq :+
001A43  3  4C 49 1A             jmp a00026
001A46  3               :
001A46  3  20 D4 05             jsr tfall	; TABLEFALL
001A49  3  20 80 10     a00026: jsr skobj	; DETECTOBJECT
001A4C  3  85 rr                sta varobj
001A4E  3  A9 FF                lda #255
001A50  3  C5 rr                cmp varobj
001A52  3  D0 03                bne *+5
001A54  3  4C 23 1B             jmp a00490
001A57  3  A5 rr                lda varobj	; GET
001A59  3  20 FF 0F             jsr getob
001A5C  3  A9 32                lda #50		; BEEP
001A5E  3  0A                   asl a
001A5F  3  8D 01 0A             sta sndtyp
001A62  3  A9 01                lda #1
001A64  3  C5 rr                cmp scno
001A66  3  F0 03                beq *+5
001A68  3  4C 7F 1A             jmp a00143
001A6B  3  A5 rr                lda vark
001A6D  3  18                   clc
001A6E  3  69 01                adc #1
001A70  3  85 rr                sta vark
001A72  3  A9 14                lda #20		; AT
001A74  3  85 rr                sta chary
001A76  3  A9 1D                lda #29
001A78  3  85 rr                sta charx
001A7A  3  A5 rr                lda vark	; DISPLAY
001A7C  3  20 E5 07             jsr disply
001A7F  3  A9 10        a00143: lda #16
001A81  3  C5 rr                cmp scno
001A83  3  F0 03                beq *+5
001A85  3  4C 9C 1A             jmp a00206
001A88  3  A5 rr                lda vark
001A8A  3  18                   clc
001A8B  3  69 01                adc #1
001A8D  3  85 rr                sta vark
001A8F  3  A9 14                lda #20		; AT
001A91  3  85 rr                sta chary
001A93  3  A9 1D                lda #29
001A95  3  85 rr                sta charx
001A97  3  A5 rr                lda vark	; DISPLAY
001A99  3  20 E5 07             jsr disply
001A9C  3  A9 07        a00206: lda #7
001A9E  3  C5 rr                cmp scno
001AA0  3  F0 03                beq *+5
001AA2  3  4C C5 1A             jmp a00291
001AA5  3  A9 03                lda #3		; GOT
001AA7  3  20 2E 10             jsr gotob
001AAA  3  C9 FF                cmp #255
001AAC  3  F0 03                beq :+
001AAE  3  4C C5 1A             jmp a00291
001AB1  3               :
001AB1  3  A5 rr                lda vark
001AB3  3  18                   clc
001AB4  3  69 01                adc #1
001AB6  3  85 rr                sta vark
001AB8  3  A9 14                lda #20		; AT
001ABA  3  85 rr                sta chary
001ABC  3  A9 1D                lda #29
001ABE  3  85 rr                sta charx
001AC0  3  A5 rr                lda vark	; DISPLAY
001AC2  3  20 E5 07             jsr disply
001AC5  3  A9 0D        a00291: lda #13
001AC7  3  C5 rr                cmp scno
001AC9  3  F0 03                beq *+5
001ACB  3  4C E1 1A             jmp a00346
001ACE  3  A9 09                lda #9		; GOT
001AD0  3  20 2E 10             jsr gotob
001AD3  3  C9 FF                cmp #255
001AD5  3  F0 03                beq :+
001AD7  3  4C E1 1A             jmp a00346
001ADA  3               :
001ADA  3  A5 rr                lda varc
001ADC  3  18                   clc
001ADD  3  69 01                adc #1
001ADF  3  85 rr                sta varc
001AE1  3  A9 11        a00346: lda #17
001AE3  3  C5 rr                cmp scno
001AE5  3  F0 03                beq *+5
001AE7  3  4C 02 1B             jmp a00418
001AEA  3  A5 rr                lda numlif
001AEC  3  18                   clc
001AED  3  69 01                adc #1
001AEF  3  85 rr                sta numlif
001AF1  3  A9 15                lda #21		; AT
001AF3  3  85 rr                sta chary
001AF5  3  A9 1D                lda #29
001AF7  3  85 rr                sta charx
001AF9  3  A5 rr                lda numlif	; DISPLAY
001AFB  3  20 E5 07             jsr disply
001AFE  3  A9 01                lda #1
001B00  3  85 rr                sta varh
001B02  3  A9 13        a00418: lda #19
001B04  3  C5 rr                cmp scno
001B06  3  F0 03                beq *+5
001B08  3  4C 23 1B             jmp a00490
001B0B  3  A5 rr                lda numlif
001B0D  3  18                   clc
001B0E  3  69 01                adc #1
001B10  3  85 rr                sta numlif
001B12  3  A9 15                lda #21		; AT
001B14  3  85 rr                sta chary
001B16  3  A9 1D                lda #29
001B18  3  85 rr                sta charx
001B1A  3  A5 rr                lda numlif	; DISPLAY
001B1C  3  20 E5 07             jsr disply
001B1F  3  A9 01                lda #1
001B21  3  85 rr                sta vari
001B23  3  A9 DF        a00490: lda #223
001B25  3  A0 09                ldy #9
001B27  3  D1 68                cmp (z80_ix),y
001B29  3  90 03                bcc *+5
001B2B  3  4C 43 1B             jmp a00561
001B2E  3  20 43 08             jsr scrr	; SCREENRIGHT
001B31  3  A9 20                lda #32
001B33  3  A0 09                ldy #9
001B35  3  91 68                sta (z80_ix),y
001B37  3  A0 08                ldy #8
001B39  3  B1 68                lda (z80_ix),y
001B3B  3  85 rr                sta varo
001B3D  3  A0 09                ldy #9
001B3F  3  B1 68                lda (z80_ix),y
001B41  3  85 rr                sta varp
001B43  3  A9 10        a00561: lda #16
001B45  3  A0 09                ldy #9
001B47  3  D1 68                cmp (z80_ix),y
001B49  3  B0 03                bcs *+5
001B4B  3  4C 63 1B             jmp a00632
001B4E  3  20 28 08             jsr scrl	; SCREENLEFT
001B51  3  A9 D0                lda #208
001B53  3  A0 09                ldy #9
001B55  3  91 68                sta (z80_ix),y
001B57  3  A0 08                ldy #8
001B59  3  B1 68                lda (z80_ix),y
001B5B  3  85 rr                sta varo
001B5D  3  A0 09                ldy #9
001B5F  3  B1 68                lda (z80_ix),y
001B61  3  85 rr                sta varp
001B63  3  A9 02        a00632: lda #2
001B65  3  A0 08                ldy #8
001B67  3  D1 68                cmp (z80_ix),y
001B69  3  B0 03                bcs *+5
001B6B  3  4C 83 1B             jmp a00702
001B6E  3  20 4C 08             jsr scru	; SCREENUP
001B71  3  A9 8C                lda #140
001B73  3  A0 08                ldy #8
001B75  3  91 68                sta (z80_ix),y
001B77  3  A0 08                ldy #8
001B79  3  B1 68                lda (z80_ix),y
001B7B  3  85 rr                sta varo
001B7D  3  A0 09                ldy #9
001B7F  3  B1 68                lda (z80_ix),y
001B81  3  85 rr                sta varp
001B83  3  A9 8C        a00702: lda #140
001B85  3  A0 08                ldy #8
001B87  3  D1 68                cmp (z80_ix),y
001B89  3  90 03                bcc *+5
001B8B  3  4C A3 1B             jmp a00773
001B8E  3  20 55 08             jsr scrd	; SCREENDOWN
001B91  3  A9 08                lda #8
001B93  3  A0 08                ldy #8
001B95  3  91 68                sta (z80_ix),y
001B97  3  A0 08                ldy #8
001B99  3  B1 68                lda (z80_ix),y
001B9B  3  85 rr                sta varo
001B9D  3  A0 09                ldy #9
001B9F  3  B1 68                lda (z80_ix),y
001BA1  3  85 rr                sta varp
001BA3  3  20 B7 14     a00773: jsr laddd	; LADDERBELOW
001BA6  3  F0 03                beq :+
001BA8  3  4C BE 1B             jmp a00827
001BAB  3               :
001BAB  3  A9 02                lda #2
001BAD  3  85 rr                sta varl
001BAF  3  20 CD 14             jsr laddu	; CANGOUP
001BB2  3  F0 03                beq :+
001BB4  3  4C BB 1B             jmp a00822
001BB7  3               :
001BB7  3  A9 01                lda #1
001BB9  3  85 rr                sta varl
001BBB  3  4C C2 1B     a00822: jmp a00835
001BBE  3  A9 00        a00827: lda #0
001BC0  3  85 rr                sta varl
001BC2  3  A5 rr        a00835: lda joyval	; KEY
001BC4  3  29 01                and #1
001BC6  3  F0 03                beq :+
001BC8  3  4C 6D 1C             jmp a01207
001BCB  3               :
001BCB  3  20 82 15             jsr cangr	; CANGORIGHT
001BCE  3  F0 03                beq :+
001BD0  3  4C 6D 1C             jmp a01207
001BD3  3               :
001BD3  3  A5 rr                lda joyval	; KEY
001BD5  3  29 04                and #4
001BD7  3  F0 03                beq :+
001BD9  3  4C 07 1C             jmp a00983
001BDC  3               :
001BDC  3  20 B7 14             jsr laddd	; LADDERBELOW
001BDF  3  F0 03                beq :+
001BE1  3  4C E7 1B             jmp a00911
001BE4  3               :
001BE4  3  4C 04 1C             jmp a00979
001BE7  3  A9 00        a00911: lda #0
001BE9  3  C5 rr                cmp vara
001BEB  3  F0 03                beq *+5
001BED  3  4C F5 1B             jmp a00939
001BF0  3  A9 00                lda #0		; ANIMATE
001BF2  3  20 0A 07             jsr animsp
001BF5  3  A9 00        a00939: lda #0
001BF7  3  A0 06                ldy #6
001BF9  3  91 68                sta (z80_ix),y
001BFB  3  A0 09                ldy #9 		; SPRITERIGHT
001BFD  3  B1 68                lda (z80_ix),y
001BFF  3  18                   clc
001C00  3  69 02                adc #2
001C02  3  91 68                sta (z80_ix),y
001C04  3  4C 6D 1C     a00979: jmp a01207
001C07  3  A5 rr        a00983: lda joyval	; KEY
001C09  3  29 08                and #8
001C0B  3  F0 03                beq :+
001C0D  3  4C 3B 1C             jmp a01095
001C10  3               :
001C10  3  20 CD 14             jsr laddu	; CANGOUP
001C13  3  F0 03                beq :+
001C15  3  4C 1B 1C             jmp a01023
001C18  3               :
001C18  3  4C 38 1C             jmp a01090
001C1B  3  A9 00        a01023: lda #0
001C1D  3  A0 06                ldy #6
001C1F  3  91 68                sta (z80_ix),y
001C21  3  A9 00                lda #0
001C23  3  C5 rr                cmp vara
001C25  3  F0 03                beq *+5
001C27  3  4C 2F 1C             jmp a01064
001C2A  3  A9 00                lda #0		; ANIMATE
001C2C  3  20 0A 07             jsr animsp
001C2F  3  A0 09        a01064: ldy #9 		; SPRITERIGHT
001C31  3  B1 68                lda (z80_ix),y
001C33  3  18                   clc
001C34  3  69 02                adc #2
001C36  3  91 68                sta (z80_ix),y
001C38  3  4C 6D 1C     a01090: jmp a01207
001C3B  3  A9 01        a01095: lda #1
001C3D  3  85 rr                sta vard
001C3F  3  A9 00                lda #0
001C41  3  A0 06                ldy #6
001C43  3  91 68                sta (z80_ix),y
001C45  3  A9 00                lda #0
001C47  3  C5 rr                cmp vara
001C49  3  F0 03                beq *+5
001C4B  3  4C 64 1C             jmp a01181
001C4E  3  A9 00                lda #0		; ANIMATE
001C50  3  20 0A 07             jsr animsp
001C53  3  A9 00                lda #0
001C55  3  A0 07                ldy #7
001C57  3  D1 68                cmp (z80_ix),y
001C59  3  F0 03                beq *+5
001C5B  3  4C 64 1C             jmp a01181
001C5E  3  A9 14                lda #20		; BEEP
001C60  3  0A                   asl a
001C61  3  8D 01 0A             sta sndtyp
001C64  3  A0 09        a01181: ldy #9 		; SPRITERIGHT
001C66  3  B1 68                lda (z80_ix),y
001C68  3  18                   clc
001C69  3  69 02                adc #2
001C6B  3  91 68                sta (z80_ix),y
001C6D  3  A5 rr        a01207: lda joyval	; KEY
001C6F  3  29 02                and #2
001C71  3  F0 03                beq :+
001C73  3  4C 18 1D             jmp a01577
001C76  3               :
001C76  3  20 70 15             jsr cangl	; CANGOLEFT
001C79  3  F0 03                beq :+
001C7B  3  4C 18 1D             jmp a01577
001C7E  3               :
001C7E  3  A5 rr                lda joyval	; KEY
001C80  3  29 04                and #4
001C82  3  F0 03                beq :+
001C84  3  4C B2 1C             jmp a01355
001C87  3               :
001C87  3  20 B7 14             jsr laddd	; LADDERBELOW
001C8A  3  F0 03                beq :+
001C8C  3  4C 92 1C             jmp a01283
001C8F  3               :
001C8F  3  4C AF 1C             jmp a01350
001C92  3  A9 00        a01283: lda #0
001C94  3  C5 rr                cmp vara
001C96  3  F0 03                beq *+5
001C98  3  4C A0 1C             jmp a01311
001C9B  3  A9 00                lda #0		; ANIMATE
001C9D  3  20 0A 07             jsr animsp
001CA0  3  A9 01        a01311: lda #1
001CA2  3  A0 06                ldy #6
001CA4  3  91 68                sta (z80_ix),y
001CA6  3  A0 09                ldy #9 		; SPRITELEFT
001CA8  3  B1 68                lda (z80_ix),y
001CAA  3  38                   sec
001CAB  3  E9 02                sbc #2
001CAD  3  91 68                sta (z80_ix),y
001CAF  3  4C 18 1D     a01350: jmp a01577
001CB2  3  A5 rr        a01355: lda joyval	; KEY
001CB4  3  29 08                and #8
001CB6  3  F0 03                beq :+
001CB8  3  4C E6 1C             jmp a01466
001CBB  3               :
001CBB  3  20 CD 14             jsr laddu	; CANGOUP
001CBE  3  F0 03                beq :+
001CC0  3  4C C6 1C             jmp a01394
001CC3  3               :
001CC3  3  4C E3 1C             jmp a01461
001CC6  3  A9 01        a01394: lda #1
001CC8  3  A0 06                ldy #6
001CCA  3  91 68                sta (z80_ix),y
001CCC  3  A9 00                lda #0
001CCE  3  C5 rr                cmp vara
001CD0  3  F0 03                beq *+5
001CD2  3  4C DA 1C             jmp a01436
001CD5  3  A9 00                lda #0		; ANIMATE
001CD7  3  20 0A 07             jsr animsp
001CDA  3  A0 09        a01436: ldy #9 		; SPRITELEFT
001CDC  3  B1 68                lda (z80_ix),y
001CDE  3  38                   sec
001CDF  3  E9 02                sbc #2
001CE1  3  91 68                sta (z80_ix),y
001CE3  3  4C 18 1D     a01461: jmp a01577
001CE6  3  A9 02        a01466: lda #2
001CE8  3  85 rr                sta vard
001CEA  3  A9 01                lda #1
001CEC  3  A0 06                ldy #6
001CEE  3  91 68                sta (z80_ix),y
001CF0  3  A9 00                lda #0
001CF2  3  C5 rr                cmp vara
001CF4  3  F0 03                beq *+5
001CF6  3  4C 0F 1D             jmp a01552
001CF9  3  A9 00                lda #0		; ANIMATE
001CFB  3  20 0A 07             jsr animsp
001CFE  3  A9 00                lda #0
001D00  3  A0 07                ldy #7
001D02  3  D1 68                cmp (z80_ix),y
001D04  3  F0 03                beq *+5
001D06  3  4C 0F 1D             jmp a01552
001D09  3  A9 14                lda #20		; BEEP
001D0B  3  0A                   asl a
001D0C  3  8D 01 0A             sta sndtyp
001D0F  3  A0 09        a01552: ldy #9 		; SPRITELEFT
001D11  3  B1 68                lda (z80_ix),y
001D13  3  38                   sec
001D14  3  E9 02                sbc #2
001D16  3  91 68                sta (z80_ix),y
001D18  3  A5 rr        a01577: lda joyval	; KEY
001D1A  3  29 08                and #8
001D1C  3  F0 03                beq :+
001D1E  3  4C 4A 1D             jmp a01687
001D21  3               :
001D21  3  A9 03                lda #3
001D23  3  85 rr                sta vard
001D25  3  20 CD 14             jsr laddu	; CANGOUP
001D28  3  F0 03                beq :+
001D2A  3  4C 4A 1D             jmp a01687
001D2D  3               :
001D2D  3  A9 02                lda #2
001D2F  3  A0 06                ldy #6
001D31  3  91 68                sta (z80_ix),y
001D33  3  A9 00                lda #0
001D35  3  C5 rr                cmp vara
001D37  3  F0 03                beq *+5
001D39  3  4C 41 1D             jmp a01662
001D3C  3  A9 00                lda #0		; ANIMATE
001D3E  3  20 0A 07             jsr animsp
001D41  3  A0 08        a01662: ldy #8 		; SPRITEUP
001D43  3  B1 68                lda (z80_ix),y
001D45  3  38                   sec
001D46  3  E9 02                sbc #2
001D48  3  91 68                sta (z80_ix),y
001D4A  3  A5 rr        a01687: lda joyval	; KEY
001D4C  3  29 04                and #4
001D4E  3  F0 03                beq :+
001D50  3  4C 7C 1D             jmp a01798
001D53  3               :
001D53  3  A9 03                lda #3
001D55  3  85 rr                sta vard
001D57  3  20 B7 14             jsr laddd	; LADDERBELOW
001D5A  3  F0 03                beq :+
001D5C  3  4C 7C 1D             jmp a01798
001D5F  3               :
001D5F  3  A9 02                lda #2
001D61  3  A0 06                ldy #6
001D63  3  91 68                sta (z80_ix),y
001D65  3  A9 00                lda #0
001D67  3  C5 rr                cmp vara
001D69  3  F0 03                beq *+5
001D6B  3  4C 73 1D             jmp a01772
001D6E  3  A9 00                lda #0		; ANIMATE
001D70  3  20 0A 07             jsr animsp
001D73  3  A0 08        a01772: ldy #8 		; SPRITEDOWN
001D75  3  B1 68                lda (z80_ix),y
001D77  3  18                   clc
001D78  3  69 02                adc #2
001D7A  3  91 68                sta (z80_ix),y
001D7C  3  A5 rr        a01798: lda joyval	; KEY
001D7E  3  29 10                and #16
001D80  3  F0 03                beq :+
001D82  3  4C A5 1D             jmp a01881
001D85  3               :
001D85  3  A9 01                lda #1
001D87  3  C5 rr                cmp varl
001D89  3  F0 03                beq *+5
001D8B  3  4C 91 1D             jmp a01839
001D8E  3  4C A5 1D             jmp a01881
001D91  3  20 3B 15     a01839: jsr cangd	; CANGODOWN
001D94  3  F0 03                beq :+
001D96  3  4C 9C 1D             jmp a01860
001D99  3               :
001D99  3  4C A5 1D             jmp a01881
001D9C  3  A9 28        a01860: lda #40		; BEEP
001D9E  3  0A                   asl a
001D9F  3  8D 01 0A             sta sndtyp
001DA2  3  20 07 17             jsr hop	; TABLEJUMP
001DA5  3  A9 05        a01881: lda #DEADLY	; DEADLY
001DA7  3  85 63                sta z80_b
001DA9  3  20 F9 15             jsr tded
001DAC  3  C5 63                cmp z80_b
001DAE  3  F0 03                beq :+
001DB0  3  4C C3 1D             jmp a01949
001DB3  3               :
001DB3  3  A5 rr                lda varo
001DB5  3  A0 08                ldy #8
001DB7  3  91 68                sta (z80_ix),y
001DB9  3  A5 rr                lda varp
001DBB  3  A0 09                ldy #9
001DBD  3  91 68                sta (z80_ix),y
001DBF  3  A9 01                lda #1 		; KILL
001DC1  3  85 rr                sta deadf
001DC3  3  4C 9D 04     a01949: jmp grav
001DC6  3               evnt01:
001DC6  3  A9 00                lda #0
001DC8  3  C5 rr                cmp vara
001DCA  3  F0 03                beq *+5
001DCC  3  4C D4 1D             jmp b00030
001DCF  3  A9 00                lda #0		; ANIMATE
001DD1  3  20 0A 07             jsr animsp
001DD4  3  60           b00030: rts
001DD5  3               evnt02:
001DD5  3  A9 00                lda #0
001DD7  3  C5 rr                cmp vara
001DD9  3  F0 03                beq *+5
001DDB  3  4C E3 1D             jmp c00030
001DDE  3  A9 00                lda #0		; ANIMATE
001DE0  3  20 0A 07             jsr animsp
001DE3  3  A9 00        c00030: lda #0 	; COLLISION
001DE5  3  85 63                sta z80_b
001DE7  3  20 55 07             jsr sktyp
001DEA  3  B0 03                bcs :+
001DEC  3  4C 1E 22             jmp c02457
001DEF  3               :
001DEF  3  A5 rr                lda joyval	; KEY
001DF1  3  29 40                and #64
001DF3  3  F0 03                beq :+
001DF5  3  4C 1E 22             jmp c02457
001DF8  3               :
001DF8  3  A9 09                lda #9		; INVENTORY
001DFA  3  AA                   tax
001DFB  3  20 89 0A             jsr minve
001DFE  3  A9 00                lda #0
001E00  3  C5 rr                cmp scno
001E02  3  F0 03                beq *+5
001E04  3  4C 40 1E             jmp c00237
001E07  3  A9 00                lda #0
001E09  3  C5 rr                cmp varopt
001E0B  3  F0 03                beq *+5
001E0D  3  4C 40 1E             jmp c00237
001E10  3  A9 08                lda #8		; AT
001E12  3  85 rr                sta chary
001E14  3  A9 1C                lda #28
001E16  3  85 rr                sta charx
001E18  3  A9 00                lda #0 		; PUTBLOCK
001E1A  3  20 23 13             jsr pbpattr
001E1D  3  A9 00                lda #0 		; PUTBLOCK
001E1F  3  20 23 13             jsr pbpattr
001E22  3  A9 09                lda #9		; AT
001E24  3  85 rr                sta chary
001E26  3  A9 1C                lda #28
001E28  3  85 rr                sta charx
001E2A  3  A9 00                lda #0 		; PUTBLOCK
001E2C  3  20 23 13             jsr pbpattr
001E2F  3  A9 00                lda #0 		; PUTBLOCK
001E31  3  20 23 13             jsr pbpattr
001E34  3  A9 50                lda #80		; BEEP
001E36  3  0A                   asl a
001E37  3  8D 01 0A             sta sndtyp
001E3A  3  A9 FF                lda #255	; REMOVE
001E3C  3  A0 05                ldy #5
001E3E  3  91 68                sta (z80_ix),y
001E40  3  A9 0B        c00237: lda #11
001E42  3  C5 rr                cmp scno
001E44  3  F0 03                beq *+5
001E46  3  4C 82 1E             jmp c00386
001E49  3  A9 05                lda #5
001E4B  3  C5 rr                cmp varopt
001E4D  3  F0 03                beq *+5
001E4F  3  4C 82 1E             jmp c00386
001E52  3  A9 02                lda #2		; AT
001E54  3  85 rr                sta chary
001E56  3  A9 14                lda #20
001E58  3  85 rr                sta charx
001E5A  3  A9 00                lda #0 		; PUTBLOCK
001E5C  3  20 23 13             jsr pbpattr
001E5F  3  A9 00                lda #0 		; PUTBLOCK
001E61  3  20 23 13             jsr pbpattr
001E64  3  A9 03                lda #3		; AT
001E66  3  85 rr                sta chary
001E68  3  A9 14                lda #20
001E6A  3  85 rr                sta charx
001E6C  3  A9 00                lda #0 		; PUTBLOCK
001E6E  3  20 23 13             jsr pbpattr
001E71  3  A9 00                lda #0 		; PUTBLOCK
001E73  3  20 23 13             jsr pbpattr
001E76  3  A9 3C                lda #60		; BEEP
001E78  3  0A                   asl a
001E79  3  8D 01 0A             sta sndtyp
001E7C  3  A9 FF                lda #255	; REMOVE
001E7E  3  A0 05                ldy #5
001E80  3  91 68                sta (z80_ix),y
001E82  3  A9 04        c00386: lda #4
001E84  3  C5 rr                cmp scno
001E86  3  F0 03                beq *+5
001E88  3  4C E1 1E             jmp c00601
001E8B  3  A9 06                lda #6
001E8D  3  C5 rr                cmp varopt
001E8F  3  F0 03                beq *+5
001E91  3  4C E1 1E             jmp c00601
001E94  3  A9 02                lda #2		; AT
001E96  3  85 rr                sta chary
001E98  3  A9 0B                lda #11
001E9A  3  85 rr                sta charx
001E9C  3  A9 15                lda #21 		; PUTBLOCK
001E9E  3  20 23 13             jsr pbpattr
001EA1  3  A9 16                lda #22 		; PUTBLOCK
001EA3  3  20 23 13             jsr pbpattr
001EA6  3  A9 03                lda #3		; AT
001EA8  3  85 rr                sta chary
001EAA  3  A9 0B                lda #11
001EAC  3  85 rr                sta charx
001EAE  3  A9 15                lda #21 		; PUTBLOCK
001EB0  3  20 23 13             jsr pbpattr
001EB3  3  A9 16                lda #22 		; PUTBLOCK
001EB5  3  20 23 13             jsr pbpattr
001EB8  3  A9 3C                lda #60		; BEEP
001EBA  3  0A                   asl a
001EBB  3  8D 01 0A             sta sndtyp
001EBE  3  A9 FF                lda #255	; REMOVE
001EC0  3  A0 05                ldy #5
001EC2  3  91 68                sta (z80_ix),y
001EC4  3  A9 C8                lda #200
001EC6  3  A0 08                ldy #8
001EC8  3  91 68                sta (z80_ix),y
001ECA  3  A9 18                lda #24
001ECC  3  A0 09                ldy #9
001ECE  3  91 68                sta (z80_ix),y
001ED0  3  A0 09                ldy #9
001ED2  3  B1 68                lda (z80_ix),y	; PUT
001ED4  3  85 rr                sta dispx
001ED6  3  A0 08                ldy #8
001ED8  3  B1 68                lda (z80_ix),y
001EDA  3  85 rr                sta dispy
001EDC  3  A9 06                lda #6
001EDE  3  20 5F 10             jsr drpob
001EE1  3  A9 09        c00601: lda #9
001EE3  3  C5 rr                cmp scno
001EE5  3  F0 03                beq *+5
001EE7  3  4C 40 1F             jmp c00814
001EEA  3  A9 08                lda #8
001EEC  3  C5 rr                cmp varopt
001EEE  3  F0 03                beq *+5
001EF0  3  4C 40 1F             jmp c00814
001EF3  3  A9 04                lda #4		; AT
001EF5  3  85 rr                sta chary
001EF7  3  A9 02                lda #2
001EF9  3  85 rr                sta charx
001EFB  3  A9 00                lda #0 		; PUTBLOCK
001EFD  3  20 23 13             jsr pbpattr
001F00  3  A9 00                lda #0 		; PUTBLOCK
001F02  3  20 23 13             jsr pbpattr
001F05  3  A9 05                lda #5		; AT
001F07  3  85 rr                sta chary
001F09  3  A9 02                lda #2
001F0B  3  85 rr                sta charx
001F0D  3  A9 00                lda #0 		; PUTBLOCK
001F0F  3  20 23 13             jsr pbpattr
001F12  3  A9 00                lda #0 		; PUTBLOCK
001F14  3  20 23 13             jsr pbpattr
001F17  3  A9 2D                lda #45		; BEEP
001F19  3  0A                   asl a
001F1A  3  8D 01 0A             sta sndtyp
001F1D  3  A9 FF                lda #255	; REMOVE
001F1F  3  A0 05                ldy #5
001F21  3  91 68                sta (z80_ix),y
001F23  3  A9 C8                lda #200
001F25  3  A0 08                ldy #8
001F27  3  91 68                sta (z80_ix),y
001F29  3  A9 18                lda #24
001F2B  3  A0 09                ldy #9
001F2D  3  91 68                sta (z80_ix),y
001F2F  3  A0 09                ldy #9
001F31  3  B1 68                lda (z80_ix),y	; PUT
001F33  3  85 rr                sta dispx
001F35  3  A0 08                ldy #8
001F37  3  B1 68                lda (z80_ix),y
001F39  3  85 rr                sta dispy
001F3B  3  A9 08                lda #8
001F3D  3  20 5F 10             jsr drpob
001F40  3  A9 14        c00814: lda #20
001F42  3  C5 rr                cmp scno
001F44  3  F0 03                beq *+5
001F46  3  4C 95 1F             jmp c01005
001F49  3  A9 0F                lda #15
001F4B  3  C5 rr                cmp varopt
001F4D  3  F0 03                beq *+5
001F4F  3  4C 95 1F             jmp c01005
001F52  3  A9 04                lda #4		; AT
001F54  3  85 rr                sta chary
001F56  3  A9 08                lda #8
001F58  3  85 rr                sta charx
001F5A  3  A9 3C                lda #60 		; PUTBLOCK
001F5C  3  20 23 13             jsr pbpattr
001F5F  3  A9 05                lda #5		; AT
001F61  3  85 rr                sta chary
001F63  3  A9 08                lda #8
001F65  3  85 rr                sta charx
001F67  3  A9 3D                lda #61 		; PUTBLOCK
001F69  3  20 23 13             jsr pbpattr
001F6C  3  A9 50                lda #80		; BEEP
001F6E  3  0A                   asl a
001F6F  3  8D 01 0A             sta sndtyp
001F72  3  A9 FF                lda #255	; REMOVE
001F74  3  A0 05                ldy #5
001F76  3  91 68                sta (z80_ix),y
001F78  3  A9 C8                lda #200
001F7A  3  A0 08                ldy #8
001F7C  3  91 68                sta (z80_ix),y
001F7E  3  A9 D8                lda #216
001F80  3  A0 09                ldy #9
001F82  3  91 68                sta (z80_ix),y
001F84  3  A0 09                ldy #9
001F86  3  B1 68                lda (z80_ix),y	; PUT
001F88  3  85 rr                sta dispx
001F8A  3  A0 08                ldy #8
001F8C  3  B1 68                lda (z80_ix),y
001F8E  3  85 rr                sta dispy
001F90  3  A9 0F                lda #15
001F92  3  20 5F 10             jsr drpob
001F95  3  A9 0D        c01005: lda #13
001F97  3  C5 rr                cmp scno
001F99  3  F0 03                beq *+5
001F9B  3  4C E2 1F             jmp c01177
001F9E  3  A9 07                lda #7
001FA0  3  C5 rr                cmp varopt
001FA2  3  F0 03                beq *+5
001FA4  3  4C E2 1F             jmp c01177
001FA7  3  A9 11                lda #17		; AT
001FA9  3  85 rr                sta chary
001FAB  3  A9 0E                lda #14
001FAD  3  85 rr                sta charx
001FAF  3  A9 00                lda #0 		; PUTBLOCK
001FB1  3  20 23 13             jsr pbpattr
001FB4  3  A9 00                lda #0 		; PUTBLOCK
001FB6  3  20 23 13             jsr pbpattr
001FB9  3  A9 2D                lda #45		; BEEP
001FBB  3  0A                   asl a
001FBC  3  8D 01 0A             sta sndtyp
001FBF  3  A9 FF                lda #255	; REMOVE
001FC1  3  A0 05                ldy #5
001FC3  3  91 68                sta (z80_ix),y
001FC5  3  A9 C8                lda #200
001FC7  3  A0 08                ldy #8
001FC9  3  91 68                sta (z80_ix),y
001FCB  3  A9 D8                lda #216
001FCD  3  A0 09                ldy #9
001FCF  3  91 68                sta (z80_ix),y
001FD1  3  A0 09                ldy #9
001FD3  3  B1 68                lda (z80_ix),y	; PUT
001FD5  3  85 rr                sta dispx
001FD7  3  A0 08                ldy #8
001FD9  3  B1 68                lda (z80_ix),y
001FDB  3  85 rr                sta dispy
001FDD  3  A9 07                lda #7
001FDF  3  20 5F 10             jsr drpob
001FE2  3  A9 0E        c01177: lda #14
001FE4  3  C5 rr                cmp scno
001FE6  3  F0 03                beq *+5
001FE8  3  4C 2A 20             jmp c01338
001FEB  3  A9 0B                lda #11
001FED  3  C5 rr                cmp varopt
001FEF  3  F0 03                beq *+5
001FF1  3  4C 2A 20             jmp c01338
001FF4  3  A9 0F                lda #15		; AT
001FF6  3  85 rr                sta chary
001FF8  3  A9 07                lda #7
001FFA  3  85 rr                sta charx
001FFC  3  A9 38                lda #56 		; PUTBLOCK
001FFE  3  20 23 13             jsr pbpattr
002001  3  A9 50                lda #80		; BEEP
002003  3  0A                   asl a
002004  3  8D 01 0A             sta sndtyp
002007  3  A9 FF                lda #255	; REMOVE
002009  3  A0 05                ldy #5
00200B  3  91 68                sta (z80_ix),y
00200D  3  A9 C8                lda #200
00200F  3  A0 08                ldy #8
002011  3  91 68                sta (z80_ix),y
002013  3  A9 18                lda #24
002015  3  A0 09                ldy #9
002017  3  91 68                sta (z80_ix),y
002019  3  A0 09                ldy #9
00201B  3  B1 68                lda (z80_ix),y	; PUT
00201D  3  85 rr                sta dispx
00201F  3  A0 08                ldy #8
002021  3  B1 68                lda (z80_ix),y
002023  3  85 rr                sta dispy
002025  3  A9 0B                lda #11
002027  3  20 5F 10             jsr drpob
00202A  3  A9 05        c01338: lda #5
00202C  3  C5 rr                cmp scno
00202E  3  F0 03                beq *+5
002030  3  4C AE 20             jmp c01634
002033  3  A9 0A                lda #10
002035  3  C5 rr                cmp varopt
002037  3  F0 03                beq *+5
002039  3  4C AE 20             jmp c01634
00203C  3  A0 08                ldy #8
00203E  3  B1 68                lda (z80_ix),y
002040  3  85 rr                sta vare
002042  3  A0 09                ldy #9
002044  3  B1 68                lda (z80_ix),y
002046  3  85 rr                sta varf
002048  3  A9 48                lda #72
00204A  3  A0 08                ldy #8
00204C  3  91 68                sta (z80_ix),y
00204E  3  A9 B0                lda #176
002050  3  A0 09                ldy #9
002052  3  91 68                sta (z80_ix),y
002054  3  A0 09                ldy #9
002056  3  B1 68                lda (z80_ix),y	; PUT
002058  3  85 rr                sta dispx
00205A  3  A0 08                ldy #8
00205C  3  B1 68                lda (z80_ix),y
00205E  3  85 rr                sta dispy
002060  3  A9 0A                lda #10
002062  3  20 5F 10             jsr drpob
002065  3  A9 3C                lda #60		; BEEP
002067  3  0A                   asl a
002068  3  8D 01 0A             sta sndtyp
00206B  3  A9 FF                lda #255	; REMOVE
00206D  3  A0 05                ldy #5
00206F  3  91 68                sta (z80_ix),y
002071  3  A5 rr                lda varf
002073  3  A0 09                ldy #9
002075  3  91 68                sta (z80_ix),y
002077  3  A5 rr                lda vare
002079  3  A0 08                ldy #8
00207B  3  91 68                sta (z80_ix),y
00207D  3  A9 4B                lda #75 	; DELAY
00207F  3  20 E2 09             jsr delay
002082  3  A9 18                lda #24
002084  3  85 62                sta z80_c
002086  3  A0 09                ldy #9
002088  3  B1 68                lda (z80_ix),y
00208A  3  18                   clc
00208B  3  65 62                adc z80_c
00208D  3  A0 09                ldy #9
00208F  3  91 68                sta (z80_ix),y
002091  3  A0 09                ldy #9
002093  3  B1 68                lda (z80_ix),y	; PUT
002095  3  85 rr                sta dispx
002097  3  A0 08                ldy #8
002099  3  B1 68                lda (z80_ix),y
00209B  3  85 rr                sta dispy
00209D  3  A9 0E                lda #14
00209F  3  20 5F 10             jsr drpob
0020A2  3  A5 rr                lda varf
0020A4  3  A0 09                ldy #9
0020A6  3  91 68                sta (z80_ix),y
0020A8  3  A9 46                lda #70		; BEEP
0020AA  3  0A                   asl a
0020AB  3  8D 01 0A             sta sndtyp
0020AE  3  A9 0E        c01634: lda #14
0020B0  3  C5 rr                cmp scno
0020B2  3  F0 03                beq *+5
0020B4  3  4C 00 21             jmp c01819
0020B7  3  A9 0E                lda #14
0020B9  3  C5 rr                cmp varopt
0020BB  3  F0 03                beq *+5
0020BD  3  4C 00 21             jmp c01819
0020C0  3  A9 09                lda #9		; AT
0020C2  3  85 rr                sta chary
0020C4  3  A9 0B                lda #11
0020C6  3  85 rr                sta charx
0020C8  3  A9 37                lda #55 		; PUTBLOCK
0020CA  3  20 23 13             jsr pbpattr
0020CD  3  A9 48                lda #72 		; PUTBLOCK
0020CF  3  20 23 13             jsr pbpattr
0020D2  3  A9 49                lda #73 		; PUTBLOCK
0020D4  3  20 23 13             jsr pbpattr
0020D7  3  A9 3C                lda #60		; BEEP
0020D9  3  0A                   asl a
0020DA  3  8D 01 0A             sta sndtyp
0020DD  3  A9 FF                lda #255	; REMOVE
0020DF  3  A0 05                ldy #5
0020E1  3  91 68                sta (z80_ix),y
0020E3  3  A9 C8                lda #200
0020E5  3  A0 08                ldy #8
0020E7  3  91 68                sta (z80_ix),y
0020E9  3  A9 18                lda #24
0020EB  3  A0 09                ldy #9
0020ED  3  91 68                sta (z80_ix),y
0020EF  3  A0 09                ldy #9
0020F1  3  B1 68                lda (z80_ix),y	; PUT
0020F3  3  85 rr                sta dispx
0020F5  3  A0 08                ldy #8
0020F7  3  B1 68                lda (z80_ix),y
0020F9  3  85 rr                sta dispy
0020FB  3  A9 0E                lda #14
0020FD  3  20 5F 10             jsr drpob
002100  3  A9 10        c01819: lda #16
002102  3  C5 rr                cmp scno
002104  3  F0 03                beq *+5
002106  3  4C 63 21             jmp c02039
002109  3  A9 09                lda #9
00210B  3  C5 rr                cmp varopt
00210D  3  F0 03                beq *+5
00210F  3  4C 63 21             jmp c02039
002112  3  A9 48                lda #72
002114  3  A0 08                ldy #8
002116  3  91 68                sta (z80_ix),y
002118  3  A9 78                lda #120
00211A  3  A0 09                ldy #9
00211C  3  91 68                sta (z80_ix),y
00211E  3  A0 09                ldy #9
002120  3  B1 68                lda (z80_ix),y	; PUT
002122  3  85 rr                sta dispx
002124  3  A0 08                ldy #8
002126  3  B1 68                lda (z80_ix),y
002128  3  85 rr                sta dispy
00212A  3  A9 09                lda #9
00212C  3  20 5F 10             jsr drpob
00212F  3  A9 3C                lda #60		; BEEP
002131  3  0A                   asl a
002132  3  8D 01 0A             sta sndtyp
002135  3  A9 FF                lda #255	; REMOVE
002137  3  A0 05                ldy #5
002139  3  91 68                sta (z80_ix),y
00213B  3  A9 32                lda #50 	; DELAY
00213D  3  20 E2 09             jsr delay
002140  3  A9 50                lda #80		; BEEP
002142  3  0A                   asl a
002143  3  8D 01 0A             sta sndtyp
002146  3  A9 80                lda #128
002148  3  A0 08                ldy #8
00214A  3  91 68                sta (z80_ix),y
00214C  3  A9 A8                lda #168
00214E  3  A0 09                ldy #9
002150  3  91 68                sta (z80_ix),y
002152  3  A0 09                ldy #9
002154  3  B1 68                lda (z80_ix),y	; PUT
002156  3  85 rr                sta dispx
002158  3  A0 08                ldy #8
00215A  3  B1 68                lda (z80_ix),y
00215C  3  85 rr                sta dispy
00215E  3  A9 02                lda #2
002160  3  20 5F 10             jsr drpob
002163  3  A9 0F        c02039: lda #15
002165  3  C5 rr                cmp scno
002167  3  F0 03                beq *+5
002169  3  4C B0 21             jmp c02212
00216C  3  A9 11                lda #17
00216E  3  C5 rr                cmp varopt
002170  3  F0 03                beq *+5
002172  3  4C B0 21             jmp c02212
002175  3  A9 0F                lda #15		; AT
002177  3  85 rr                sta chary
002179  3  A9 14                lda #20
00217B  3  85 rr                sta charx
00217D  3  A9 34                lda #52 		; PUTBLOCK
00217F  3  20 23 13             jsr pbpattr
002182  3  A9 34                lda #52 		; PUTBLOCK
002184  3  20 23 13             jsr pbpattr
002187  3  A9 3C                lda #60		; BEEP
002189  3  0A                   asl a
00218A  3  8D 01 0A             sta sndtyp
00218D  3  A9 FF                lda #255	; REMOVE
00218F  3  A0 05                ldy #5
002191  3  91 68                sta (z80_ix),y
002193  3  A9 C8                lda #200
002195  3  A0 08                ldy #8
002197  3  91 68                sta (z80_ix),y
002199  3  A9 18                lda #24
00219B  3  A0 09                ldy #9
00219D  3  91 68                sta (z80_ix),y
00219F  3  A0 09                ldy #9
0021A1  3  B1 68                lda (z80_ix),y	; PUT
0021A3  3  85 rr                sta dispx
0021A5  3  A0 08                ldy #8
0021A7  3  B1 68                lda (z80_ix),y
0021A9  3  85 rr                sta dispy
0021AB  3  A9 11                lda #17
0021AD  3  20 5F 10             jsr drpob
0021B0  3  A9 17        c02212: lda #23
0021B2  3  C5 rr                cmp scno
0021B4  3  F0 03                beq *+5
0021B6  3  4C F3 21             jmp c02362
0021B9  3  A9 12                lda #18
0021BB  3  C5 rr                cmp varopt
0021BD  3  F0 03                beq *+5
0021BF  3  4C F3 21             jmp c02362
0021C2  3  A9 05                lda #5		; AT
0021C4  3  85 rr                sta chary
0021C6  3  A9 18                lda #24
0021C8  3  85 rr                sta charx
0021CA  3  A9 00                lda #0 		; PUTBLOCK
0021CC  3  20 23 13             jsr pbpattr
0021CF  3  A9 2D                lda #45		; BEEP
0021D1  3  0A                   asl a
0021D2  3  8D 01 0A             sta sndtyp
0021D5  3  A9 32                lda #50 	; DELAY
0021D7  3  20 E2 09             jsr delay
0021DA  3  A9 06                lda #6		; AT
0021DC  3  85 rr                sta chary
0021DE  3  A9 18                lda #24
0021E0  3  85 rr                sta charx
0021E2  3  A9 00                lda #0 		; PUTBLOCK
0021E4  3  20 23 13             jsr pbpattr
0021E7  3  A9 2D                lda #45		; BEEP
0021E9  3  0A                   asl a
0021EA  3  8D 01 0A             sta sndtyp
0021ED  3  A9 FF                lda #255	; REMOVE
0021EF  3  A0 05                ldy #5
0021F1  3  91 68                sta (z80_ix),y
0021F3  3  A9 0A        c02362: lda #10
0021F5  3  C5 rr                cmp scno
0021F7  3  F0 03                beq *+5
0021F9  3  4C 1E 22             jmp c02457
0021FC  3  A9 10                lda #16
0021FE  3  C5 rr                cmp varopt
002200  3  F0 03                beq *+5
002202  3  4C 1E 22             jmp c02457
002205  3  A9 04                lda #4		; AT
002207  3  85 rr                sta chary
002209  3  A9 11                lda #17
00220B  3  85 rr                sta charx
00220D  3  A9 00                lda #0 		; PUTBLOCK
00220F  3  20 23 13             jsr pbpattr
002212  3  A9 2D                lda #45		; BEEP
002214  3  0A                   asl a
002215  3  8D 01 0A             sta sndtyp
002218  3  A9 FF                lda #255	; REMOVE
00221A  3  A0 05                ldy #5
00221C  3  91 68                sta (z80_ix),y
00221E  3  60           c02457: rts
00221F  3               evnt03:
00221F  3  A9 00                lda #0
002221  3  C5 rr                cmp varc
002223  3  F0 03                beq *+5
002225  3  4C C2 22             jmp d00367
002228  3  A9 00                lda #0
00222A  3  A0 0B                ldy #11
00222C  3  D1 68                cmp (z80_ix),y
00222E  3  F0 03                beq *+5
002230  3  4C 7C 22             jmp d00206
002233  3  20 70 15             jsr cangl	; CANGOLEFT
002236  3  F0 03                beq :+
002238  3  4C 73 22             jmp d00188
00223B  3               :
00223B  3  A0 09                ldy #9 		; SPRITELEFT
00223D  3  B1 68                lda (z80_ix),y
00223F  3  38                   sec
002240  3  E9 02                sbc #2
002242  3  91 68                sta (z80_ix),y
002244  3  A9 10                lda #16
002246  3  85 62                sta z80_c
002248  3  A0 09                ldy #9
00224A  3  B1 68                lda (z80_ix),y
00224C  3  38                   sec
00224D  3  E5 62                sbc z80_c
00224F  3  A0 09                ldy #9
002251  3  91 68                sta (z80_ix),y
002253  3  20 3B 15             jsr cangd	; CANGODOWN
002256  3  F0 03                beq :+
002258  3  4C 61 22             jmp d00148
00225B  3               :
00225B  3  A9 01                lda #1
00225D  3  A0 0B                ldy #11
00225F  3  91 68                sta (z80_ix),y
002261  3  A9 10        d00148: lda #16
002263  3  85 62                sta z80_c
002265  3  A0 09                ldy #9
002267  3  B1 68                lda (z80_ix),y
002269  3  18                   clc
00226A  3  65 62                adc z80_c
00226C  3  A0 09                ldy #9
00226E  3  91 68                sta (z80_ix),y
002270  3  4C 79 22             jmp d00201
002273  3  A9 01        d00188: lda #1
002275  3  A0 0B                ldy #11
002277  3  91 68                sta (z80_ix),y
002279  3  4C C2 22     d00201: jmp d00367
00227C  3  20 82 15     d00206: jsr cangr	; CANGORIGHT
00227F  3  F0 03                beq :+
002281  3  4C BC 22             jmp d00353
002284  3               :
002284  3  A0 09                ldy #9 		; SPRITERIGHT
002286  3  B1 68                lda (z80_ix),y
002288  3  18                   clc
002289  3  69 02                adc #2
00228B  3  91 68                sta (z80_ix),y
00228D  3  A9 10                lda #16
00228F  3  85 62                sta z80_c
002291  3  A0 09                ldy #9
002293  3  B1 68                lda (z80_ix),y
002295  3  18                   clc
002296  3  65 62                adc z80_c
002298  3  A0 09                ldy #9
00229A  3  91 68                sta (z80_ix),y
00229C  3  20 3B 15             jsr cangd	; CANGODOWN
00229F  3  F0 03                beq :+
0022A1  3  4C AA 22             jmp d00314
0022A4  3               :
0022A4  3  A9 00                lda #0
0022A6  3  A0 0B                ldy #11
0022A8  3  91 68                sta (z80_ix),y
0022AA  3  A9 10        d00314: lda #16
0022AC  3  85 62                sta z80_c
0022AE  3  A0 09                ldy #9
0022B0  3  B1 68                lda (z80_ix),y
0022B2  3  38                   sec
0022B3  3  E5 62                sbc z80_c
0022B5  3  A0 09                ldy #9
0022B7  3  91 68                sta (z80_ix),y
0022B9  3  4C C2 22             jmp d00367
0022BC  3  A9 00        d00353: lda #0
0022BE  3  A0 0B                ldy #11
0022C0  3  91 68                sta (z80_ix),y
0022C2  3  A9 00        d00367: lda #0		; ANIMATE
0022C4  3  20 0A 07             jsr animsp
0022C7  3  A9 00                lda #0 	; COLLISION
0022C9  3  85 63                sta z80_b
0022CB  3  20 55 07             jsr sktyp
0022CE  3  B0 03                bcs :+
0022D0  3  4C D7 22             jmp d00414
0022D3  3               :
0022D3  3  A9 01                lda #1 		; KILL
0022D5  3  85 rr                sta deadf
0022D7  3  60           d00414: rts
0022D8  3               evnt04:
0022D8  3  A9 00                lda #0
0022DA  3  A0 0B                ldy #11
0022DC  3  D1 68                cmp (z80_ix),y
0022DE  3  F0 03                beq *+5
0022E0  3  4C 14 23             jmp e00131
0022E3  3  20 3B 15             jsr cangd	; CANGODOWN
0022E6  3  F0 03                beq :+
0022E8  3  4C 05 23             jmp e00099
0022EB  3               :
0022EB  3  A0 08                ldy #8 		; SPRITEDOWN
0022ED  3  B1 68                lda (z80_ix),y
0022EF  3  18                   clc
0022F0  3  69 02                adc #2
0022F2  3  91 68                sta (z80_ix),y
0022F4  3  A9 00                lda #0
0022F6  3  C5 rr                cmp vara
0022F8  3  F0 03                beq *+5
0022FA  3  4C 02 23             jmp e00094
0022FD  3  A9 00                lda #0		; ANIMATE
0022FF  3  20 0A 07             jsr animsp
002302  3  4C 11 23     e00094: jmp e00127
002305  3  A9 01        e00099: lda #1
002307  3  A0 0B                ldy #11
002309  3  91 68                sta (z80_ix),y
00230B  3  A9 23                lda #35		; BEEP
00230D  3  0A                   asl a
00230E  3  8D 01 0A             sta sndtyp
002311  3  4C 42 23     e00127: jmp e00233
002314  3  20 06 15     e00131: jsr cangu	; CANGOUP
002317  3  F0 03                beq :+
002319  3  4C 36 23             jmp e00205
00231C  3               :
00231C  3  A0 08                ldy #8 		; SPRITEUP
00231E  3  B1 68                lda (z80_ix),y
002320  3  38                   sec
002321  3  E9 02                sbc #2
002323  3  91 68                sta (z80_ix),y
002325  3  A9 00                lda #0
002327  3  C5 rr                cmp vara
002329  3  F0 03                beq *+5
00232B  3  4C 33 23             jmp e00201
00232E  3  A9 00                lda #0		; ANIMATE
002330  3  20 0A 07             jsr animsp
002333  3  4C 42 23     e00201: jmp e00233
002336  3  A9 00        e00205: lda #0
002338  3  A0 0B                ldy #11
00233A  3  91 68                sta (z80_ix),y
00233C  3  A9 23                lda #35		; BEEP
00233E  3  0A                   asl a
00233F  3  8D 01 0A             sta sndtyp
002342  3  A9 00        e00233: lda #0 	; COLLISION
002344  3  85 63                sta z80_b
002346  3  20 55 07             jsr sktyp
002349  3  B0 03                bcs :+
00234B  3  4C 52 23             jmp e00269
00234E  3               :
00234E  3  A9 01                lda #1 		; KILL
002350  3  85 rr                sta deadf
002352  3  60           e00269: rts
002353  3               evnt05:
002353  3  A9 00                lda #0
002355  3  C5 rr                cmp vara
002357  3  F0 03                beq *+5
002359  3  4C 61 23             jmp f00030
00235C  3  A9 00                lda #0		; ANIMATE
00235E  3  20 0A 07             jsr animsp
002361  3  A9 00        f00030: lda #0 	; COLLISION
002363  3  85 63                sta z80_b
002365  3  20 55 07             jsr sktyp
002368  3  B0 03                bcs :+
00236A  3  4C 22 24             jmp f00451
00236D  3               :
00236D  3  A5 rr                lda joyval	; KEY
00236F  3  29 40                and #64
002371  3  F0 03                beq :+
002373  3  4C 22 24             jmp f00451
002376  3               :
002376  3  A9 09                lda #9		; INVENTORY
002378  3  AA                   tax
002379  3  20 89 0A             jsr minve
00237C  3  A9 19                lda #25
00237E  3  C5 rr                cmp scno
002380  3  F0 03                beq *+5
002382  3  4C BE 23             jmp f00238
002385  3  A9 04                lda #4
002387  3  C5 rr                cmp varopt
002389  3  F0 03                beq *+5
00238B  3  4C BE 23             jmp f00238
00238E  3  A9 09                lda #9		; AT
002390  3  85 rr                sta chary
002392  3  A9 0E                lda #14
002394  3  85 rr                sta charx
002396  3  A9 00                lda #0 		; PUTBLOCK
002398  3  20 23 13             jsr pbpattr
00239B  3  A9 00                lda #0 		; PUTBLOCK
00239D  3  20 23 13             jsr pbpattr
0023A0  3  A9 0A                lda #10		; AT
0023A2  3  85 rr                sta chary
0023A4  3  A9 0E                lda #14
0023A6  3  85 rr                sta charx
0023A8  3  A9 00                lda #0 		; PUTBLOCK
0023AA  3  20 23 13             jsr pbpattr
0023AD  3  A9 00                lda #0 		; PUTBLOCK
0023AF  3  20 23 13             jsr pbpattr
0023B2  3  A9 32                lda #50		; BEEP
0023B4  3  0A                   asl a
0023B5  3  8D 01 0A             sta sndtyp
0023B8  3  A9 FF                lda #255	; REMOVE
0023BA  3  A0 05                ldy #5
0023BC  3  91 68                sta (z80_ix),y
0023BE  3  A9 01        f00238: lda #1
0023C0  3  C5 rr                cmp scno
0023C2  3  F0 03                beq *+5
0023C4  3  4C 00 24             jmp f00387
0023C7  3  A9 04                lda #4
0023C9  3  C5 rr                cmp varopt
0023CB  3  F0 03                beq *+5
0023CD  3  4C 00 24             jmp f00387
0023D0  3  A9 0F                lda #15		; AT
0023D2  3  85 rr                sta chary
0023D4  3  A9 16                lda #22
0023D6  3  85 rr                sta charx
0023D8  3  A9 00                lda #0 		; PUTBLOCK
0023DA  3  20 23 13             jsr pbpattr
0023DD  3  A9 00                lda #0 		; PUTBLOCK
0023DF  3  20 23 13             jsr pbpattr
0023E2  3  A9 10                lda #16		; AT
0023E4  3  85 rr                sta chary
0023E6  3  A9 16                lda #22
0023E8  3  85 rr                sta charx
0023EA  3  A9 00                lda #0 		; PUTBLOCK
0023EC  3  20 23 13             jsr pbpattr
0023EF  3  A9 00                lda #0 		; PUTBLOCK
0023F1  3  20 23 13             jsr pbpattr
0023F4  3  A9 32                lda #50		; BEEP
0023F6  3  0A                   asl a
0023F7  3  8D 01 0A             sta sndtyp
0023FA  3  A9 FF                lda #255	; REMOVE
0023FC  3  A0 05                ldy #5
0023FE  3  91 68                sta (z80_ix),y
002400  3  A9 05        f00387: lda #5
002402  3  C5 rr                cmp scno
002404  3  F0 03                beq *+5
002406  3  4C 22 24             jmp f00451
002409  3  A9 03                lda #3
00240B  3  C5 rr                cmp vark
00240D  3  F0 03                beq *+5
00240F  3  4C 22 24             jmp f00451
002412  3  A9 13                lda #19
002414  3  C5 rr                cmp varopt
002416  3  F0 03                beq *+5
002418  3  4C 22 24             jmp f00451
00241B  3  A9 1B                lda #27
00241D  3  85 rr                sta scno
00241F  3  20 8A 04             jsr nwscr
002422  3  60           f00451: rts
002423  3               evnt06:
002423  3  A9 00                lda #0
002425  3  A0 0B                ldy #11
002427  3  D1 68                cmp (z80_ix),y
002429  3  F0 03                beq *+5
00242B  3  4C 4B 24             jmp g00089
00242E  3  20 70 15             jsr cangl	; CANGOLEFT
002431  3  F0 03                beq :+
002433  3  4C 42 24             jmp g00071
002436  3               :
002436  3  A0 09                ldy #9 		; SPRITELEFT
002438  3  B1 68                lda (z80_ix),y
00243A  3  38                   sec
00243B  3  E9 02                sbc #2
00243D  3  91 68                sta (z80_ix),y
00243F  3  4C 48 24             jmp g00084
002442  3  A9 01        g00071: lda #1
002444  3  A0 0B                ldy #11
002446  3  91 68                sta (z80_ix),y
002448  3  4C 65 24     g00084: jmp g00150
00244B  3  20 82 15     g00089: jsr cangr	; CANGORIGHT
00244E  3  F0 03                beq :+
002450  3  4C 5F 24             jmp g00137
002453  3               :
002453  3  A0 09                ldy #9 		; SPRITERIGHT
002455  3  B1 68                lda (z80_ix),y
002457  3  18                   clc
002458  3  69 02                adc #2
00245A  3  91 68                sta (z80_ix),y
00245C  3  4C 65 24             jmp g00150
00245F  3  A9 00        g00137: lda #0
002461  3  A0 0B                ldy #11
002463  3  91 68                sta (z80_ix),y
002465  3  A9 01        g00150: lda #1
002467  3  A0 0B                ldy #11
002469  3  D1 68                cmp (z80_ix),y
00246B  3  F0 03                beq *+5
00246D  3  4C 8F 24             jmp g00237
002470  3  A9 00                lda #0
002472  3  C5 rr                cmp vara
002474  3  F0 03                beq *+5
002476  3  4C 8F 24             jmp g00237
002479  3  A9 00                lda #0		; ANIMATE
00247B  3  20 0A 07             jsr animsp
00247E  3  A9 03                lda #3
002480  3  A0 07                ldy #7
002482  3  D1 68                cmp (z80_ix),y
002484  3  F0 03                beq *+5
002486  3  4C 8F 24             jmp g00237
002489  3  A9 23                lda #35		; BEEP
00248B  3  0A                   asl a
00248C  3  8D 01 0A             sta sndtyp
00248F  3  A9 00        g00237: lda #0
002491  3  A0 0B                ldy #11
002493  3  D1 68                cmp (z80_ix),y
002495  3  F0 03                beq *+5
002497  3  4C B9 24             jmp g00324
00249A  3  A9 00                lda #0
00249C  3  C5 rr                cmp vara
00249E  3  F0 03                beq *+5
0024A0  3  4C B9 24             jmp g00324
0024A3  3  A9 00                lda #0		; ANIMATEBACK
0024A5  3  20 30 07             jsr animbk
0024A8  3  A9 03                lda #3
0024AA  3  A0 07                ldy #7
0024AC  3  D1 68                cmp (z80_ix),y
0024AE  3  F0 03                beq *+5
0024B0  3  4C B9 24             jmp g00324
0024B3  3  A9 23                lda #35		; BEEP
0024B5  3  0A                   asl a
0024B6  3  8D 01 0A             sta sndtyp
0024B9  3  A9 00        g00324: lda #0 	; COLLISION
0024BB  3  85 63                sta z80_b
0024BD  3  20 55 07             jsr sktyp
0024C0  3  B0 03                bcs :+
0024C2  3  4C C9 24             jmp g00360
0024C5  3               :
0024C5  3  A9 01                lda #1 		; KILL
0024C7  3  85 rr                sta deadf
0024C9  3  60           g00360: rts
0024CA  3               evnt07:
0024CA  3  60                   rts
0024CB  3               evnt08:
0024CB  3  60                   rts
0024CC  3               evnt09:
0024CC  3  A9 04                lda #4
0024CE  3  A0 05                ldy #5
0024D0  3  D1 68                cmp (z80_ix),y
0024D2  3  F0 03                beq *+5
0024D4  3  4C DD 24             jmp j00037
0024D7  3  A9 01                lda #1
0024D9  3  A0 0B                ldy #11
0024DB  3  91 68                sta (z80_ix),y
0024DD  3  A9 00        j00037: lda #0
0024DF  3  A0 05                ldy #5
0024E1  3  D1 68                cmp (z80_ix),y
0024E3  3  F0 03                beq *+5
0024E5  3  4C FF 24             jmp j00112
0024E8  3  A5 rr                lda varo
0024EA  3  A0 08                ldy #8
0024EC  3  91 68                sta (z80_ix),y
0024EE  3  A5 rr                lda varp
0024F0  3  A0 09                ldy #9
0024F2  3  91 68                sta (z80_ix),y
0024F4  3  A0 08                ldy #8
0024F6  3  B1 68                lda (z80_ix),y
0024F8  3  18                   clc
0024F9  3  69 01                adc #1
0024FB  3  A0 08                ldy #8
0024FD  3  91 68                sta (z80_ix),y
0024FF  3  60           j00112: rts
002500  3               evnt10:
002500  3  A5 rr                lda vara
002502  3  18                   clc
002503  3  69 01                adc #1
002505  3  85 rr                sta vara
002507  3  A9 02                lda #2
002509  3  C5 rr                cmp vara
00250B  3  90 03                bcc *+5
00250D  3  4C 14 25             jmp k00042
002510  3  A9 00                lda #0
002512  3  85 rr                sta vara
002514  3  A9 01        k00042: lda #1
002516  3  C5 rr                cmp varh
002518  3  F0 03                beq *+5
00251A  3  4C 4D 25             jmp k00162
00251D  3  A9 0C                lda #12		; GOT
00251F  3  20 2E 10             jsr gotob
002522  3  C9 FF                cmp #255
002524  3  F0 03                beq :+
002526  3  4C 4D 25             jmp k00162
002529  3               :
002529  3  A9 C8                lda #200
00252B  3  A0 08                ldy #8
00252D  3  91 68                sta (z80_ix),y
00252F  3  A9 58                lda #88
002531  3  A0 09                ldy #9
002533  3  91 68                sta (z80_ix),y
002535  3  A0 09                ldy #9
002537  3  B1 68                lda (z80_ix),y	; PUT
002539  3  85 rr                sta dispx
00253B  3  A0 08                ldy #8
00253D  3  B1 68                lda (z80_ix),y
00253F  3  85 rr                sta dispy
002541  3  A9 0C                lda #12
002543  3  20 5F 10             jsr drpob
002546  3  A5 rr                lda varh
002548  3  18                   clc
002549  3  69 01                adc #1
00254B  3  85 rr                sta varh
00254D  3  A9 01        k00162: lda #1
00254F  3  C5 rr                cmp vari
002551  3  F0 03                beq *+5
002553  3  4C 86 25             jmp k00283
002556  3  A9 0D                lda #13		; GOT
002558  3  20 2E 10             jsr gotob
00255B  3  C9 FF                cmp #255
00255D  3  F0 03                beq :+
00255F  3  4C 86 25             jmp k00283
002562  3               :
002562  3  A9 C8                lda #200
002564  3  A0 08                ldy #8
002566  3  91 68                sta (z80_ix),y
002568  3  A9 18                lda #24
00256A  3  A0 09                ldy #9
00256C  3  91 68                sta (z80_ix),y
00256E  3  A0 09                ldy #9
002570  3  B1 68                lda (z80_ix),y	; PUT
002572  3  85 rr                sta dispx
002574  3  A0 08                ldy #8
002576  3  B1 68                lda (z80_ix),y
002578  3  85 rr                sta dispy
00257A  3  A9 0D                lda #13
00257C  3  20 5F 10             jsr drpob
00257F  3  A5 rr                lda vari
002581  3  18                   clc
002582  3  69 01                adc #1
002584  3  85 rr                sta vari
002586  3  A9 1B        k00283: lda #27
002588  3  C5 rr                cmp scno
00258A  3  F0 03                beq *+5
00258C  3  4C BE 25             jmp k00402
00258F  3  A9 00                lda #0
002591  3  C5 rr                cmp varg
002593  3  F0 03                beq *+5
002595  3  4C BE 25             jmp k00402
002598  3  A9 02                lda #2		; AT
00259A  3  85 rr                sta chary
00259C  3  A9 03                lda #3
00259E  3  85 rr                sta charx
0025A0  3  A9 0B                lda #11  	; MESSAGE
0025A2  3  20 1B 18             jsr dmsg
0025A5  3  A9 12                lda #18		; AT
0025A7  3  85 rr                sta chary
0025A9  3  A9 0C                lda #12
0025AB  3  85 rr                sta charx
0025AD  3  A9 14                lda #20  	; MESSAGE
0025AF  3  20 1B 18             jsr dmsg
0025B2  3  A5 rr                lda varg
0025B4  3  18                   clc
0025B5  3  69 01                adc #1
0025B7  3  85 rr                sta varg
0025B9  3  A9 19                lda #25 	; DELAY
0025BB  3  20 E2 09             jsr delay
0025BE  3  A9 1B        k00402: lda #27
0025C0  3  C5 rr                cmp scno
0025C2  3  F0 03                beq *+5
0025C4  3  4C CE 25             jmp k00437
0025C7  3  20 03 0A             jsr prskey	; WAITKEY
0025CA  3  A9 01                lda #1		; ENDGAME
0025CC  3  85 rr                sta gamwon
0025CE  3  60           k00437: rts
0025CF  3               evnt11:
0025CF  3  60                   rts
0025D0  3               evnt12:
0025D0  3  20 94 0D             jsr cls		; CLS
0025D3  3  A9 02                lda #2		; AT
0025D5  3  85 rr                sta chary
0025D7  3  A9 0A                lda #10
0025D9  3  85 rr                sta charx
0025DB  3  A9 00                lda #0  	; MESSAGE
0025DD  3  20 1B 18             jsr dmsg
0025E0  3  A9 01                lda #1
0025E2  3  85 rr                sta chary
0025E4  3  A9 12                lda #18  	; MESSAGE
0025E6  3  20 1B 18             jsr dmsg
0025E9  3  A9 03                lda #3		; AT
0025EB  3  85 rr                sta chary
0025ED  3  A9 00                lda #0
0025EF  3  85 rr                sta charx
0025F1  3  A9 0C                lda #12  	; MESSAGE
0025F3  3  20 1B 18             jsr dmsg
0025F6  3  A9 11                lda #17		; AT
0025F8  3  85 rr                sta chary
0025FA  3  A9 00                lda #0
0025FC  3  85 rr                sta charx
0025FE  3  A9 0D                lda #13  	; MESSAGE
002600  3  20 1B 18             jsr dmsg
002603  3  A9 01                lda #1		; AT
002605  3  85 rr                sta chary
002607  3  A9 0F                lda #15
002609  3  85 rr                sta charx
00260B  3  A9 0E                lda #14  	; MESSAGE
00260D  3  20 1B 18             jsr dmsg
002610  3  A9 07                lda #7		; AT
002612  3  85 rr                sta chary
002614  3  A9 02                lda #2
002616  3  85 rr                sta charx
002618  3  A9 0F                lda #15  	; MESSAGE
00261A  3  20 1B 18             jsr dmsg
00261D  3  A9 03                lda #3		; AT
00261F  3  85 rr                sta chary
002621  3  A9 1D                lda #29
002623  3  85 rr                sta charx
002625  3  A9 10                lda #16  	; MESSAGE
002627  3  20 1B 18             jsr dmsg
00262A  3  A9 05                lda #5		; AT
00262C  3  85 rr                sta chary
00262E  3  A9 08                lda #8
002630  3  85 rr                sta charx
002632  3  A9 0A                lda #10  	; MESSAGE
002634  3  20 1B 18             jsr dmsg
002637  3  A9 09                lda #9		; AT
002639  3  85 rr                sta chary
00263B  3  A9 08                lda #8
00263D  3  85 rr                sta charx
00263F  3  A9 0A                lda #10  	; MESSAGE
002641  3  20 1B 18             jsr dmsg
002644  3  A9 07                lda #7		; AT
002646  3  85 rr                sta chary
002648  3  A9 17                lda #23
00264A  3  85 rr                sta charx
00264C  3  A9 0A                lda #10  	; MESSAGE
00264E  3  20 1B 18             jsr dmsg
002651  3  A9 08                lda #8		; AT
002653  3  85 rr                sta chary
002655  3  A9 17                lda #23
002657  3  85 rr                sta charx
002659  3  A9 0A                lda #10  	; MESSAGE
00265B  3  20 1B 18             jsr dmsg
00265E  3  A9 03                lda #3		; AT
002660  3  85 rr                sta chary
002662  3  A9 14                lda #20
002664  3  85 rr                sta charx
002666  3  A9 08                lda #8  	; MESSAGE
002668  3  20 1B 18             jsr dmsg
00266B  3  A9 0B                lda #11		; AT
00266D  3  85 rr                sta chary
00266F  3  A9 0A                lda #10
002671  3  85 rr                sta charx
002673  3  A9 08                lda #8  	; MESSAGE
002675  3  20 1B 18             jsr dmsg
002678  3  A9 0B                lda #11		; AT
00267A  3  85 rr                sta chary
00267C  3  A9 0C                lda #12
00267E  3  85 rr                sta charx
002680  3  A9 08                lda #8  	; MESSAGE
002682  3  20 1B 18             jsr dmsg
002685  3  A9 0B                lda #11		; AT
002687  3  85 rr                sta chary
002689  3  A9 0B                lda #11
00268B  3  85 rr                sta charx
00268D  3  A9 08                lda #8  	; MESSAGE
00268F  3  20 1B 18             jsr dmsg
002692  3  A9 13                lda #19		; AT
002694  3  85 rr                sta chary
002696  3  A9 00                lda #0
002698  3  85 rr                sta charx
00269A  3  A9 01                lda #1		; PRINTMODE
00269C  3  85 rr                sta prtmod
00269E  3  A9 11                lda #17  	; MESSAGE
0026A0  3  20 1B 18             jsr dmsg
0026A3  3  A9 00                lda #0		; PRINTMODE
0026A5  3  85 rr                sta prtmod
0026A7  3  A9 15                lda #21		; AT
0026A9  3  85 rr                sta chary
0026AB  3  A9 00                lda #0
0026AD  3  85 rr                sta charx
0026AF  3  A9 16                lda #22  	; MESSAGE
0026B1  3  20 1B 18             jsr dmsg
0026B4  3               
0026B4  3               rtcon:			; CONTROLMENU
0026B4  3  20 1A 0D             jsr vsync
0026B7  3  A9 00                lda #0
0026B9  3  85 rr                sta contrl
0026BB  3  AD 8A 6D             lda keys+7
0026BE  3  20 40 17             jsr ktest
0026C1  3  90 18                bcc rtcon1
0026C3  3  A9 01                lda #1
0026C5  3  85 rr                sta contrl
0026C7  3  AD 8B 6D             lda keys+8
0026CA  3  20 40 17             jsr ktest
0026CD  3  90 0C                bcc rtcon1
0026CF  3  A9 02                lda #2
0026D1  3  85 rr                sta contrl
0026D3  3  AD 8C 6D             lda keys+9
0026D6  3  20 40 17             jsr ktest
0026D9  3  B0 D9                bcs rtcon
0026DB  3                       rtcon1:
0026DB  3  60                   rts
0026DC  3               evnt13:
0026DC  3  20 94 0D             jsr cls		; CLS
0026DF  3  A9 14                lda #20		; AT
0026E1  3  85 rr                sta chary
0026E3  3  A9 02                lda #2
0026E5  3  85 rr                sta charx
0026E7  3  A9 00                lda #0  	; MESSAGE
0026E9  3  20 1B 18             jsr dmsg
0026EC  3  A9 00                lda #0
0026EE  3  85 rr                sta varc
0026F0  3  A9 00                lda #0
0026F2  3  85 rr                sta varg
0026F4  3  A9 80                lda #128
0026F6  3  85 rr                sta varo
0026F8  3  A9 20                lda #32
0026FA  3  85 rr                sta varp
0026FC  3  A9 03                lda #3
0026FE  3  85 rr                sta numlif
002700  3  A9 00                lda #0
002702  3  85 rr                sta vark
002704  3  A9 00                lda #0
002706  3  85 rr                sta vare
002708  3  A9 00                lda #0
00270A  3  85 rr                sta varf
00270C  3  A9 00                lda #0		; AT
00270E  3  85 rr                sta chary
002710  3  A9 01                lda #1
002712  3  85 rr                sta charx
002714  3  A9 03                lda #3  	; MESSAGE
002716  3  20 1B 18             jsr dmsg
002719  3  A9 15                lda #21 	; REPEAT
00271B  3  85 rr                sta loopa
00271D  3  A9 01        n00142: lda #1
00271F  3  85 rr                sta charx
002721  3  A9 03                lda #3  	; MESSAGE
002723  3  20 1B 18             jsr dmsg
002726  3  C6 rr                dec loopa	; ENDREPEAT
002728  3  F0 03                beq :+
00272A  3  4C 1D 27             jmp n00142
00272D  3               :
00272D  3  A9 01                lda #1
00272F  3  85 rr                sta charx
002731  3  A9 04                lda #4  	; MESSAGE
002733  3  20 1B 18             jsr dmsg
002736  3  A9 00                lda #0		; AT
002738  3  85 rr                sta chary
00273A  3  A9 1E                lda #30
00273C  3  85 rr                sta charx
00273E  3  A9 03                lda #3  	; MESSAGE
002740  3  20 1B 18             jsr dmsg
002743  3  A9 15                lda #21 	; REPEAT
002745  3  85 rr                sta loopa
002747  3  A9 1E        n00237: lda #30
002749  3  85 rr                sta charx
00274B  3  A9 03                lda #3  	; MESSAGE
00274D  3  20 1B 18             jsr dmsg
002750  3  C6 rr                dec loopa	; ENDREPEAT
002752  3  F0 03                beq :+
002754  3  4C 47 27             jmp n00237
002757  3               :
002757  3  A9 16                lda #22		; AT
002759  3  85 rr                sta chary
00275B  3  A9 02                lda #2
00275D  3  85 rr                sta charx
00275F  3  A9 05                lda #5  	; MESSAGE
002761  3  20 1B 18             jsr dmsg
002764  3  A9 16                lda #22		; AT
002766  3  85 rr                sta chary
002768  3  A9 1E                lda #30
00276A  3  85 rr                sta charx
00276C  3  A9 06                lda #6  	; MESSAGE
00276E  3  20 1B 18             jsr dmsg
002771  3  A9 15                lda #21		; AT
002773  3  85 rr                sta chary
002775  3  A9 0E                lda #14
002777  3  85 rr                sta charx
002779  3  A9 01                lda #1  	; MESSAGE
00277B  3  20 1B 18             jsr dmsg
00277E  3  A9 15                lda #21		; AT
002780  3  85 rr                sta chary
002782  3  A9 1D                lda #29
002784  3  85 rr                sta charx
002786  3  A5 rr                lda numlif	; DISPLAY
002788  3  20 E5 07             jsr disply
00278B  3  A9 15                lda #21		; AT
00278D  3  85 rr                sta chary
00278F  3  A9 02                lda #2
002791  3  85 rr                sta charx
002793  3  A9 07                lda #7  	; MESSAGE
002795  3  20 1B 18             jsr dmsg
002798  3  A9 14                lda #20		; AT
00279A  3  85 rr                sta chary
00279C  3  A9 0E                lda #14
00279E  3  85 rr                sta charx
0027A0  3  A9 02                lda #2  	; MESSAGE
0027A2  3  20 1B 18             jsr dmsg
0027A5  3  A9 14                lda #20		; AT
0027A7  3  85 rr                sta chary
0027A9  3  A9 1D                lda #29
0027AB  3  85 rr                sta charx
0027AD  3  A5 rr                lda vark	; DISPLAY
0027AF  3  20 E5 07             jsr disply
0027B2  3  60                   rts
0027B3  3               evnt14:
0027B3  3  60                   rts
0027B4  3               evnt15:
0027B4  3  60                   rts
0027B5  3               evnt16:
0027B5  3  A9 3C                lda #60		; BEEP
0027B7  3  0A                   asl a
0027B8  3  8D 01 0A             sta sndtyp
0027BB  3  A9 14                lda #20 	; DELAY
0027BD  3  20 E2 09             jsr delay
0027C0  3  A9 32                lda #50		; BEEP
0027C2  3  0A                   asl a
0027C3  3  8D 01 0A             sta sndtyp
0027C6  3  A5 rr                lda numlif
0027C8  3  38                   sec
0027C9  3  E9 01                sbc #1
0027CB  3  85 rr                sta numlif
0027CD  3  A5 rr                lda varo
0027CF  3  A0 08                ldy #8
0027D1  3  91 68                sta (z80_ix),y
0027D3  3  A5 rr                lda varp
0027D5  3  A0 09                ldy #9
0027D7  3  91 68                sta (z80_ix),y
0027D9  3  A9 15                lda #21		; AT
0027DB  3  85 rr                sta chary
0027DD  3  A9 1D                lda #29
0027DF  3  85 rr                sta charx
0027E1  3  A5 rr                lda numlif	; DISPLAY
0027E3  3  20 E5 07             jsr disply
0027E6  3  60                   rts
0027E7  3               evnt17:
0027E7  3  A9 32                lda #50 	; DELAY
0027E9  3  20 E2 09             jsr delay
0027EC  3  20 94 0D             jsr cls		; CLS
0027EF  3  A9 0A                lda #10		; AT
0027F1  3  85 rr                sta chary
0027F3  3  A9 0A                lda #10
0027F5  3  85 rr                sta charx
0027F7  3  A9 00                lda #0  	; MESSAGE
0027F9  3  20 1B 18             jsr dmsg
0027FC  3  A9 09                lda #9
0027FE  3  85 rr                sta chary
002800  3  A9 12                lda #18  	; MESSAGE
002802  3  20 1B 18             jsr dmsg
002805  3  A9 0C                lda #12		; AT
002807  3  85 rr                sta chary
002809  3  A9 0C                lda #12
00280B  3  85 rr                sta charx
00280D  3  A9 15                lda #21  	; MESSAGE
00280F  3  20 1B 18             jsr dmsg
002812  3  A9 0E                lda #14		; AT
002814  3  85 rr                sta chary
002816  3  A9 0F                lda #15
002818  3  85 rr                sta charx
00281A  3  A9 0E                lda #14  	; MESSAGE
00281C  3  20 1B 18             jsr dmsg
00281F  3  A9 C8                lda #200 	; DELAY
002821  3  20 E2 09             jsr delay
002824  3  60                   rts
002825  3               evnt18:
002825  3  20 94 0D             jsr cls		; CLS
002828  3  A9 32                lda #50 	; DELAY
00282A  3  20 E2 09             jsr delay
00282D  3  A9 01                lda #1		; AT
00282F  3  85 rr                sta chary
002831  3  A9 00                lda #0
002833  3  85 rr                sta charx
002835  3  A9 13                lda #19  	; MESSAGE
002837  3  20 1B 18             jsr dmsg
00283A  3  A9 15                lda #21		; AT
00283C  3  85 rr                sta chary
00283E  3  A9 0B                lda #11
002840  3  85 rr                sta charx
002842  3  A9 14                lda #20  	; MESSAGE
002844  3  20 1B 18             jsr dmsg
002847  3  20 03 0A             jsr prskey	; WAITKEY
00284A  3  60                   rts
00284B  3               evnt19:
00284B  3  60                   rts
00284C  3               evnt20:
00284C  3  60                   rts
00284D  3  60           ptcusr: rts
00284E  3               msgdat:
00284E  3  46 4F 47 47          .byte "FOGGYS;QUEST",141
002852  3  59 53 3B 51  
002856  3  55 45 53 54  
00285B  3  20 20 20 20          .byte "        LIVES:",141
00285F  3  20 20 20 20  
002863  3  4C 49 56 45  
00286A  3  20 20 20 20          .byte "     CRYSTALS:",141
00286E  3  20 43 52 59  
002872  3  53 54 41 4C  
002879  3  40 8D                .byte "@",141
00287B  3  60 8D                .byte "`",141
00287D  3  5F 5F 5F 5F          .byte "____________________________",141
002881  3  5F 5F 5F 5F  
002885  3  5F 5F 5F 5F  
00289A  3  24 8D                .byte "$",141
00289C  3  42 59 3A 3B          .byte "BY:;J.BLYTHE",141
0028A0  3  4A 2E 42 4C  
0028A4  3  59 54 48 45  
0028A9  3  78 8D                .byte "x",141
0028AB  3  3B 4B 45 59          .byte ";KEY;BLUE;;",13
0028AF  3  3B 42 4C 55  
0028B3  3  45 3B 3B 0D  
0028B7  3  43 52 59 53          .byte "CRYSTAL;BLU",13
0028BB  3  54 41 4C 3B  
0028BF  3  42 4C 55 0D  
0028C3  3  43 52 59 53          .byte "CRYSTAL;RED",13
0028C7  3  54 41 4C 3B  
0028CB  3  52 45 44 0D  
0028CF  3  43 52 59 53          .byte "CRYSTAL;GRN",13
0028D3  3  54 41 4C 3B  
0028D7  3  47 52 4E 0D  
0028DB  3  3B 3B 4B 45          .byte ";;KEY;RED;;",13
0028DF  3  59 3B 52 45  
0028E3  3  44 3B 3B 0D  
0028E7  3  3B 4B 45 59          .byte ";KEY;PINK;;",13
0028EB  3  3B 50 49 4E  
0028EF  3  4B 3B 3B 0D  
0028F3  3  3B 3B 4C 41          .byte ";;LADDER;;;",13
0028F7  3  44 44 45 52  
0028FB  3  3B 3B 3B 0D  
0028FF  3  3B 3B 3B 42          .byte ";;;BOMB;;;;",13
002903  3  4F 4D 42 3B  
002907  3  3B 3B 3B 0D  
00290B  3  3B 54 48 45          .byte ";THE;CUBE;;",13
00290F  3  3B 43 55 42  
002913  3  45 3B 3B 0D  
002917  3  3B 54 48 45          .byte ";THE;SKULL;",13
00291B  3  3B 53 4B 55  
00291F  3  4C 4C 3B 0D  
002923  3  3B 50 49 54          .byte ";PIT;PLANT;",13
002927  3  3B 50 4C 41  
00292B  3  4E 54 3B 0D  
00292F  3  3B 3B 3B 52          .byte ";;;ROCK;;;;",13
002933  3  4F 43 4B 3B  
002937  3  3B 3B 3B 0D  
00293B  3  45 58 54 52          .byte "EXTRA;LIFE;",13
00293F  3  41 3B 4C 49  
002943  3  46 45 3B 0D  
002947  3  45 58 54 52          .byte "EXTRA;LIFE;",13
00294B  3  41 3B 4C 49  
00294F  3  46 45 3B 0D  
002953  3  3B 3B 41 3B          .byte ";;A;SEED;;;",13
002957  3  53 45 45 44  
00295B  3  3B 3B 3B 0D  
00295F  3  3B 3B 42 41          .byte ";;BALLOON;;",13
002963  3  4C 4C 4F 4F  
002967  3  4E 3B 3B 0D  
00296B  3  3B 50 49 43          .byte ";PICK;AXE;;",13
00296F  3  4B 3B 41 58  
002973  3  45 3B 3B 0D  
002977  3  3B 3B 42 52          .byte ";;BRICKS;;;",13
00297B  3  49 43 4B 53  
00297F  3  3B 3B 3B 0D  
002983  3  3B 49 43 45          .byte ";ICE;DRILL;",13
002987  3  3B 44 52 49  
00298B  3  4C 4C 3B 0D  
00298F  3  3B 3B 53 50          .byte ";;SPLICER;;",141
002993  3  4C 49 43 45  
002997  3  52 3B 3B 8D  
00299B  3  7A 8D                .byte "z",141
00299D  3  57 45 4C 4C          .byte "WELL;DONE;FOGGY!!",141
0029A1  3  3B 44 4F 4E  
0029A5  3  45 3B 46 4F  
0029AF  3  3B 3B 3B 3B          .byte ";;;;;;;;w___________x__y;;;.",13
0029B3  3  3B 3B 3B 3B  
0029B7  3  77 5F 5F 5F  
0029CC  3  3B 2E 3B 3B          .byte ";.;;;;;;@;;;;;;;;;;;;;;@",13
0029D0  3  3B 3B 3B 3B  
0029D4  3  40 3B 3B 3B  
0029E5  3  3B 3B 3B 3B          .byte ";;;;;;;;z;;;CONTROLS;;;@;.",13
0029E9  3  3B 3B 3B 3B  
0029ED  3  7A 3B 3B 3B  
002A00  3  3B 3B 3B 3B          .byte ";;;;;.;;@;;;;;;;;;;;;;;@;;;;;;.",13
002A04  3  3B 2E 3B 3B  
002A08  3  40 3B 3B 3B  
002A20  3  3B 3B 3B 3B          .byte ";;;;.;;;@;;1;KEYBOARD;;z",13
002A24  3  2E 3B 3B 3B  
002A28  3  40 3B 3B 31  
002A39  3  3B 3B 3B 3B          .byte ";;;;;;;;@;;2;JOYKEY;;;;@",13
002A3D  3  3B 3B 3B 3B  
002A41  3  40 3B 3B 32  
002A52  3  3B 3B 3B 3B          .byte ";;;;;;;;z;;3;JOYMMC;;;;@;;;;.",13
002A56  3  3B 3B 3B 3B  
002A5A  3  7A 3B 3B 33  
002A70  3  3B 3B 3B 3B          .byte ";;;;;;.;@;;;;;;;;;;;;;;@;;;;;.",13
002A74  3  3B 3B 2E 3B  
002A78  3  40 3B 3B 3B  
002A8F  3  3B 3B 2E 3B          .byte ";;.;;;;;`_xx___________$;;.",13
002A93  3  3B 3B 3B 3B  
002A97  3  60 5F 78 78  
002AAB  3  0D                   .byte 13
002AAC  3  3B 3B 3B 3B          .byte ";;;;;;;;;;KEYS:O,P,Q,A",13
002AB0  3  3B 3B 3B 3B  
002AB4  3  3B 3B 4B 45  
002AC3  3  3B 3B 3B 3B          .byte ";;;;;;;;;;;;;;;I-INV.",13
002AC7  3  3B 3B 3B 3B  
002ACB  3  3B 3B 3B 3B  
002AD9  3  3B 3B 3B 3B          .byte ";;;;;;;;;;;;;;;SPC-JUMP",141
002ADD  3  3B 3B 3B 3B  
002AE1  3  3B 3B 3B 3B  
002AF1  3  3B 3B 3B 3B          .byte ";;;;;;;;;RUCKSACK;GAMES",13
002AF5  3  3B 3B 3B 3B  
002AF9  3  3B 52 55 43  
002B09  3  3B 3B 3B 3B          .byte ";;;;;;;c;2017;JOHN;BLYTHE",141
002B0D  3  3B 3B 3B 63  
002B11  3  3B 32 30 31  
002B23  3  2F 2B 8D             .byte "/+",141
002B26  3  3E 8D                .byte ">",141
002B28  3  3F 8D                .byte "?",141
002B2A  3  3B 3B 3B 3B          .byte ";;;;;;;;;POWERED;BY;AGD",141
002B2E  3  3B 3B 3B 3B  
002B32  3  3B 50 4F 57  
002B42  3  3B 3B 3B 3B          .byte ";;;;;;;;;;v",13
002B46  3  3B 3B 3B 3B  
002B4A  3  3B 3B 76 0D  
002B4E  3  3B 3B 3B 3B          .byte ";;;;;;;;;;u",141
002B52  3  3B 3B 3B 3B  
002B56  3  3B 3B 75 8D  
002B5A  3  3B 3B 3B 48          .byte ";;;HOME;AT;LAST.;FOGGY;TAKES;A",13
002B5E  3  4F 4D 45 3B  
002B62  3  41 54 3B 4C  
002B79  3  3B 0D                .byte ";",13
002B7B  3  3B 57 45 4C          .byte ";WELL;EARNED;REST;FROM;HOLIDAYS.",13
002B7F  3  4C 3B 45 41  
002B83  3  52 4E 45 44  
002B9C  3  3B 0D                .byte ";",13
002B9E  3  3B 3B 3B 3B          .byte ";;;;TIME;FOR;BIT;OF;TREASURE",13
002BA2  3  54 49 4D 45  
002BA6  3  3B 46 4F 52  
002BBB  3  3B 0D                .byte ";",13
002BBD  3  3B 3B 3B 3B          .byte ";;;;;;;;HUNTING;INSTEAD!!!",13
002BC1  3  3B 3B 3B 3B  
002BC5  3  48 55 4E 54  
002BD8  3  3B 0D                .byte ";",13
002BDA  3  3B 0D                .byte ";",13
002BDC  3  3B 3B 3B 3B          .byte ";;;;;;;THANKS;FOR;PLAYING!",13
002BE0  3  3B 3B 3B 54  
002BE4  3  48 41 4E 4B  
002BF7  3  3B 0D                .byte ";",13
002BF9  3  3B 43 52 45          .byte ";CREDITS..",13
002BFD  3  44 49 54 53  
002C01  3  2E 2E 0D     
002C04  3  3B 0D                .byte ";",13
002C06  3  3B 43 4F 44          .byte ";CODING;AND;GFX;-;JOHN;BLYTHE",13
002C0A  3  49 4E 47 3B  
002C0E  3  41 4E 44 3B  
002C24  3  3B 41 44 44          .byte ";ADDITIONAL;CODE;-;ANDY;JOHNS",13
002C28  3  49 54 49 4F  
002C2C  3  4E 41 4C 3B  
002C42  3  3B 0D                .byte ";",13
002C44  3  3B 4D 41 4E          .byte ";MANY;THANKS;TO..",13
002C48  3  59 3B 54 48  
002C4C  3  41 4E 4B 53  
002C56  3  3B 4A 4F 4E          .byte ";JONATHAN CAULDWELL;FOR;AGD",141
002C5A  3  41 54 48 41  
002C5E  3  4E 20 43 41  
002C72  3  50 52 45 53          .byte "PRESS;A;KEY",141
002C76  3  53 3B 41 3B  
002C7A  3  4B 45 59 8D  
002C7E  3  49 53 3B 4F          .byte "IS;OVER..",141
002C82  3  56 45 52 2E  
002C86  3  2E 8D        
002C88  3  3B 3B 3B 3B          .byte ";;;;;6502;CODE;KEES;VAN;OSS",141
002C8C  3  3B 36 35 30  
002C90  3  32 3B 43 4F  
002CA4  3               nummsg:
002CA4  3  17                   .byte 23
002CA5  3               chgfx:
002CA5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002CA9  3  00 00 00 00  
002CAD  3  0C 6C 61 80          .byte 12,108,97,128,30,222,222,32
002CB1  3  1E DE DE 20  
002CB5  3  46 06 66 61          .byte 70,6,102,97,0,51,179,48
002CB9  3  00 33 B3 30  
002CBD  3  00 08 41 00          .byte 0,8,65,0,16,0,130,32
002CC1  3  10 00 82 20  
002CC5  3  7E 81 8D 8D          .byte 126,129,141,141,129,161,129,126
002CC9  3  81 A1 81 7E  
002CCD  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
002CD1  3  A5 42 81 00  
002CD5  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
002CD9  3  A5 42 81 00  
002CDD  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
002CE1  3  A5 42 81 00  
002CE5  3  FF 7E BD 5A          .byte 255,126,189,90,165,66,129,0
002CE9  3  A5 42 81 00  
002CED  3  EF EF AA 45          .byte 239,239,170,69,170,0,239,0
002CF1  3  AA 00 EF 00  
002CF5  3  F8 FE AE 57          .byte 248,254,174,87,171,23,139,87
002CF9  3  AB 17 8B 57  
002CFD  3  4B 57 4B 57          .byte 75,87,75,87,0,87,75,87
002D01  3  00 57 4B 57  
002D05  3  4B 57 4A 44          .byte 75,87,74,68,34,48,0,0
002D09  3  22 30 00 00  
002D0D  3  7E FF AA 55          .byte 126,255,170,85,3,187,56,66
002D11  3  03 BB 38 42  
002D15  3  B7 B7 00 F8          .byte 183,183,0,248,240,0,192,128
002D19  3  F0 00 C0 80  
002D1D  3  D7 D7 00 1D          .byte 215,215,0,29,13,0,3,1
002D21  3  0D 00 03 01  
002D25  3  0C 19 1E 4C          .byte 12,25,30,76,56,28,14,24
002D29  3  38 1C 0E 18  
002D2D  3  0C 58 30 26          .byte 12,88,48,38,72,68,36,24
002D31  3  48 44 24 18  
002D35  3  EF EF AA 45          .byte 239,239,170,69,170,0,239,0
002D39  3  AA 00 EF 00  
002D3D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002D41  3  00 00 00 00  
002D45  3  B5 00 60 06          .byte 181,0,96,6,0,170,0,85
002D49  3  00 AA 00 55  
002D4D  3  60 60 60 FF          .byte 96,96,96,255,170,0,64,96
002D51  3  AA 00 40 60  
002D55  3  06 06 06 FF          .byte 6,6,6,255,170,0,4,6
002D59  3  AA 00 04 06  
002D5D  3  84 29 10 5A          .byte 132,41,16,90,32,148,1,40
002D61  3  20 94 01 28  
002D65  3  4F 9F 00 4F          .byte 79,159,0,79,0,159,149,79
002D69  3  00 9F 95 4F  
002D6D  3  FA FD 00 FA          .byte 250,253,0,250,0,253,85,250
002D71  3  00 FD 55 FA  
002D75  3  7E 81 8D 8D          .byte 126,129,141,141,129,161,129,126
002D79  3  81 A1 81 7E  
002D7D  3  7E 81 8D 8D          .byte 126,129,141,141,129,161,129,126
002D81  3  81 A1 81 7E  
002D85  3  A8 82 2A A2          .byte 168,130,42,162,136,42,162,42
002D89  3  88 2A A2 2A  
002D8D  3  A8 82 2A A2          .byte 168,130,42,162,136,42,162,42
002D91  3  88 2A A2 2A  
002D95  3  A8 82 2A A2          .byte 168,130,42,162,136,42,162,42
002D99  3  88 2A A2 2A  
002D9D  3  00 00 00 00          .byte 0,0,0,0,66,16,36,255
002DA1  3  42 10 24 FF  
002DA5  3  DB FF 55 AA          .byte 219,255,85,170,255,0,30,12
002DA9  3  FF 00 1E 0C  
002DAD  3  6D FF 55 AA          .byte 109,255,85,170,255,0,120,48
002DB1  3  FF 00 78 30  
002DB5  3  3F 40 B4 A0          .byte 63,64,180,160,128,133,255,0
002DB9  3  80 85 FF 00  
002DBD  3  FC 02 01 05          .byte 252,2,1,5,13,161,255,0
002DC1  3  0D A1 FF 00  
002DC5  3  F0 FC 57 AC          .byte 240,252,87,172,240,44,5,14
002DC9  3  F0 2C 05 0E  
002DCD  3  0D 3F F5 3A          .byte 13,63,245,58,15,26,160,112
002DD1  3  0F 1A A0 70  
002DD5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002DD9  3  00 00 00 00  
002DDD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002DE1  3  00 00 00 00  
002DE5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002DE9  3  00 00 00 00  
002DED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002DF1  3  00 00 00 00  
002DF5  3  FE 7C B8 50          .byte 254,124,184,80,160,64,128,0
002DF9  3  A0 40 80 00  
002DFD  3  7F 3E 1D 0A          .byte 127,62,29,10,5,2,1,0
002E01  3  05 02 01 00  
002E05  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002E09  3  00 00 00 00  
002E0D  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0
002E11  3  20 00 00 00  
002E15  3  00 00 00 08          .byte 0,0,0,8,0,0,0,0
002E19  3  00 00 00 00  
002E1D  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
002E21  3  FF FF FF FF  
002E25  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
002E29  3  FF FF FF FF  
002E2D  3  80 40 A0 D0          .byte 128,64,160,208,232,244,250,253
002E31  3  E8 F4 FA FD  
002E35  3  F7 FF F7 00          .byte 247,255,247,0,127,255,127,255
002E39  3  7F FF 7F FF  
002E3D  3  01 02 05 0B          .byte 1,2,5,11,23,47,95,191
002E41  3  17 2F 5F BF  
002E45  3  00 6A 40 00          .byte 0,106,64,0,64,0,66,0
002E49  3  40 00 42 00  
002E4D  3  18 18 24 24          .byte 24,24,36,36,102,126,231,255
002E51  3  66 7E E7 FF  
002E55  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002E59  3  00 00 00 00  
002E5D  3  36 6F DD DD          .byte 54,111,221,221,122,50,1,0
002E61  3  7A 32 01 00  
002E65  3  7C D6 BF FF          .byte 124,214,191,255,235,213,170,124
002E69  3  EB D5 AA 7C  
002E6D  3  38 FE FF DD          .byte 56,254,255,221,243,127,157,98
002E71  3  F3 7F 9D 62  
002E75  3  00 70 EC DE          .byte 0,112,236,222,254,251,223,62
002E79  3  FE FB DF 3E  
002E7D  3  00 0F 3F 6F          .byte 0,15,63,111,254,249,239,112
002E81  3  FE F9 EF 70  
002E85  3  3C 4E BF FF          .byte 60,78,191,255,245,106,52,24
002E89  3  F5 6A 34 18  
002E8D  3  08 08 04 08          .byte 8,8,4,8,16,32,16,8
002E91  3  10 20 10 08  
002E95  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
002E99  3  FF FF FF FF  
002E9D  3  55 AB 57 AF          .byte 85,171,87,175,95,191,127,255
002EA1  3  5F BF 7F FF  
002EA5  3  01 02 05 0A          .byte 1,2,5,10,21,42,85,170
002EA9  3  15 2A 55 AA  
002EAD  3  3D 68 D0 A8          .byte 61,104,208,168,208,128,192,128
002EB1  3  D0 80 C0 80  
002EB5  3  BC 16 0B 15          .byte 188,22,11,21,11,1,3,1
002EB9  3  0B 01 03 01  
002EBD  3  FF 75 AA 10          .byte 255,117,170,16,66,0,0,0
002EC1  3  42 00 00 00  
002EC5  3  00 AA 00 55          .byte 0,170,0,85,170,85,170,85
002EC9  3  AA 55 AA 55  
002ECD  3  8B C5 E3 F1          .byte 139,197,227,241,185,221,175,151
002ED1  3  B9 DD AF 97  
002ED5  3  FF FA D2 52          .byte 255,250,210,82,64,64,0,0
002ED9  3  40 40 00 00  
002EDD  3  00 00 00 00          .byte 0,0,0,0,0,0,76,255
002EE1  3  00 00 4C FF  
002EE5  3  5A A5 DB 66          .byte 90,165,219,102,189,102,60,90
002EE9  3  BD 66 3C 5A  
002EED  3  4C F6 FB BB          .byte 76,246,251,187,95,70,128,0
002EF1  3  5F 46 80 00  
002EF5  3  0E 17 2D 2C          .byte 14,23,45,44,44,88,224,0
002EF9  3  2C 58 E0 00  
002EFD  3  66 5B A4 5A          .byte 102,91,164,90,219,25,100,154
002F01  3  DB 19 64 9A  
002F05  3  01 82 66 5A          .byte 1,130,102,90,38,28,0,0
002F09  3  26 1C 00 00  
002F0D  3  A7 A7 A7 A7          .byte 167,167,167,167,167,167,167,167
002F11  3  A7 A7 A7 A7  
002F15  3  F2 EA F2 EA          .byte 242,234,242,234,242,234,242,234
002F19  3  F2 EA F2 EA  
002F1D  3               bprop:
002F1D  3  00                   .byte 0
002F1E  3  02                   .byte 2
002F1F  3  02                   .byte 2
002F20  3  02                   .byte 2
002F21  3  02                   .byte 2
002F22  3  02                   .byte 2
002F23  3  02                   .byte 2
002F24  3  02                   .byte 2
002F25  3  02                   .byte 2
002F26  3  00                   .byte 0
002F27  3  00                   .byte 0
002F28  3  00                   .byte 0
002F29  3  00                   .byte 0
002F2A  3  02                   .byte 2
002F2B  3  00                   .byte 0
002F2C  3  00                   .byte 0
002F2D  3  00                   .byte 0
002F2E  3  00                   .byte 0
002F2F  3  00                   .byte 0
002F30  3  00                   .byte 0
002F31  3  05                   .byte 5
002F32  3  03                   .byte 3
002F33  3  03                   .byte 3
002F34  3  02                   .byte 2
002F35  3  02                   .byte 2
002F36  3  02                   .byte 2
002F37  3  02                   .byte 2
002F38  3  02                   .byte 2
002F39  3  02                   .byte 2
002F3A  3  02                   .byte 2
002F3B  3  02                   .byte 2
002F3C  3  00                   .byte 0
002F3D  3  02                   .byte 2
002F3E  3  02                   .byte 2
002F3F  3  02                   .byte 2
002F40  3  02                   .byte 2
002F41  3  02                   .byte 2
002F42  3  02                   .byte 2
002F43  3  00                   .byte 0
002F44  3  00                   .byte 0
002F45  3  00                   .byte 0
002F46  3  00                   .byte 0
002F47  3  00                   .byte 0
002F48  3  00                   .byte 0
002F49  3  02                   .byte 2
002F4A  3  00                   .byte 0
002F4B  3  00                   .byte 0
002F4C  3  00                   .byte 0
002F4D  3  02                   .byte 2
002F4E  3  00                   .byte 0
002F4F  3  02                   .byte 2
002F50  3  00                   .byte 0
002F51  3  03                   .byte 3
002F52  3  00                   .byte 0
002F53  3  00                   .byte 0
002F54  3  01                   .byte 1
002F55  3  02                   .byte 2
002F56  3  01                   .byte 1
002F57  3  01                   .byte 1
002F58  3  01                   .byte 1
002F59  3  02                   .byte 2
002F5A  3  00                   .byte 0
002F5B  3  00                   .byte 0
002F5C  3  00                   .byte 0
002F5D  3  00                   .byte 0
002F5E  3  02                   .byte 2
002F5F  3  02                   .byte 2
002F60  3  02                   .byte 2
002F61  3  02                   .byte 2
002F62  3  02                   .byte 2
002F63  3  00                   .byte 0
002F64  3  00                   .byte 0
002F65  3  01                   .byte 1
002F66  3  01                   .byte 1
002F67  3  00                   .byte 0
002F68  3  00                   .byte 0
002F69  3  00                   .byte 0
002F6A  3  00                   .byte 0
002F6B  3  00                   .byte 0
002F6C  3               sprgfx:
002F6C  3  00 00 0C 00          .byte 0,0,12,0,23,0,7,192,15,224,30,112,61,168,61,36,125,36,126,32,255,252,198,252,187,4,125,250,125,247,60,15
002F70  3  17 00 07 C0  
002F74  3  0F E0 1E 70  
002F8C  3  00 00 03 00          .byte 0,0,3,0,5,192,1,240,3,248,7,156,15,106,15,73,31,73,31,136,63,255,49,191,46,193,159,126,223,125,207,3
002F90  3  05 C0 01 F0  
002F94  3  03 F8 07 9C  
002FAC  3  00 00 00 C0          .byte 0,0,0,192,1,112,0,124,0,254,1,231,131,218,67,210,71,210,7,226,207,255,204,111,75,176,167,223,119,223,243,192
002FB0  3  01 70 00 7C  
002FB4  3  00 FE 01 E7  
002FCC  3  00 00 00 30          .byte 0,0,0,48,0,92,0,31,128,63,192,121,160,246,144,244,145,244,129,248,243,255,243,27,18,236,233,247,221,247,60,240
002FD0  3  00 5C 00 1F  
002FD4  3  80 3F C0 79  
002FEC  3  00 00 1E 00          .byte 0,0,30,0,7,128,7,192,15,224,31,48,62,212,62,144,126,144,127,16,241,252,238,252,95,4,31,120,15,116,0,12
002FF0  3  07 80 07 C0  
002FF4  3  0F E0 1F 30  
00300C  3  00 00 07 80          .byte 0,0,7,128,1,224,1,240,3,248,7,204,15,181,15,164,31,164,31,196,60,127,59,191,23,193,7,222,3,221,0,3
003010  3  01 E0 01 F0  
003014  3  03 F8 07 CC  
00302C  3  00 00 01 E0          .byte 0,0,1,224,0,120,0,124,0,254,1,243,67,237,3,233,7,233,7,241,207,31,206,239,69,240,129,247,64,247,192,0
003030  3  00 78 00 7C  
003034  3  00 FE 01 F3  
00304C  3  00 00 00 78          .byte 0,0,0,120,0,30,0,31,128,63,192,124,80,251,64,250,65,250,65,252,243,199,243,187,17,124,224,125,208,61,48,0
003050  3  00 1E 00 1F  
003054  3  80 3F C0 7C  
00306C  3  10 00 0E 00          .byte 16,0,14,0,7,128,7,192,15,224,31,144,63,104,63,72,127,72,127,136,255,252,252,124,123,132,55,216,7,208,27,192
003070  3  07 80 07 C0  
003074  3  0F E0 1F 90  
00308C  3  04 00 03 80          .byte 4,0,3,128,1,224,1,240,3,248,7,228,15,218,15,210,31,210,31,226,63,255,63,31,30,225,13,246,1,244,6,240
003090  3  01 E0 01 F0  
003094  3  03 F8 07 E4  
0030AC  3  01 00 00 E0          .byte 1,0,0,224,0,120,0,124,0,254,1,249,131,246,131,244,135,244,135,248,207,255,207,199,71,184,131,125,0,125,1,188
0030B0  3  00 78 00 7C  
0030B4  3  00 FE 01 F9  
0030CC  3  00 40 00 38          .byte 0,64,0,56,0,30,0,31,128,63,64,126,160,253,32,253,33,253,33,254,243,255,243,241,17,238,96,223,64,31,0,111
0030D0  3  00 1E 00 1F  
0030D4  3  80 3F 40 7E  
0030EC  3  00 00 1E 00          .byte 0,0,30,0,7,128,7,192,15,224,31,48,62,212,62,144,126,144,127,16,255,252,241,252,110,4,95,120,31,116,15,12
0030F0  3  07 80 07 C0  
0030F4  3  0F E0 1F 30  
00310C  3  00 00 07 80          .byte 0,0,7,128,1,224,1,240,3,248,7,204,15,181,15,164,31,164,31,196,63,255,60,127,27,129,23,222,7,221,3,195
003110  3  01 E0 01 F0  
003114  3  03 F8 07 CC  
00312C  3  00 00 01 E0          .byte 0,0,1,224,0,120,0,124,0,254,1,243,67,237,3,233,7,233,7,241,207,255,207,31,70,224,133,247,65,247,192,240
003130  3  00 78 00 7C  
003134  3  00 FE 01 F3  
00314C  3  00 00 00 78          .byte 0,0,0,120,0,30,0,31,128,63,192,124,80,251,64,250,65,250,65,252,243,255,243,199,17,184,225,125,208,125,48,60
003150  3  00 1E 00 1F  
003154  3  80 3F C0 7C  
00316C  3  00 00 00 30          .byte 0,0,0,48,0,232,3,224,7,240,14,120,21,188,36,188,36,190,4,126,63,255,63,99,32,221,95,190,239,190,240,60
003170  3  00 E8 03 E0  
003174  3  07 F0 0E 78  
00318C  3  00 00 00 0C          .byte 0,0,0,12,0,58,0,248,1,252,3,158,5,111,9,47,137,47,129,31,207,255,207,216,72,55,151,239,187,239,60,15
003190  3  00 3A 00 F8  
003194  3  01 FC 03 9E  
0031AC  3  00 00 00 03          .byte 0,0,0,3,128,14,0,62,0,127,128,231,193,91,194,75,226,75,224,71,243,255,51,246,210,13,229,251,238,251,207,3
0031B0  3  80 0E 00 3E  
0031B4  3  00 7F 80 E7  
0031CC  3  00 00 C0 00          .byte 0,0,192,0,160,3,128,15,192,31,224,57,240,86,240,146,248,146,248,17,252,255,140,253,116,131,249,126,251,190,243,192
0031D0  3  A0 03 80 0F  
0031D4  3  C0 1F E0 39  
0031EC  3  00 00 00 78          .byte 0,0,0,120,1,224,3,224,7,240,12,248,43,124,9,124,9,126,8,254,63,143,63,119,32,250,30,248,46,240,48,0
0031F0  3  01 E0 03 E0  
0031F4  3  07 F0 0C F8  
00320C  3  00 00 00 1E          .byte 0,0,0,30,0,120,0,248,1,252,3,62,10,223,2,95,130,95,130,63,207,227,207,221,136,62,7,190,11,188,12,0
003210  3  00 78 00 F8  
003214  3  01 FC 03 3E  
00322C  3  00 00 80 07          .byte 0,0,128,7,0,30,0,62,0,127,128,207,194,183,192,151,224,151,224,143,243,248,115,247,162,15,129,239,2,239,3,0
003230  3  00 1E 00 3E  
003234  3  00 7F 80 CF  
00324C  3  00 00 E0 01          .byte 0,0,224,1,128,7,128,15,192,31,224,51,240,173,240,37,248,37,248,35,60,254,220,253,232,131,224,123,192,187,0,192
003250  3  80 07 80 0F  
003254  3  C0 1F E0 33  
00326C  3  00 08 00 70          .byte 0,8,0,112,1,224,3,224,7,240,9,248,22,252,18,252,18,254,17,254,63,255,62,63,33,222,27,236,11,224,3,216
003270  3  01 E0 03 E0  
003274  3  07 F0 09 F8  
00328C  3  00 02 00 1C          .byte 0,2,0,28,0,120,0,248,1,252,2,126,5,191,4,191,132,191,132,127,207,255,207,143,136,119,6,251,2,248,0,246
003290  3  00 78 00 F8  
003294  3  01 FC 02 7E  
0032AC  3  80 00 00 07          .byte 128,0,0,7,0,30,0,62,0,127,128,159,193,111,193,47,225,47,225,31,243,255,243,227,226,29,193,190,0,190,128,61
0032B0  3  00 1E 00 3E  
0032B4  3  00 7F 80 9F  
0032CC  3  20 00 C0 01          .byte 32,0,192,1,128,7,128,15,192,31,224,39,240,91,240,75,248,75,248,71,252,255,252,248,120,135,176,111,128,47,96,15
0032D0  3  80 07 80 0F  
0032D4  3  C0 1F E0 27  
0032EC  3  00 00 00 78          .byte 0,0,0,120,1,224,3,224,7,240,12,248,43,124,9,124,9,126,8,254,63,255,63,143,32,118,30,250,46,248,48,240
0032F0  3  01 E0 03 E0  
0032F4  3  07 F0 0C F8  
00330C  3  00 00 00 1E          .byte 0,0,0,30,0,120,0,248,1,252,3,62,10,223,2,95,130,95,130,63,207,255,207,227,136,29,135,190,11,190,12,60
003310  3  00 78 00 F8  
003314  3  01 FC 03 3E  
00332C  3  00 00 80 07          .byte 0,0,128,7,0,30,0,62,0,127,128,207,194,183,192,151,224,151,224,143,243,255,243,248,98,7,161,239,130,239,3,15
003330  3  00 1E 00 3E  
003334  3  00 7F 80 CF  
00334C  3  00 00 E0 01          .byte 0,0,224,1,128,7,128,15,192,31,224,51,240,173,240,37,248,37,248,35,252,255,60,254,216,129,232,123,224,187,192,195
003350  3  80 07 80 0F  
003354  3  C0 1F E0 33  
00336C  3  03 C0 05 A0          .byte 3,192,5,160,14,112,14,240,31,248,31,248,63,252,63,252,63,252,127,254,127,235,23,87,106,173,245,91,247,224,240,0
003370  3  0E 70 0E F0  
003374  3  1F F8 1F F8  
00338C  3  00 F0 01 68          .byte 0,240,1,104,3,156,3,188,7,254,7,254,15,255,15,255,15,255,159,255,223,250,197,213,90,171,253,86,61,248,60,0
003390  3  03 9C 03 BC  
003394  3  07 FE 07 FE  
0033AC  3  00 3C 00 5A          .byte 0,60,0,90,0,231,0,239,129,255,129,255,195,255,195,255,195,255,231,255,183,254,113,117,214,170,191,85,15,126,15,0
0033B0  3  00 E7 00 EF  
0033B4  3  81 FF 81 FF  
0033CC  3  00 0F 80 16          .byte 0,15,128,22,192,57,192,59,224,127,224,127,240,255,240,255,240,255,249,255,173,255,92,93,181,170,111,213,131,223,3,192
0033D0  3  C0 39 C0 3B  
0033D4  3  E0 7F E0 7F  
0033EC  3  03 C0 05 A0          .byte 3,192,5,160,13,112,12,240,31,248,31,248,63,252,63,252,63,252,127,254,111,238,151,215,234,173,245,91,103,231,0,0
0033F0  3  0D 70 0C F0  
0033F4  3  1F F8 1F F8  
00340C  3  00 F0 01 68          .byte 0,240,1,104,3,92,3,60,7,254,7,254,15,255,15,255,15,255,159,255,155,251,229,245,122,171,253,86,217,249,0,0
003410  3  03 5C 03 3C  
003414  3  07 FE 07 FE  
00342C  3  00 3C 00 5A          .byte 0,60,0,90,0,215,0,207,129,255,129,255,195,255,195,255,195,255,231,255,230,254,121,125,222,170,191,85,118,126,0,0
003430  3  00 D7 00 CF  
003434  3  81 FF 81 FF  
00344C  3  00 0F 80 16          .byte 0,15,128,22,192,53,192,51,224,127,224,127,240,255,240,255,240,255,249,255,185,191,94,95,183,170,111,213,157,159,0,0
003450  3  C0 35 C0 33  
003454  3  E0 7F E0 7F  
00346C  3  03 C0 05 A0          .byte 3,192,5,160,14,112,14,240,31,248,31,248,63,252,63,252,63,252,127,254,239,254,213,216,170,166,213,79,7,239,0,15
003470  3  0E 70 0E F0  
003474  3  1F F8 1F F8  
00348C  3  00 F0 01 68          .byte 0,240,1,104,3,156,3,188,7,254,7,254,15,255,15,255,15,255,159,255,187,255,53,118,170,169,245,83,193,251,192,3
003490  3  03 9C 03 BC  
003494  3  07 FE 07 FE  
0034AC  3  00 3C 00 5A          .byte 0,60,0,90,0,231,0,239,129,255,129,255,195,255,195,255,195,255,231,255,238,255,141,93,106,170,253,84,240,126,240,0
0034B0  3  00 E7 00 EF  
0034B4  3  81 FF 81 FF  
0034CC  3  00 0F 80 16          .byte 0,15,128,22,192,57,192,59,224,127,224,127,240,255,240,255,240,255,249,255,251,191,99,87,154,170,63,85,188,31,60,0
0034D0  3  C0 39 C0 3B  
0034D4  3  E0 7F E0 7F  
0034EC  3  03 C0 05 A0          .byte 3,192,5,160,14,176,15,48,31,248,31,248,63,252,63,252,63,252,127,254,111,238,151,215,234,173,245,91,103,231,0,0
0034F0  3  0E B0 0F 30  
0034F4  3  1F F8 1F F8  
00350C  3  00 F0 01 68          .byte 0,240,1,104,3,172,3,204,7,254,7,254,15,255,15,255,15,255,159,255,155,251,229,245,122,171,253,86,217,249,0,0
003510  3  03 AC 03 CC  
003514  3  07 FE 07 FE  
00352C  3  00 3C 00 5A          .byte 0,60,0,90,0,235,0,243,129,255,129,255,195,255,195,255,195,255,231,255,230,254,121,125,222,170,191,85,118,126,0,0
003530  3  00 EB 00 F3  
003534  3  81 FF 81 FF  
00354C  3  00 0F 80 16          .byte 0,15,128,22,192,58,192,60,224,127,224,127,240,255,240,255,240,255,249,255,185,191,94,95,183,170,111,213,157,159,0,0
003550  3  C0 3A C0 3C  
003554  3  E0 7F E0 7F  
00356C  3  66 66 FF FF          .byte 102,102,255,255,128,1,179,205,189,189,191,253,183,237,179,205,179,205,179,205,191,253,191,253,166,101,128,1,255,255,102,102
003570  3  80 01 B3 CD  
003574  3  BD BD BF FD  
00358C  3  99 99 FF FF          .byte 153,153,255,255,96,0,108,243,111,111,111,255,109,251,108,243,108,243,108,243,111,255,111,255,105,153,96,0,255,255,153,153
003590  3  60 00 6C F3  
003594  3  6F 6F 6F FF  
0035AC  3  66 66 FF FF          .byte 102,102,255,255,24,0,219,60,219,219,219,255,219,126,219,60,219,60,219,60,219,255,219,255,90,102,24,0,255,255,102,102
0035B0  3  18 00 DB 3C  
0035B4  3  DB DB DB FF  
0035CC  3  99 99 FF FF          .byte 153,153,255,255,6,0,54,207,246,246,246,255,182,223,54,207,54,207,54,207,246,255,246,255,150,153,6,0,255,255,153,153
0035D0  3  06 00 36 CF  
0035D4  3  F6 F6 F6 FF  
0035EC  3  66 66 FF FF          .byte 102,102,255,255,128,1,191,253,179,205,189,189,191,253,183,237,179,205,179,205,191,253,166,101,160,5,128,1,255,255,102,102
0035F0  3  80 01 BF FD  
0035F4  3  B3 CD BD BD  
00360C  3  99 99 FF FF          .byte 153,153,255,255,96,0,111,255,108,243,111,111,111,255,109,251,108,243,108,243,111,255,105,153,104,1,96,0,255,255,153,153
003610  3  60 00 6F FF  
003614  3  6C F3 6F 6F  
00362C  3  66 66 FF FF          .byte 102,102,255,255,24,0,219,255,219,60,219,219,219,255,219,126,219,60,219,60,219,255,90,102,90,0,24,0,255,255,102,102
003630  3  18 00 DB FF  
003634  3  DB 3C DB DB  
00364C  3  99 99 FF FF          .byte 153,153,255,255,6,0,246,255,54,207,246,246,246,255,182,223,54,207,54,207,246,255,150,153,22,128,6,0,255,255,153,153
003650  3  06 00 F6 FF  
003654  3  36 CF F6 F6  
00366C  3  66 66 FF FF          .byte 102,102,255,255,128,1,191,253,183,237,187,221,189,189,167,229,187,221,191,253,182,109,160,5,160,5,128,1,255,255,102,102
003670  3  80 01 BF FD  
003674  3  B7 ED BB DD  
00368C  3  99 99 FF FF          .byte 153,153,255,255,96,0,111,255,109,251,110,247,111,111,105,249,110,247,111,255,109,155,104,1,104,1,96,0,255,255,153,153
003690  3  60 00 6F FF  
003694  3  6D FB 6E F7  
0036AC  3  66 66 FF FF          .byte 102,102,255,255,24,0,219,255,219,126,219,189,219,219,90,126,219,189,219,255,219,102,90,0,90,0,24,0,255,255,102,102
0036B0  3  18 00 DB FF  
0036B4  3  DB 7E DB BD  
0036CC  3  99 99 FF FF          .byte 153,153,255,255,6,0,246,255,182,223,118,239,246,246,150,159,118,239,246,255,182,217,22,128,22,128,6,0,255,255,153,153
0036D0  3  06 00 F6 FF  
0036D4  3  B6 DF 76 EF  
0036EC  3  30 00 30 00          .byte 48,0,48,0,31,251,56,31,55,236,47,244,47,244,47,52,46,84,46,20,47,52,47,244,240,12,223,248,0,12,0,12
0036F0  3  1F FB 38 1F  
0036F4  3  37 EC 2F F4  
00370C  3  0C 00 0C 00          .byte 12,0,12,0,199,254,206,7,13,251,11,253,11,253,11,205,11,149,11,133,11,205,11,253,60,3,55,254,0,3,0,3
003710  3  C7 FE CE 07  
003714  3  0D FB 0B FD  
00372C  3  03 00 03 00          .byte 3,0,3,0,177,255,243,129,195,126,66,255,66,255,66,243,66,229,66,225,66,243,66,255,207,0,141,255,192,0,192,0
003730  3  B1 FF F3 81  
003734  3  C3 7E 42 FF  
00374C  3  00 C0 00 C0          .byte 0,192,0,192,236,127,124,224,176,223,208,191,208,191,208,188,80,185,80,184,208,188,208,191,51,192,227,127,48,0,48,0
003750  3  EC 7F 7C E0  
003754  3  B0 DF D0 BF  
00376C  3  03 00 03 00          .byte 3,0,3,0,31,248,56,28,55,236,47,244,47,247,46,119,236,180,236,52,46,116,47,244,48,12,31,248,0,192,0,192
003770  3  1F F8 38 1C  
003774  3  37 EC 2F F4  
00378C  3  00 C0 00 C0          .byte 0,192,0,192,7,254,14,7,13,251,11,253,203,253,203,157,59,45,59,13,11,157,11,253,12,3,7,254,0,48,0,48
003790  3  07 FE 0E 07  
003794  3  0D FB 0B FD  
0037AC  3  00 30 00 30          .byte 0,48,0,48,129,255,195,129,195,126,66,255,114,255,114,231,78,203,78,195,66,231,66,255,195,0,129,255,0,12,0,12
0037B0  3  81 FF C3 81  
0037B4  3  C3 7E 42 FF  
0037CC  3  00 0C 00 0C          .byte 0,12,0,12,224,127,112,224,176,223,208,191,220,191,220,185,211,178,211,176,208,185,208,191,48,192,224,127,0,3,0,3
0037D0  3  E0 7F 70 E0  
0037D4  3  B0 DF D0 BF  
0037EC  3  00 30 00 30          .byte 0,48,0,48,31,248,56,28,247,236,239,244,47,244,44,244,41,116,40,116,44,247,47,247,48,12,31,248,12,0,12,0
0037F0  3  1F F8 38 1C  
0037F4  3  F7 EC EF F4  
00380C  3  00 0C 00 0C          .byte 0,12,0,12,7,254,14,7,61,251,59,253,11,253,11,61,10,93,10,29,203,61,203,253,12,3,7,254,3,0,3,0
003810  3  07 FE 0E 07  
003814  3  3D FB 3B FD  
00382C  3  00 03 00 03          .byte 0,3,0,3,129,255,195,129,207,126,78,255,66,255,66,207,66,151,66,135,114,207,114,255,195,0,129,255,0,192,0,192
003830  3  81 FF C3 81  
003834  3  CF 7E 4E FF  
00384C  3  C0 00 C0 00          .byte 192,0,192,0,224,127,112,224,179,223,211,191,208,191,208,179,208,165,208,161,220,179,220,191,48,192,224,127,0,48,0,48
003850  3  E0 7F 70 E0  
003854  3  B3 DF D3 BF  
00386C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
003870  3  00 00 00 00  
003874  3  00 00 00 00  
00388C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
003890  3  00 00 00 00  
003894  3  00 00 00 00  
0038AC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0038B0  3  00 00 00 00  
0038B4  3  00 00 00 00  
0038CC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0038D0  3  00 00 00 00  
0038D4  3  00 00 00 00  
0038EC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
0038F0  3  00 00 00 00  
0038F4  3  00 00 00 00  
00390C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
003910  3  00 00 00 00  
003914  3  00 00 00 00  
00392C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
003930  3  00 00 00 00  
003934  3  00 00 00 00  
00394C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
003950  3  00 00 00 00  
003954  3  00 00 00 00  
00396C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
003970  3  00 00 00 00  
003974  3  00 00 00 00  
00398C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
003990  3  00 00 00 00  
003994  3  00 00 00 00  
0039AC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0039B0  3  00 00 00 00  
0039B4  3  00 00 00 00  
0039CC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
0039D0  3  00 00 00 00  
0039D4  3  00 00 00 00  
0039EC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
0039F0  3  00 00 00 00  
0039F4  3  00 00 55 55  
003A0C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
003A10  3  00 00 00 00  
003A14  3  00 00 55 55  
003A2C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
003A30  3  00 00 00 00  
003A34  3  00 00 55 55  
003A4C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
003A50  3  00 00 00 00  
003A54  3  00 00 55 55  
003A6C  3  00 00 38 1C          .byte 0,0,56,28,103,230,92,58,91,218,58,92,58,92,60,60,63,252,56,28,59,220,91,218,92,58,103,230,56,28,0,0
003A70  3  67 E6 5C 3A  
003A74  3  5B DA 3A 5C  
003A8C  3  00 00 0E 07          .byte 0,0,14,7,153,249,151,14,150,246,14,151,14,151,15,15,15,255,14,7,14,247,150,246,151,14,153,249,14,7,0,0
003A90  3  99 F9 97 0E  
003A94  3  96 F6 0E 97  
003AAC  3  00 00 C3 81          .byte 0,0,195,129,102,126,165,195,165,189,195,165,195,165,195,195,195,255,195,129,195,189,165,189,165,195,102,126,195,129,0,0
003AB0  3  66 7E A5 C3  
003AB4  3  A5 BD C3 A5  
003ACC  3  00 00 70 E0          .byte 0,0,112,224,153,159,233,112,105,111,112,233,112,233,240,240,240,255,112,224,112,239,105,111,233,112,153,159,112,224,0,0
003AD0  3  99 9F E9 70  
003AD4  3  69 6F 70 E9  
003AEC  3  06 00 18 00          .byte 6,0,24,0,7,224,28,58,27,218,59,29,59,29,60,60,63,252,191,252,184,28,91,216,92,56,7,224,0,24,0,96
003AF0  3  07 E0 1C 3A  
003AF4  3  1B DA 3B 1D  
003B0C  3  01 80 06 00          .byte 1,128,6,0,1,248,135,14,134,246,78,199,78,199,15,15,15,255,47,255,46,7,22,246,23,14,1,248,0,6,0,24
003B10  3  01 F8 87 0E  
003B14  3  86 F6 4E C7  
003B2C  3  00 60 01 80          .byte 0,96,1,128,0,126,161,195,161,189,211,177,211,177,195,195,195,255,203,255,203,129,133,189,133,195,0,126,128,1,0,6
003B30  3  00 7E A1 C3  
003B34  3  A1 BD D3 B1  
003B4C  3  00 18 00 60          .byte 0,24,0,96,128,31,232,112,104,111,116,236,116,236,240,240,240,255,242,255,114,224,97,111,225,112,128,31,96,0,128,1
003B50  3  80 1F E8 70  
003B54  3  68 6F 74 EC  
003B6C  3  01 E0 00 00          .byte 1,224,0,0,7,224,28,56,27,216,184,220,184,220,188,61,191,253,63,253,59,221,28,56,31,248,7,224,0,0,7,128
003B70  3  07 E0 1C 38  
003B74  3  1B D8 B8 DC  
003B8C  3  00 78 00 00          .byte 0,120,0,0,1,248,7,14,6,246,46,55,46,55,111,15,111,255,79,255,78,247,7,14,7,254,1,248,0,0,1,224
003B90  3  01 F8 07 0E  
003B94  3  06 F6 2E 37  
003BAC  3  00 1E 00 00          .byte 0,30,0,0,0,126,129,195,129,189,203,141,203,141,219,195,219,255,211,255,211,189,129,195,129,255,0,126,0,0,0,120
003BB0  3  00 7E 81 C3  
003BB4  3  81 BD CB 8D  
003BCC  3  80 07 00 00          .byte 128,7,0,0,128,31,224,112,96,111,114,227,114,227,246,240,246,255,244,255,116,239,224,112,224,127,128,31,0,0,0,30
003BD0  3  80 1F E0 70  
003BD4  3  60 6F 72 E3  
003BEC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
003BF0  3  00 00 00 00  
003BF4  3  00 00 00 00  
003C0C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
003C10  3  00 00 00 00  
003C14  3  00 00 00 00  
003C2C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
003C30  3  00 00 00 00  
003C34  3  00 00 00 00  
003C4C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
003C50  3  00 00 00 00  
003C54  3  00 00 00 00  
003C6C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,222,255,255
003C70  3  00 00 00 00  
003C74  3  00 00 00 00  
003C8C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,247,255,255
003C90  3  00 00 00 00  
003C94  3  00 00 00 00  
003CAC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,253,255,255
003CB0  3  00 00 00 00  
003CB4  3  00 00 00 00  
003CCC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,255,255,255
003CD0  3  00 00 00 00  
003CD4  3  00 00 00 00  
003CEC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,128,95,222,255,255
003CF0  3  00 00 00 00  
003CF4  3  00 00 00 00  
003D0C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,224,151,247,255,255
003D10  3  00 00 00 00  
003D14  3  00 00 00 00  
003D2C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,248,229,253,255,255
003D30  3  00 00 00 00  
003D34  3  00 00 00 00  
003D4C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,121,127,255,255
003D50  3  00 00 00 00  
003D54  3  00 00 00 00  
003D6C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,128,79,204,127,222,255,255
003D70  3  00 00 00 00  
003D74  3  00 00 00 00  
003D8C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,224,19,243,159,247,255,255
003D90  3  00 00 00 00  
003D94  3  00 00 00 00  
003DAC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,248,196,252,231,253,255,255
003DB0  3  00 00 00 00  
003DB4  3  00 00 00 00  
003DCC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,49,63,121,255,255,255
003DD0  3  00 00 00 00  
003DD4  3  00 00 00 00  
003DEC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,63,128,79,204,79,214,63,158,255,255
003DF0  3  00 00 00 00  
003DF4  3  00 00 00 00  
003E0C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,128,15,224,19,243,147,245,143,231,255,255
003E10  3  00 00 00 00  
003E14  3  00 00 00 00  
003E2C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,3,248,196,252,100,253,227,249,255,255
003E30  3  00 00 00 00  
003E34  3  00 00 00 00  
003E4C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,254,49,63,89,63,120,254,255,255
003E50  3  00 00 00 00  
003E54  3  00 00 00 00  
003E6C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,128,17,128,145,32,72,64,72,204,109,214,127,222,63,140,255,255
003E70  3  00 00 00 00  
003E74  3  00 00 00 00  
003E8C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,32,4,96,36,72,18,16,18,51,155,117,159,247,15,227,255,255
003E90  3  00 00 00 00  
003E94  3  00 00 00 00  
003EAC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,8,1,24,9,18,4,132,196,140,102,221,231,253,195,248,255,255
003EB0  3  00 00 00 00  
003EB4  3  00 00 00 00  
003ECC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,70,130,68,1,33,49,35,89,183,121,255,48,254,255,255
003ED0  3  00 00 00 00  
003ED4  3  00 00 00 00  
003EEC  3  00 00 00 00          .byte 0,0,0,0,128,0,0,0,0,64,0,64,0,0,0,12,0,4,0,33,0,17,0,19,128,90,113,158,63,140,255,255
003EF0  3  80 00 00 00  
003EF4  3  00 40 00 40  
003F0C  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0,0,16,0,16,0,0,0,3,0,1,64,8,64,4,192,4,160,22,156,103,15,227,255,255
003F10  3  20 00 00 00  
003F14  3  00 10 00 10  
003F2C  3  00 00 00 00          .byte 0,0,0,0,8,0,0,0,0,4,0,4,0,0,192,0,64,0,16,2,16,1,48,1,168,5,231,25,195,248,255,255
003F30  3  08 00 00 00  
003F34  3  00 04 00 04  
003F4C  3  00 00 00 00          .byte 0,0,0,0,2,0,0,0,0,1,0,1,0,0,48,0,16,0,132,0,68,0,76,0,106,1,121,198,48,254,255,255
003F50  3  02 00 00 00  
003F54  3  00 01 00 01  
003F6C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,4,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,19,127,222,255,255
003F70  3  00 00 00 00  
003F74  3  00 04 00 08  
003F8C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,4,159,247,255,255
003F90  3  00 00 00 00  
003F94  3  00 01 00 02  
003FAC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,64,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,48,1,231,253,255,255
003FB0  3  00 00 00 00  
003FB4  3  40 00 80 00  
003FCC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,76,0,121,255,255,255
003FD0  3  00 00 00 00  
003FD4  3  10 00 20 00  
003FEC  3  7F FE C0 03          .byte 127,254,192,3,160,153,176,77,152,37,172,1,150,65,171,33,181,145,186,201,189,101,158,177,175,89,183,173,192,3,127,254
003FF0  3  A0 99 B0 4D  
003FF4  3  98 25 AC 01  
00400C  3  9F FF F0 00          .byte 159,255,240,0,104,38,108,19,102,9,107,0,101,144,106,200,109,100,110,178,111,89,103,172,107,214,109,235,240,0,159,255
004010  3  68 26 6C 13  
004014  3  66 09 6B 00  
00402C  3  E7 FF 3C 00          .byte 231,255,60,0,154,9,219,4,89,130,26,192,25,100,26,178,27,89,155,172,91,214,25,235,154,245,219,122,60,0,231,255
004030  3  9A 09 DB 04  
004034  3  59 82 1A C0  
00404C  3  F9 FF 0F 00          .byte 249,255,15,0,102,130,54,193,150,96,6,176,6,89,134,172,70,214,38,235,150,245,198,122,102,189,182,222,15,0,249,255
004050  3  66 82 36 C1  
004054  3  96 60 06 B0  
00406C  3  00 00 00 00          .byte 0,0,0,0,0,8,0,0,0,8,0,4,0,8,0,4,0,2,0,5,0,2,0,33,0,66,0,36,0,66,0,36
004070  3  00 08 00 00  
004074  3  00 08 00 04  
00408C  3  00 00 00 00          .byte 0,0,0,0,0,2,0,0,0,2,0,1,0,2,0,1,128,0,64,1,128,0,64,8,128,16,0,9,128,16,0,9
004090  3  00 02 00 00  
004094  3  00 02 00 01  
0040AC  3  00 00 00 00          .byte 0,0,0,0,128,0,0,0,128,0,64,0,128,0,64,0,32,0,80,0,32,0,16,2,32,4,64,2,32,4,64,2
0040B0  3  80 00 00 00  
0040B4  3  80 00 40 00  
0040CC  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0,32,0,16,0,32,0,16,0,8,0,20,0,8,0,132,0,8,1,144,0,8,1,144,0
0040D0  3  20 00 00 00  
0040D4  3  20 00 10 00  
0040EC  3  00 00 00 00          .byte 0,0,0,0,0,2,0,0,0,2,0,4,0,2,0,4,0,10,0,84,0,8,0,84,0,136,0,68,0,34,0,68
0040F0  3  00 02 00 00  
0040F4  3  00 02 00 04  
00410C  3  00 00 00 00          .byte 0,0,0,0,128,0,0,0,128,0,0,1,128,0,0,1,128,2,0,21,0,2,0,21,0,34,0,17,128,8,0,17
004110  3  80 00 00 00  
004114  3  80 00 00 01  
00412C  3  00 00 00 00          .byte 0,0,0,0,32,0,0,0,32,0,64,0,32,0,64,0,160,0,64,5,128,0,64,5,128,8,64,4,32,2,64,4
004130  3  20 00 00 00  
004134  3  20 00 40 00  
00414C  3  00 00 00 00          .byte 0,0,0,0,8,0,0,0,8,0,16,0,8,0,16,0,40,0,80,1,32,0,80,1,32,2,16,1,136,0,16,1
004150  3  08 00 00 00  
004154  3  08 00 10 00  
00416C  3  03 80 03 80          .byte 3,128,3,128,1,128,3,128,3,128,3,128,3,0,3,0,3,128,3,128,3,128,3,128,1,128,3,128,3,128,3,128
004170  3  01 80 03 80  
004174  3  03 80 03 80  
00418C  3  00 E0 00 E0          .byte 0,224,0,224,0,96,0,224,0,224,0,224,0,192,0,192,0,224,0,224,0,224,0,224,0,96,0,224,0,224,0,224
004190  3  00 60 00 E0  
004194  3  00 E0 00 E0  
0041AC  3  00 38 00 38          .byte 0,56,0,56,0,24,0,56,0,56,0,56,0,48,0,48,0,56,0,56,0,56,0,56,0,24,0,56,0,56,0,56
0041B0  3  00 18 00 38  
0041B4  3  00 38 00 38  
0041CC  3  00 0E 00 0E          .byte 0,14,0,14,0,6,0,14,0,14,0,14,0,12,0,12,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14
0041D0  3  00 06 00 0E  
0041D4  3  00 0E 00 0E  
0041EC  3  07 E0 07 E0          .byte 7,224,7,224,7,224,3,224,3,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,192,7,224,7,224
0041F0  3  07 E0 03 E0  
0041F4  3  03 E0 07 E0  
00420C  3  01 F8 01 F8          .byte 1,248,1,248,1,248,0,248,0,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,240,1,248,1,248
004210  3  01 F8 00 F8  
004214  3  00 F8 01 F8  
00422C  3  00 7E 00 7E          .byte 0,126,0,126,0,126,0,62,0,62,0,126,0,126,0,126,0,126,0,126,0,126,0,126,0,126,0,124,0,126,0,126
004230  3  00 7E 00 3E  
004234  3  00 3E 00 7E  
00424C  3  80 1F 80 1F          .byte 128,31,128,31,128,31,128,15,128,15,128,31,128,31,128,31,128,31,128,31,128,31,128,31,128,31,0,31,128,31,128,31
004250  3  80 1F 80 0F  
004254  3  80 0F 80 1F  
00426C  3  1F F8 1F F0          .byte 31,248,31,240,31,240,31,248,31,248,15,248,31,248,31,248,31,248,31,240,31,248,31,248,15,248,15,248,31,248,31,248
004270  3  1F F0 1F F8  
004274  3  1F F8 0F F8  
00428C  3  07 FE 07 FC          .byte 7,254,7,252,7,252,7,254,7,254,3,254,7,254,7,254,7,254,7,252,7,254,7,254,3,254,3,254,7,254,7,254
004290  3  07 FC 07 FE  
004294  3  07 FE 03 FE  
0042AC  3  81 FF 01 FF          .byte 129,255,1,255,1,255,129,255,129,255,128,255,129,255,129,255,129,255,1,255,129,255,129,255,128,255,128,255,129,255,129,255
0042B0  3  01 FF 81 FF  
0042B4  3  81 FF 80 FF  
0042CC  3  E0 7F C0 7F          .byte 224,127,192,127,192,127,224,127,224,127,224,63,224,127,224,127,224,127,192,127,224,127,224,127,224,63,224,63,224,127,224,127
0042D0  3  C0 7F E0 7F  
0042D4  3  E0 7F E0 3F  
0042EC  3               frmlst:
0042EC  3  00 04                .byte 0,4
0042EE  3  04 04                .byte 4,4
0042F0  3  08 04                .byte 8,4
0042F2  3  0C 03                .byte 12,3
0042F4  3  0F 03                .byte 15,3
0042F6  3  12 04                .byte 18,4
0042F8  3  16 03                .byte 22,3
0042FA  3  19 08                .byte 25,8
0042FC  3  21 01                .byte 33,1
0042FE  3  22 02                .byte 34,2
004300  3  24 03 27 00          .byte 36,3,39,0
004304  3               scdat:
004304  3  A9 01 D7 01          .word 425,471,436,372,323,381,312,298,276,343,255,305,230,299,292,268,350,320,349,203,222,352,366,303,202,225
004308  3  B4 01 74 01  
00430C  3  43 01 7D 01  
004338  3  EC 00 7E 01          .word 236,382
00433C  3  02 02 01 01          .byte 2,2,1,1,1,3,1,3,3,2,255,1,4,2,2,1,1,6,2,1,1,1,2,1,3,3,2,1,14,16,16,15,1
004340  3  01 03 01 03  
004344  3  03 02 FF 01  
00435D  3  FF 03 04 01          .byte 255,3,4,1,14,16,16,0,16,0,16,255,0,5,15,1,2,8,3,2,0,17,16,0,15,2,3,1,14,16,0,17,16
004361  3  0E 10 10 00  
004365  3  10 00 10 FF  
00437E  3  4A 10 00 4B          .byte 74,16,0,75,255,0,6,16,15,1,3,0,0,0,17,0,0,15,1,14,0,75,0,0,16,0,17,255,0,7,74,16,76
004382  3  FF 00 06 10  
004386  3  0F 01 03 00  
00439F  3  02 02 FF 00          .byte 2,2,255,0,7,16,255,0,5,17,255,0,10,17,0,1,3,255,13,4,0,0,0,16,76,255,0,17,1,1,1,14,255,0,4
0043A3  3  07 10 FF 00  
0043A7  3  05 11 FF 00  
0043C2  3  4A 10 FF 00          .byte 74,16,255,0,18,2,1,1,255,0,6,17,255,0,8,13,13,255,0,7,4,24,25,1,255,0,8,13,13,13,21,22,0,0
0043C6  3  12 02 01 01  
0043CA  3  FF 00 06 11  
0043E4  3  02 01 10 FF          .byte 2,1,16,255,0,7,28,28,1,255,0,8,17,0,0,21,22,0,0,1,3,2,0,0,0,19,19,0,0,28,28,1,13,13,13
0043E8  3  00 07 1C 1C  
0043EC  3  01 FF 00 08  
004407  3  FF 00 08 15          .byte 255,0,8,21,22,0,0,1,3,1,0,0,0,13,13,13,4,24,25,3,8,1,1,13,13,255,0,6,21,22,0,0,2
00440B  3  16 00 00 01  
00440F  3  03 01 00 00  
004428  3  03 01 FF 00          .byte 3,1,255,0,5,16,15,7,3,2,14,17,16,255,0,8,21,22,0,13,1,3,1,255,0,5,17,0,15,1,1,0,0
00442C  3  05 10 0F 07  
004430  3  03 02 0E 11  
004449  3  11 FF 00 05          .byte 17,255,0,5,255,13,6,2,1,3,2,255,0,8,1,1,255,0,8,15,1,2,5,1,2,1,3,1,14,255,0,8,1
00444D  3  FF 0D 06 02  
004451  3  01 03 02 FF  
00446A  3  02 FF 00 0A          .byte 2,255,0,10,6,1,24,25,18,6,18,9,10,255,0,7,2,1,255,0,5,13,13,13,6,0,15,2,77,78,1,14,0,0
00446E  3  06 01 18 19  
004472  3  12 06 12 09  
00448C  3  0B FF 00 04          .byte 11,255,0,4,19,19,0,1,1,255,0,4,13,7,2,1,13,54,54,2,77,78,2,18,10,0,11,255,0,4,19,19,13
004490  3  13 13 00 01  
004494  3  01 FF 00 04  
0044AD  3  01 01 00 0D          .byte 1,1,0,13,13,13,1,2,3,3,2,54,54,2,24,25,1,0,11,0,11,255,0,4,13,13,5,3,1,13,1,2,1
0044B1  3  0D 0D 01 02  
0044B5  3  03 03 02 36  
0044CE  3  03 03 03 02          .byte 3,3,3,2,2,0,0,1,77,78,1,0,11,0,11,0,0,13,13,1,3,3,1
0044D2  3  02 00 00 01  
0044D6  3  4D 4E 01 00  
0044E5  3  FF 03 05 01          .byte 255,3,5,1,3,1,1,17,0,0,1,77,78,2,0,11,0,11,0,0,6,1,1,8,255,3,4,1,23,23,3,3,3
0044E9  3  03 01 01 11  
0044ED  3  00 00 01 4D  
004506  3  02 10 4C 11          .byte 2,16,76,17,2,24,25,1,0,12,18,11,0,0,0,2,1,3,23,23,1,3,3,3,23,23,23,3,1,16,75,1,3
00450A  3  02 18 19 01  
00450E  3  00 0C 12 0B  
004527  3  0C 0A 01 00          .byte 12,10,1,0,0,0,11,0,0,0,2,3,23,23,0,1,2,1,1,23,0,23,1,3,1,16,2,3,3,11,14,0,0,0
00452B  3  00 00 0B 00  
00452F  3  00 00 02 03  
004549  3  0B 00 00 00          .byte 11,0,0,0,1,3,23,255,0,4,15,1,2,23,23,23,3,1,2,2,3,1,11,255,0,4,11,13,13,13,2,3,23,23
00454D  3  01 03 17 FF  
004551  3  00 04 0F 01  
00456B  3  FF 00 04 11          .byte 255,0,4,17,1,3,3,23,2,3,3,1,3,1,12,9,9,9,18,13,2,1,1,3,23,23,255,0,6,15,1,255,3,6
00456F  3  01 03 03 17  
004573  3  02 03 03 01  
00458D  3  07 02 FF 00          .byte 7,2,255,0,5,1,1,3,3,23,0,0,23,255,0,6,19,19,3,3,3,1,1,1,14,255,0,5,2,3,3,23,0
004591  3  05 01 01 03  
004595  3  03 17 00 00  
0045AE  3  36 36 FF 00          .byte 54,54,255,0,9,1,1,1,14,17,16,76,255,0,5,1,3,23,0,23,54,54,23,0,255,13,5,8,1,1,0,16,0,0
0045B2  3  09 01 01 01  
0045B6  3  0E 11 10 4C  
0045D0  3  10 FF 00 06          .byte 16,255,0,6,2,3,23,0,0,23,23,3,23,1,2,2,2,1,1,2,0,0,16,0,0,17,255,0,5,17,1,1,23,23,23
0045D4  3  02 03 17 00  
0045D8  3  00 17 17 03  
0045F3  3  03 03 01 03          .byte 3,3,1,3,3,2,1,1,14,16,16,76,0,17,255,0,6,13,13,13,1,3,3,23,3,1,255,3,4,1,1,14,74
0045F7  3  03 02 01 01  
0045FB  3  0E 10 10 4C  
004614  3  10 4B FF 00          .byte 16,75,255,0,9,15,1,2,1,3,1,3,1,1,2,1,2,3,6,1,0,0,17,255,0,4,13,13,13,255,0,4,11
004618  3  09 0F 01 02  
00461C  3  01 03 01 03  
004635  3  07 01 02 01          .byte 7,1,2,1,1,0,17,11,0,0,1,2,14,255,0,7,2,1,1,255,0,4,12,9,26,24,25,26,9,18,11,18,9
004639  3  01 00 11 0B  
00463D  3  00 00 01 02  
004656  3  FF 00 08 0D          .byte 255,0,8,13,13,1,5,2,13,17,255,0,5,29,29,0,0,0,11,255,0,9,17,2,1,2,3,3,1,13,13,19,19
00465A  3  0D 01 05 02  
00465E  3  0D 11 FF 00  
004677  3  00 00 1D 1D          .byte 0,0,29,29,0,0,0,11,255,0,8,13,13,1,255,3,5,2,1,13,13,13,26,24,25,26,255,13,11,2,1,1,255,3,6
00467B  3  00 00 00 0B  
00467F  3  FF 00 08 0D  
00469A  3  07 FF 01 04          .byte 7,255,1,4,2,2,255,1,5,2,1,2,2,1,2,1,1,3,3,6,255,3,6,2,255,3,4,1,3,3,3,2,1
00469E  3  02 02 FF 01  
0046A2  3  05 02 01 02  
0046BB  3  03                   .byte 3
0046BC  3  FF 00 05 17          .byte 255,0,5,23,3,3,2,1,1,21,22,1,1,2,1,1,21,22,1,1,1,2,3,23,5,23,255,0,4,23,23,3,1
0046C0  3  03 03 02 01  
0046C4  3  01 15 16 01  
0046DD  3  0E 00 00 15          .byte 14,0,0,21,22,15,14,16,15,1,21,22,17,16,15,1,1,3,23,3,255,0,4,23,3,3,1,0,0,0,21,22,0
0046E1  3  16 0F 0E 10  
0046E5  3  0F 01 15 16  
0046FE  3  4A 10 00 02          .byte 74,16,0,2,21,22,0,16,76,15,2,1,3,1,255,0,5,23,3,2,0,0,0,21,22,0,0,17,0,1,21,22,74
004702  3  15 16 00 10  
004706  3  4C 0F 02 01  
00471F  3  10 00 00 10          .byte 16,0,0,16,15,1,2,255,0,4,23,23,1,14,0,0,0,21,22,255,0,4,8,21,22,0,17,0,0,17,0,16,255,0,5
004723  3  0F 01 02 FF  
004727  3  00 04 17 17  
004742  3  17 03 01 4B          .byte 23,3,1,75,0,0,0,21,22,255,0,4,2,21,22,255,0,6,75,255,0,4,23,3,3,2,1,0,0,0,21,22,255,0,4
004746  3  00 00 00 15  
00474A  3  16 FF 00 04  
004765  3  01 15 16 FF          .byte 1,21,22,255,0,12,23,3,1,14,0,0,0,21,22,255,0,4,1,13,13,17,255,0,11,23,3,1,17,0,0,0,21
004769  3  00 0C 17 03  
00476D  3  01 0E 00 00  
004786  3  16 FF 00 05          .byte 22,255,0,5,2,1,13,13,255,0,9,23,23,3,8,1,13,21,22,13,13,255,0,5,16,1,1,2,255,13,6,0,0,0
00478A  3  02 01 0D 0D  
00478E  3  FF 00 09 17  
0047A8  3  17 03 03 03          .byte 23,3,3,3,2,1,21,22,16,76,255,0,5,16,15,1,7,1,2,1,1,2,1,255,0,4,23,3,1,1,14,21,22
0047AC  3  02 01 15 16  
0047B0  3  10 4C FF 00  
0047C9  3  11 FF 00 06          .byte 17,255,0,6,17,0,0,1,3,3,1,3,3,3,255,0,4,23,3,1,14,0,21,22,255,0,10,15,1,1,23,23,23
0047CD  3  11 00 00 01  
0047D1  3  03 03 01 03  
0047EA  3  03 00 00 00          .byte 3,0,0,0,23,3,3,2,0,0,21,22,255,0,12,15,5,3,1,3,255,0,4,23,3,1,17,0,21,22,255,0,13
0047EE  3  17 03 03 02  
0047F2  3  00 00 15 16  
00480B  3  0F 01 01 01          .byte 15,1,1,1,255,0,4,23,3,1,16,0,21,22,255,0,21,23,3,1,2,0,21,22,0,38,38,255,0,4,38,38,255,0,11
00480F  3  FF 00 04 17  
004813  3  03 01 10 00  
00482E  3  17 17 03 07          .byte 23,23,3,7,1,17,21,22,31,38,38,31,0,0,0,38,38,31,31,255,0,9,23,3,23,3,1,13,13,13,255,20,4
004832  3  01 11 15 16  
004836  3  1F 26 26 1F  
00484F  3  0D 0D 0D FF          .byte 13,13,13,255,20,4,255,13,6,255,0,4,23,23,3,3,1,2,255,1,5,2,1,1,8,255,1,4,2,7,1,2,1
004853  3  14 04 FF 0D  
004857  3  06 FF 00 04  
004870  3  17 03 01 01          .byte 23,3,1,1,3,1,3,3,1,2,2,1,1,2,1,1,7,1,1,255,3,4,1,2,1,1,3,23,1,1,16,1,3,3
004874  3  03 01 03 03  
004878  3  01 02 02 01  
004892  3  01 01 0E 00          .byte 1,1,14,0,16,0,0,16,76,0,0,0,1,2,1,8,1,14,15,2,1,3,2,14,16,15,2,1,14,0,0,74,16
004896  3  10 00 00 10  
00489A  3  4C 00 00 00  
0048B3  3  00 00 11 FF          .byte 0,0,17,255,0,4,16,15,1,17,16,76,0,15,1,1,1,0,16,76,16,255,0,5,75,255,0,7,17,0,1,0,17
0048B7  3  00 04 10 0F  
0048BB  3  01 11 10 4C  
0048D4  3  FF 00 04 01          .byte 255,0,4,1,14,74,16,0,17,255,0,15,1,255,0,6,1,0,0,17,255,0,17,2,1,21,22,13,13,13,1,255,0,13
0048D8  3  0E 4A 10 00  
0048DC  3  11 FF 00 0F  
0048F6  3  0D 0D 0D FF          .byte 13,13,13,255,0,6,21,22,15,2,3,2,255,0,13,7,1,1,255,0,6,21,22,0,1,7,1,255,0,6,13,13,13
0048FA  3  00 06 15 16  
0048FE  3  0F 02 03 02  
004917  3  FF 00 04 01          .byte 255,0,4,1,3,1,255,0,6,21,22,0,15,1,1,255,0,13,1,3,8,255,0,6,21,22,0,0,1,1,13,13,255,0,11
00491B  3  03 01 FF 00  
00491F  3  06 15 16 00  
00493A  3  02 03 01 FF          .byte 2,3,1,255,0,6,21,22,0,0,1,1,14,255,0,12,1,3,1,255,0,8,13,13,1,2,255,0,13,1,1,1,255,0,9
00493E  3  00 06 15 16  
004942  3  00 00 01 01  
00495D  3  0F 02 07 FF          .byte 15,2,7,255,13,6,255,0,7,1,2,1,13,13,255,0,8,1,1,17,6,0,0,6,255,0,8,1,3,2,14,255,0,9
004961  3  0D 06 FF 00  
004965  3  07 01 02 01  
00497F  3  01 01 0D FF          .byte 1,1,13,255,0,9,13,13,13,1,3,1,255,0,7,13,13,13,2,3,8,13,255,0,10,15,8,1,1,255,0,9,15
004983  3  00 09 0D 0D  
004987  3  0D 01 03 01  
0049A0  3  01 17 03 01          .byte 1,23,3,1,13,17,255,0,9,1,3,2,17,255,0,8,17,1,0,23,3,1,255,13,4,255,0,5,17,1,3,1,16
0049A4  3  0D 11 FF 00  
0049A8  3  09 01 03 02  
0049C1  3  00 00 00 11          .byte 0,0,0,17,255,13,5,1,0,23,23,3,1,5,1,2,13,13,13,21,22,13,1,23,3,13,21,22,13,13,255,1,4
0049C5  3  FF 0D 05 01  
0049C9  3  00 17 17 03  
0049E2  3  02 01                .byte 2,1
0049E4  3  FF 00 07 03          .byte 255,0,7,3,1,21,22,1,3,23,255,0,21,3,1,21,22,1,3,23,255,0,20,23,3,1,21,0,2,3,3,23,255,0,18
0049E8  3  01 15 16 01  
0049EC  3  03 17 FF 00  
004A07  3  17 03 01 0E          .byte 23,3,1,14,0,0,15,1,2,1,3,23,23,255,0,14,23,3,1,1,255,0,4,74,16,15,2,1,7,3,3,23,255,0,8
004A0B  3  00 00 0F 01  
004A0F  3  02 01 03 17  
004A2A  3  17 17 03 02          .byte 23,23,3,2,1,2,14,255,0,5,16,76,0,15,1,2,1,1,3,23,23,0,23,0,0,3,1,1,2,14,16,0,0,0
004A2E  3  01 02 0E FF  
004A32  3  00 05 10 4C  
004A4C  3  13 13 00 00          .byte 19,19,0,0,17,255,0,4,16,15,1,2,1,1,3,3,23,23,1,14,0,17,0,17,0,0,0,13,13,255,0,7,17
004A50  3  11 FF 00 04  
004A54  3  10 0F 01 02  
004A6D  3  00 00 00 0F          .byte 0,0,0,15,1,1,2,2,1,255,0,42,13,13,255,0,12,255,13,8,17,255,0,19,3,5,1,1,2,1,1,2,13,13
004A71  3  01 01 02 02  
004A75  3  01 FF 00 2A  
004A8F  3  FF 00 12 17          .byte 255,0,18,23,255,3,7,5,2,13,13,13,0,0,0,21,22,255,13,10,255,0,4,23,0,0,23,23,3,3,3,2,0,0,0
004A93  3  FF 03 07 05  
004A97  3  02 0D 0D 0D  
004AB2  3  15 16 FF 01          .byte 21,22,255,1,5,2,1,1,2,1,255,0,9,23,23,3,1,0,0,0,21,22,2,3,3,3,23,3,3,23,23,3,255,0,10
004AB6  3  05 02 01 01  
004ABA  3  02 01 FF 00  
004AD5  3  17 03 01 00          .byte 23,3,1,0,0,0,21,22,1,3,23,23,0,0,23,0,0,23,255,0,11,3,2,13,13,0,21,22,1,8,23,255,0,8
004AD9  3  00 00 15 16  
004ADD  3  01 03 17 17  
004AF7  3  36 36 FF 00          .byte 54,54,255,0,7,23,3,1,14,0,0,21,22,1,3,255,0,9,54,54,255,0,8,3,1,0,0,0,21,22,2,3,23
004AFB  3  07 17 03 01  
004AFF  3  0E 00 00 15  
004B18  3  FF 00 12 03          .byte 255,0,18,3,1,21,22,13,13,13,1,3,255,0,8
004B1C  3  01 15 16 0D  
004B20  3  0D 0D 01 03  
004B27  3  FF 00 0A 17          .byte 255,0,10,23,3,1,21,22,1,1,1,3,3,23,23,0,0,3,3,23,3,255,0,11,3,1,21,22,0,15,255,1,5
004B2B  3  03 01 15 16  
004B2F  3  01 01 01 03  
004B48  3  08 FF 01 05          .byte 8,255,1,5,18,9,9,10,255,0,7,23,1,21,22,0,0,0,16,17,255,0,4,16,76,255,0,5,11,255,0,7,23
004B4C  3  12 09 09 0A  
004B50  3  FF 00 07 17  
004B69  3  01 15 16 00          .byte 1,21,22,0,0,0,17,255,0,5,17,255,0,6,11,255,0,8,1,21,22,255,0,16,11,255,0,7,23,1,13,13,19,19
004B6D  3  00 00 11 FF  
004B71  3  00 05 11 FF  
004B8B  3  11 FF 00 07          .byte 17,255,0,7,17,255,0,5,11,255,0,7,23,3,1,1,255,13,6,0,255,13,6,0,0,0,11,255,0,9,23,3,1,1
004B8F  3  11 FF 00 05  
004B93  3  0B FF 00 07  
004BAD  3  07 01 01 10          .byte 7,1,1,16,0,15,1,1,3,3,1,0,0,0,12,255,9,5,10,255,0,6,23,23,3,1,17,0,75,1,3,255,23,4
004BB1  3  00 0F 01 01  
004BB5  3  03 03 01 00  
004BCF  3  FF 00 08 0B          .byte 255,0,8,11,0,0,23,255,0,5,1,17,40,39,16,17,1,23,0,0,23,23,0,23,0,0,23,23,3,11,24,25,1
004BD3  3  00 00 17 FF  
004BD7  3  00 05 01 11  
004BF0  3  03 00 17 00          .byte 3,0,23,0,23,1,16,40,40,16,16,1,0,0,0,255,3,4,2,1,1,3,1,12,77,78,15,1,3,0,0,0,3
004BF4  3  17 01 10 28  
004BF8  3  28 10 10 01  
004C11  3  01 0D 0D 01          .byte 1,13,13,1,1,3,0,0,0,1,2,1,1,14,16,16,1,14,17,24,25,0,16,1,255,0,4,23,3,3,23,23,255,0,5
004C15  3  01 03 00 00  
004C19  3  00 01 02 01  
004C34  3  10 00 00 4A          .byte 16,0,0,74,16,17,0,0,0,38,38,0,17,1,23,255,0,12,18,17,18,10,0,17,255,0,4,38,38,0,0,2,23
004C38  3  10 11 00 00  
004C3C  3  00 26 26 00  
004C55  3  FF 00 0F 0B          .byte 255,0,15,11,255,0,6,34,35,0,0,1,23,255,0,15,11,0,0,0,19,19,37,32,33,36,0,7,255,0,13,255,13,14
004C59  3  FF 00 06 22  
004C5D  3  23 00 00 01  
004C77  3  17 17 FF 00          .byte 23,23,255,0,9,54,54,0,2,1,1,3,3,1,5,2,1,3,1,1,3,0,23,255,0,10,54,54,0,23,23,3,3
004C7B  3  09 36 36 00  
004C7F  3  02 01 01 03  
004C98  3  17 00 17 17          .byte 23,0,23,23,3,23,23,0,23,255,0,15
004C9C  3  03 17 17 00  
004CA0  3  17 FF 00 0F  
004CA4  3  00 00 00 17          .byte 0,0,0,23,3,1,0,0,45,255,0,7,8,255,5,5,8,255,0,8,3,1,14,255,0,12,43,6,42,255,0,6,45
004CA8  3  03 01 00 00  
004CAC  3  2D FF 00 07  
004CC5  3  00 00 00 03          .byte 0,0,0,3,1,75,255,0,4,46,255,0,8,5,0,46,255,0,10,8,1,255,0,25,23,3,1,19,19,255,0,11,5
004CC9  3  01 4B FF 00  
004CCD  3  04 2E FF 00  
004CE6  3  FF 00 08 17          .byte 255,0,8,23,23,0,23,3,1,255,5,4,8,0,46,255,0,15,3,3,23,3,1,14,0,0,0,43,5,255,0,8,7
004CEA  3  17 00 17 03  
004CEE  3  01 FF 05 04  
004D07  3  FF 00 08 FF          .byte 255,0,8,255,1,4,14,0,0,0,45,0,5,255,0,18,16,15,14,0,0,0,46,0,0,5,255,0,18,17,255,0,8
004D0B  3  01 04 0E 00  
004D0F  3  00 00 2D 00  
004D28  3  05 05 07 FF          .byte 5,5,7,255,0,13,46,255,0,11,5,42,255,0,26,5,45,255,0,7,7,5,5,5,255,0,5,255,13,4,5,5,7
004D2C  3  00 0D 2E FF  
004D30  3  00 0B 05 2A  
004D49  3  00 00 00 07          .byte 0,0,0,7,255,0,5,7,5,5,42,0,43,7,255,0,5,1,2,1,255,0,17,41,19,8,8,255,0,4,3,7,1
004D4D  3  FF 00 05 07  
004D51  3  05 05 2A 00  
004D6A  3  FF 00 11 29          .byte 255,0,17,41,41,7,42,255,0,4,23,3,3,13,0,0,7,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,5
004D6E  3  29 07 2A FF  
004D72  3  00 04 17 03  
004D8B  3  00 00 00 11          .byte 0,0,0,17,0,0,23,3,1,0,0,38,38,255,0,12,38,38,0,0,17,1,1,2,0,0,3,2,31,31,38,38,255,31,12
004D8F  3  00 00 17 03  
004D93  3  01 00 00 26  
004DAE  3  26 26 1F 1F          .byte 38,38,31,31,2,2,7,3,0,3,3,1,255,20,20,1,3,23,23,0,23,3,1,1,1,2,1,2,1,1,2,255,1,4
004DB2  3  02 02 07 03  
004DB6  3  00 03 03 01  
004DD0  3  02 01 01 05          .byte 2,1,1,5,1,1,1,2,1,3,23,0
004DD4  3  01 01 01 02  
004DD8  3  01 03 17 00  
004DDC  3  03 17 03 17          .byte 3,23,3,23,23,3,3,23,23,3,23,255,0,8,23,3,3,23,23,3,8,3,23,1,1,2,2,1,8,1,1,1,2
004DE0  3  17 03 03 17  
004DE4  3  17 03 17 FF  
004DFD  3  01 03 17 FF          .byte 1,3,23,255,0,4,23,3,255,1,4,2,1,1,2,1,0,16,0,17,0,0,0,16,76,0,15,1,3,255,0,4,3
004E01  3  00 04 17 03  
004E05  3  FF 01 04 02  
004E1E  3  02 0E 10 00          .byte 2,14,16,0,0,74,16,17,15,1,0,17,255,0,5,17,0,0,0,15,1,23,0,0,0,1,14,0,75,0,0,0,17
004E22  3  00 4A 10 11  
004E26  3  0F 01 00 11  
004E3F  3  00 00 01 FF          .byte 0,0,1,255,0,11,17,1,3,23,0,23,1,0,40,40,255,0,7,17,255,0,8,38,0,13,1,23,0,0,0,1,17
004E43  3  00 0B 11 01  
004E47  3  03 17 00 17  
004E60  3  FF 00 07 11          .byte 255,0,7,17,0,255,13,5,0,0,255,13,4,1,3,255,0,4,23,1,13,13,0,0,255,13,5,1,1,2,1,1,0,0
004E64  3  00 FF 0D 05  
004E68  3  00 00 FF 0D  
004E82  3  02 01 03 01          .byte 2,1,3,1,3,23,255,0,5,3,7,2,0,0,1,1,2,3,1,3,23,3,3,2,0,0,1,3,23,23,255,0,8
004E86  3  03 17 FF 00  
004E8A  3  05 03 07 02  
004EA3  3  17 01 00 00          .byte 23,1,0,0,2,3,3,23,3,0,0,23,3,1,0,0,1,3,255,0,11,1,0,0,1,3,23,255,0,5,1,2,0,0
004EA7  3  02 03 03 17  
004EAB  3  03 00 00 17  
004EC5  3  01 17 FF 00          .byte 1,23,255,0,11,2,0,0,1,23,255,0,6,23,1,0,0,1,3,255,0,10,23,3,1,1,3,23,255,0,6,5,1
004EC9  3  0B 02 00 00  
004ECD  3  01 17 FF 00  
004EE6  3  00 00 01 17          .byte 0,0,1,23,255,0,11,23,3,0,23,255,0,6,23,3,1,1,2,3,0,23,255,0,21,23,3,3,23,255,0,161
004EEA  3  FF 00 0B 17  
004EEE  3  03 00 17 FF  
004F06  3  00 00 00 2D          .byte 0,0,0,45,255,0,10,44,255,0,8,7,5,21,22,5,255,0,25,21,22,255,0,12,46,255,0,10,45,0,0,21,22
004F0A  3  FF 00 0A 2C  
004F0E  3  FF 00 08 07  
004F27  3  08 FF 00 19          .byte 8,255,0,25,21,22,255,0,28,5,255,0,16,46,255,0,38,7,255,0,5,46,255,0,13,7,5,5,7,255,0,14,8
004F2B  3  15 16 FF 00  
004F2F  3  1C 05 FF 00  
004F48  3  05 05 08 FF          .byte 5,5,8,255,0,6,12,10,255,0,6,5,255,0,10,11,255,0,9,11,255,0,4,46,255,0,12,11,255,0,9,11,255,0,6
004F4C  3  00 06 0C 0A  
004F50  3  FF 00 06 05  
004F6B  3  FF 05 05 07          .byte 255,5,5,7,255,0,5,11,255,0,9,11,0,0,53,255,0,7,12,255,9,5,18,12,10,255,0,5,45,0,0,11,255,0,6
004F6F  3  FF 00 05 0B  
004F73  3  FF 00 09 0B  
004F8E  3  08 FF 00 09          .byte 8,255,0,9,45,0,11,255,0,6,46,0,11,255,0,10,17,255,0,7,11,255,0,8,11,0,0,53,0,0,0,7,0,0,0
004F92  3  2D 00 0B FF  
004F96  3  00 06 2E 00  
004FB1  3  10 FF 00 07          .byte 16,255,0,7,11,255,0,8,11,255,0,7,255,13,5,17,0,0,7,255,5,5,7,255,0,5,11,255,0,6,5,1,1
004FB5  3  0B FF 00 08  
004FB9  3  0B FF 00 07  
004FD2  3  02 01 01 0D          .byte 2,1,1,13,21,22,5,42,0,11,0,43,5,255,0,5,11,0,0,53,255,0,4,3,23,23,3,1,2,21,22,5,0,0
004FD6  3  15 16 05 2A  
004FDA  3  00 0B 00 2B  
004FF4  3  0C 09 09 05          .byte 12,9,9,5,18,9,9,10,0,11,255,0,6,6,0,0,0,23,3,1,21,22,8,255,0,5,8,21,22,7,5,5,5
004FF8  3  12 09 09 0A  
004FFC  3  00 0B FF 00  
005015  3  07 FF 00 05          .byte 7,255,0,5,5
005019  3  05           
00501A  3  17 17 03 17          .byte 23,23,3,23,3,1,21,22,8,5,0,5,0,5,7,21,22,7,255,0,9,8,3,2,1,1,2,14,21,22,255,0,5
00501E  3  03 01 15 16  
005022  3  08 05 00 05  
00503B  3  2B 05 15 16          .byte 43,5,21,22,255,0,11,2,1,14,16,0,0,21,22,255,0,6,5,21,22,255,0,5,45,255,0,4,5,1,2,0,17
00503F  3  FF 00 0B 02  
005043  3  01 0E 10 00  
00505C  3  00 2B 07 05          .byte 0,43,7,5,0,5,0,5,5,5,8,21,22,255,0,7,46,0,0,0,7,6,255,0,10,46,43,5,21,22,255,0,10
005060  3  00 05 00 05  
005064  3  05 05 08 15  
00507D  3  05 08 05 00          .byte 5,8,5,0,0,0,19,19,255,0,7,5,21,22,0,45,255,0,9,255,13,7,255,0,8,21,22,255,0,9,45,5,255,1,5
005081  3  00 00 13 13  
005085  3  FF 00 07 05  
0050A0  3  02 05 05 05          .byte 2,5,5,5,7,255,0,4,5,0,22,255,0,11,3,23,3,23,3,1,14,255,0,20,5,0,0,0,23,3,1,0,0
0050A4  3  07 FF 00 04  
0050A8  3  05 00 16 FF  
0050C1  3  2D FF 00 05          .byte 45,255,0,5,5,255,0,5,7,5,0,0,0,21,22,255,0,5,3,2,0,46,255,0,5,5,7,255,0,10,21,22,5
0050C5  3  05 FF 00 05  
0050C9  3  07 05 00 00  
0050E2  3  00 00 00 17          .byte 0,0,0,23,1,14,255,0,6,5,42,255,0,7,46,0,0,0,21,22,255,0,4,3,1,255,0,20,21,22,5,0,0
0050E6  3  01 0E FF 00  
0050EA  3  06 05 2A FF  
005103  3  17 01 0E FF          .byte 23,1,14,255,0,10,45,255,0,9,21,0,0,0,23,3,2,17,255,0,4,8,255,0,17,5,0,0,3,1,16,76,255,0,24
005107  3  00 0A 2D FF  
00510B  3  00 09 15 00  
005126  3  17 01 0D 00          .byte 23,1,13,0,0,0,38,38,0,0,7,0,5,0,5,0,5,0,5,7,38,38,0,0,0,5,0,54,54,1,1,31,31,31
00512A  3  00 00 26 26  
00512E  3  00 00 07 00  
005148  3  26 26 FF 1F          .byte 38,38,255,31,12,38,38,31,31,31,5,0,54,54,3,2,255,20,22,13,0,0,0,23,3,2,255,1,7,2,255,1,6
00514C  3  0C 26 26 1F  
005150  3  1F 1F 05 00  
005169  3  02 02 01 01          .byte 2,2,1,1,1,2,1,1
00516D  3  01 02 01 01  
005171  3  FF 2C 1C FF          .byte 255,44,28,255,0,33,46,255,0,26,45,255,0,7,19,19,255,0,10,46,0,0,0,8,7,5,5,0,8,0,5,8,0
005175  3  00 21 2E FF  
005179  3  00 1A 2D FF  
005192  3  05 00 07 05          .byte 5,0,7,5,0,6,0,8,5,0,5,0,7,5,0,5,0,8,43,54,54,42,255,0,11,39,38,255,0,10,44,0,54,54
005196  3  00 06 00 08  
00519A  3  05 00 05 00  
0051B4  3  FF 00 0B 2D          .byte 255,0,11,45,40,40,255,0,10,17,255,0,24,45,0,0,13,255,0,13,11,255,0,13,1,255,0,8,46,255,0,4,11
0051B8  3  28 28 FF 00  
0051BC  3  0A 11 FF 00  
0051D5  3  00 00 00 2D          .byte 0,0,0,45,255,0,5,46,0,0,0,1,255,0,13,11,255,0,13,1,255,0,13,11,255,0,13,1,255,0,12,11,11
0051D9  3  FF 00 05 2E  
0051DD  3  00 00 00 01  
0051F6  3  FF 00 0D 08          .byte 255,0,13,8,255,0,12,11,11,255,0,13,1,255,0,12,11,12,10,255,0,11,75,2,0,0,0,17,255,0,8,12,18
0051FA  3  FF 00 0C 0B  
0051FE  3  0B FF 00 0D  
005217  3  0B 0A FF 00          .byte 11,10,255,0,9,74,16,1,0,0,0,16,76,255,0,9,11,11,0,0,0,17,255,0,5,17,1,3,255,13,9,21,22
00521B  3  09 4A 10 01  
00521F  3  00 00 00 10  
005238  3  0D 0D 0D 18          .byte 13,13,13,24,25,255,13,10,1,3,1,2,1,1,1,5,1,1,1,21,22,2,1,1,77,78,1,2,1,1,7,1,1
00523C  3  19 FF 0D 0A  
005240  3  01 03 01 02  
005259  3  02 02 01 03          .byte 2,2,1,3,3,255,0,4,23,0,23,3,2,21,22,2,3,23,32,33,255,0,12
00525D  3  03 FF 00 04  
005261  3  17 00 17 03  
005270  3  0E FF 00 09          .byte 14,255,0,9,6,21,22,5,44,44,44,24,77,78,25,255,44,7,255,0,5,46,0,54,54,54,5,21,22,255,0,4,27
005274  3  06 15 16 05  
005278  3  2C 2C 2C 18  
005291  3  18 19 1B 00          .byte 24,25,27,0,0,0,45,255,0,5,45,255,0,4,54,54,54,5,21,22,255,0,5,30,30,255,0,15,54,54,54,7,21
005295  3  00 00 2D FF  
005299  3  00 05 2D FF  
0052B2  3  16 FF 00 05          .byte 22,255,0,5,30,30,0,0,19,19,255,0,14,43,5,5,7,0,0,7,27,24,25,27,7,5,5,7,5,8,5,255,0,7
0052B6  3  1E 1E 00 00  
0052BA  3  13 13 FF 00  
0052D4  3  2D 00 00 00          .byte 45,0,0,0,43,0,42,0,0,43,0,77,78,0,42,43,0,42,43,0,42,255,0,6,46,255,0,11,77,78,255,0,26
0052D8  3  2B 00 2A 00  
0052DC  3  00 2B 00 4D  
0052F5  3  18 19 00 00          .byte 24,25,0,0,45,255,0,18,46,0,0,0,37,32,33,36,255,0,4,46,255,0,17,44,0,0,38,38,255,0,16,75,255,0,9
0052F9  3  2D FF 00 12  
0052FD  3  2E 00 00 00  
005318  3  26 26 FF 00          .byte 38,38,255,0,16,16,76,255,0,8,38,38,255,0,15,74,16,255,0,9,38,38,255,0,15,17,16,255,0,9,38,38,255,0,15
00531C  3  10 10 4C FF  
005320  3  00 08 26 26  
00533B  3  10 10 4C FF          .byte 16,16,76,255,0,8,38,38,0,0,17,255,0,12,16,16,0,17,255,0,7,38,38,0,0,16,76,255,0,10,17,13,13
00533F  3  00 08 26 26  
005343  3  00 00 11 FF  
00535C  3  11 10 FF 00          .byte 17,16,255,0,7,38,38,0,17,16,255,0,5,255,13,7,1,1,255,13,8,66,67,67,65,255,13,7,1,1,1,3,1
005360  3  07 26 26 00  
005364  3  11 10 FF 00  
00537D  3  07 01 0E 0F          .byte 7,1,14,15,1,3,1,1,1,2,1,2,1,66,65,255,1,7,2,0,0,23,255,0,6,23,23,255,0,6,23,0,23
005381  3  01 03 01 01  
005385  3  01 02 01 02  
00539E  3  FF 00 08             .byte 255,0,8
0053A1  3  FF 2C 04 0F          .byte 255,44,4,15,255,1,4,2,1,14,0,44,0,15,2,1,3,23,0,0,0,23,23,3,3,1,255,0,6,15,14,0,16
0053A5  3  FF 01 04 02  
0053A9  3  01 0E 00 2C  
0053C2  3  11 FF 00 06          .byte 17,255,0,6,16,1,3,3,23,3,3,1,1,2,14,255,0,9,75,0,46,255,0,5,17,15,1,2,1,1,2,14,16,16
0053C6  3  10 01 03 03  
0053CA  3  17 03 03 01  
0053E4  3  FF 00 04 2E          .byte 255,0,4,46,255,0,16,17,16,45,0,0,17,16,76,255,0,5,46,255,0,15,17,255,0,4,75,255,0,25,46,255,0,12
0053E8  3  FF 00 10 11  
0053EC  3  10 2D 00 00  
005406  3  2D FF 00 0C          .byte 45,255,0,12,45,255,0,26,45,255,0,23,46,255,0,11,45,255,0,89,75,255,0,27,17,255,0,26,74,16,17,255,0,4
00540A  3  2D FF 00 1A  
00540E  3  2D FF 00 17  
005428  3  0D FF 00 15          .byte 13,255,0,21,16,16,76,0,38,38,5,38,38,255,0,16,17,0,0,13,13,31,31,38,38,5,38,38,31,31,13,13,255,0,4
00542C  3  10 10 4C 00  
005430  3  26 26 05 26  
00544B  3  11 00 00 00          .byte 17,0,0,0,255,13,7,1,1,255,20,4,5,255,20,4,1,2,255,13,8,1,1,1,3,1,7,1,14,15,1,3,1,1
00544F  3  FF 0D 07 01  
005453  3  01 FF 14 04  
00546D  3  06 02 01 02          .byte 6,2,1,2,1,3,8,255,1,7,2,0,0,23,255,0,6,23,23,255,0,8,23,255,0,8
005471  3  01 03 08 FF  
005475  3  01 07 02 00  
005487  3  2C 2C 15 16          .byte 44,44,21,22,0,255,44,4,255,0,4,44,255,0,13,44,0,0,21,22,255,0,26,21,22,255,0,7,46,255,0,18,21
00548B  3  00 FF 2C 04  
00548F  3  FF 00 04 2C  
0054A8  3  16 FF 00 12          .byte 22,255,0,18,45,0,40,19,255,0,4,21,22,0,46,255,0,18,40,19,255,0,4,21,22,255,0,19,59,57,57,57,58
0054AC  3  2D 00 28 13  
0054B0  3  FF 00 04 15  
0054C9  3  3B 39 3A 3B          .byte 59,57,58,59,58,255,0,4,45,255,0,12,45,0,54,54,54,0,0,59,57,58,255,0,17,45,0,0,54,54,54,255,0,12
0054CD  3  3A FF 00 04  
0054D1  3  2D FF 00 0C  
0054EB  3  33 18 19 31          .byte 51,24,25,49,0,0,46,255,0,11,45,255,0,8,51,48,48,48,50,49,255,0,21,51,50,50,255,48,4,49,255,0,19
0054EF  3  00 00 2E FF  
0054F3  3  00 0B 2D FF  
00550C  3  33 30 30 32          .byte 51,48,48,50,255,48,5,49,255,0,17,51,255,47,9,48,49,255,0,15,51,48,255,47,9,50,48,49,255,0,7,17,255,0,5
005510  3  FF 30 05 31  
005514  3  FF 00 11 33  
00552F  3  33 30 30 2F          .byte 51,48,48,47,47,47,48,48,48,50,255,47,5,49,255,0,5,74,16,0,17,0,0,51,50,50,48,48,47,47,47,42,43
005533  3  2F 2F 30 30  
005537  3  30 32 FF 2F  
005550  3  30 FF 2F 06          .byte 48,255,47,6,49,255,0,5,16,0,16,0,51,48,48,50,48,48,47,47,47,0,0,50,48,48,48,50,48,48,48,49,0
005554  3  31 FF 00 05  
005558  3  10 00 10 00  
005571  3  11 00 00 10          .byte 17,0,0,16,255,13,10,50,50,5,5,50,50,255,13,12,1,1,1,3,1,7,1,2,1,1,3,50,52,52,50,1,2
005575  3  FF 0D 0A 32  
005579  3  32 05 05 32  
005592  3  01 03 02 01          .byte 1,3,2,1,7,1,1,8,1,1,2,0,0,23,255,0,6,23,1,50,52,52,50,2,23,0,0,23,23,255,0,7
005596  3  07 01 01 08  
00559A  3  01 01 02 00  
0055B2  3  0D FF 2C 1B          .byte 13,255,44,27,1,17,255,0,7,59,57,57,58,255,0,15,1,16,75,255,0,25,1,16,16,76,255,0,18,45,255,0,5
0055B6  3  01 11 FF 00  
0055BA  3  07 3B 39 39  
0055D3  3  02 0D 0D 11          .byte 2,13,13,17,255,0,24,1,2,1,13,61,255,0,19,46,0,0,0,3,23,3,1,13,255,0,4,45,255,0,10,59,57
0055D7  3  FF 00 18 01  
0055DB  3  02 01 0D 3D  
0055F4  3  3A 00 00 3B          .byte 58,0,0,59,57,58,23,0,23,3,1,255,0,11,59,58,0,0,0,45,255,0,8,3,1,255,0,6,40,39,0,0,59
0055F8  3  39 3A 17 00  
0055FC  3  17 03 01 FF  
005615  3  39 3A 2E FF          .byte 57,58,46,255,0,12,23,1,255,0,6,40,40,255,0,19,2,255,0,6,17,255,0,20,1,17,255,0,4,74,16,255,0,20
005619  3  00 0C 17 01  
00561D  3  FF 00 06 28  
005637  3  03 0D FF 00          .byte 3,13,255,0,5,16,76,255,0,5,75,255,0,13,3,1,255,0,4,17,16,0,0,17,0,0,74,16,255,0,5,17,255,0,7
00563B  3  05 10 4C FF  
00563F  3  00 05 4B FF  
00565A  3  17 02 00 00          .byte 23,2,0,0,0,74,16,16,76,0,16,76,0,0,16,76,17,0,0,0,16,0,75,255,0,5,23,1,0,0,17,0,16,16
00565E  3  00 4A 10 10  
005662  3  4C 00 10 4C  
00567C  3  00 11 10 00          .byte 0,17,16,0,0,17,16,0,16,0,0,74,16,17,16,255,0,5,3,2,13,61,16,0,16,16,0,16,16,19,61,16,16
005680  3  00 11 10 00  
005684  3  10 00 00 4A  
00569D  3  00 10 00 00          .byte 0,16,0,0,61,16,16,16,76,0,0,54,54,23,3,1,255,13,22,0,54,54,0,23,7,255,1,4,3,1,1,1,2
0056A1  3  3D 10 10 10  
0056A5  3  4C 00 00 36  
0056BE  3  01 02 01 03          .byte 1,2,1,3,1,1,1,8,255,1,4,2,255,0,9,23,23,255,0,8,23,255,0,8
0056C2  3  01 01 01 08  
0056C6  3  FF 01 04 02  
0056D6  3  FF 00 0B 32          .byte 255,0,11,50,52,52,50,255,0,24,50,52,52,50,23,255,0,22,23,50,52,52,48,23,23,255,0,19,50,50,50,48,52,52
0056DA  3  34 34 32 FF  
0056DE  3  00 18 32 34  
0056F8  3  FF 32 04 FF          .byte 255,50,4,255,0,17,23,50,255,0,8,50,255,0,18,50,255,0,8,50,23,255,0,17,48,50,50,50,52,52,50,50,50
0056FC  3  00 11 17 32  
005700  3  FF 00 08 32  
005719  3  30 FF 00 13          .byte 48,255,0,19,23,23,50,52,52,50,23,255,0,6,23,255,0,16,48,52,52,50,255,0,4,23,0,23,23,23,255,0,14
00571D  3  17 17 32 34  
005721  3  34 32 17 FF  
00573A  3  17 32 34 34          .byte 23,50,52,52,48,0,0,255,50,4,48,255,50,4,255,0,13,50,52,52,50,23,0,50,255,0,4,39,39,17,50,255,0,13
00573E  3  30 00 00 FF  
005742  3  32 04 30 FF  
00575C  3  32 34 34 32          .byte 50,52,52,50,0,0,50,255,0,4,39,39,0,48,23,255,0,9,255,50,4,52,52,50,23,23,48,0,0,255,50,4,48,48
005760  3  00 00 32 FF  
005764  3  00 04 27 27  
00577E  3  FF 00 09 17          .byte 255,0,9,23,50,0,0,0,52,52,50,48,50,50,0,0,50,23,23,255,0,12,23,48,0,0,0,52,52,255,0,6,50
005782  3  32 00 00 00  
005786  3  34 34 32 30  
00579F  3  17 FF 00 0E          .byte 23,255,0,14,50,19,19,0,52,52,255,0,6,48,255,0,15,255,50,4,52,52,0,0,17,255,50,4,255,0,8,54,54
0057A3  3  32 13 13 00  
0057A7  3  34 34 FF 00  
0057C0  3  FF 00 08 30          .byte 255,0,8,48,52,52,255,50,4,255,0,11,54,54,255,0,7,23,50,52,52,50,255,0,23,50,50,52,52,50,48,255,0,12
0057C4  3  34 34 FF 32  
0057C8  3  04 FF 00 0B  
0057E2  3  FF 00 0B 32          .byte 255,0,11,50,52,52,50,23,255,0,21,23,48,50,52,52,50,48,255,0,20,23,48,50,0,52,52,0,50,48,23,255,0,14
0057E6  3  34 34 32 17  
0057EA  3  FF 00 15 17  
005804  3  17 00 17 17          .byte 23,0,23,23,48,50,0,0,52,52,0,0,50,48,23,0,0,0,23,255,0,8,255,50,4,48,50,0,0,0,52,52,0,0,0
005808  3  30 32 00 00  
00580C  3  34 34 00 00  
005827  3  FF 32 04 30          .byte 255,50,4,48,50,50,50,255,0,6,50,255,0,20,50,255,0,6,48,255,0,20,50,255,0,5,23,50,52,52,50,48,255,50,7
00582B  3  32 32 32 FF  
00582F  3  00 06 32 FF  
00584A  3  30 32 30 FF          .byte 48,50,48,255,50,4,52,52,48,23,255,0,5,50,52,52,50,50,50,48,50,42,255,0,4,43,50,50,48,48,50,52,52
00584E  3  32 04 34 34  
005852  3  30 17 FF 00  
00586B  3  32 FF 00 06          .byte 50,255,0,6,50,255,0,8,44,39,38,44,255,0,8,48,255,0,6,50,255,0,8,51,39,38,49,255,0,8,50,23,255,0,5
00586F  3  32 FF 00 08  
005873  3  2C 27 26 2C  
00588E  3  32 34 34 32          .byte 50,52,52,50,48,50,50,42,0,255,50,4,0,43,48,50,50,50,52,52,50,23,255,0,5,50,52,52,50,42,255,0,12
005892  3  30 32 32 2A  
005896  3  00 FF 32 04  
0058AF  3  2B 32 34 34          .byte 43,50,52,52,50,255,0,5,23,48,52,52,255,0,16,52,52,50,255,0,6,50,52,52,255,0,5,51,0,38,38,0,49
0058B3  3  32 FF 00 05  
0058B7  3  17 30 34 34  
0058D0  3  FF 00 05 34          .byte 255,0,5,52,52,50,255,0,5,23,50,52,52,255,0,5,50,31,38,38,31,50,255,0,5,52,52,48,255,0,6,50,52,52
0058D4  3  34 32 FF 00  
0058D8  3  05 17 32 34  
0058F2  3  FF 00 05 32          .byte 255,0,5,50,255,20,4,50,17,0,38,38,0,52,52,50,255,0,4,54,54,48,52,52,0,0,19,19,0,50,255,68,4
0058F6  3  FF 14 04 32  
0058FA  3  11 00 26 26  
005913  3  32 10 4C 00          .byte 50,16,76,0,0,0,52,52,50,23,0,0,0,54,54,255,50,4,48,255,50,7,48,50,50,50,48,48,255,50,4,255,0,13
005917  3  00 00 34 34  
00591B  3  32 17 00 00  
005935  3  17 00 17 FF          .byte 23,0,23,255,0,6,23,23,255,0,7
005939  3  00 06 17 17  
00593D  3  FF 00 07     
005940  3  FF 2C 1C 00          .byte 255,44,28,0,0,0,45,255,0,5,46,255,0,15,45,0,46,255,0,27,44,255,0,18,7,5,5,5,57,58,0,0,46
005944  3  00 00 2D FF  
005948  3  00 05 2E FF  
005961  3  2C 07 05 05          .byte 44,7,5,5,7,0,6,0,0,8,5,5,7,0,0,5,7,255,0,5,8,255,0,5,44,5,0,0,45,255,0,5,54,54
005965  3  07 00 06 00  
005969  3  00 08 05 05  
005983  3  FF 00 06 2D          .byte 255,0,6,45,255,0,7,59,57,57,5,38,38,0,0,5,0,0,5,54,54,5,0,0,5,255,0,12,44,5,38,38,0
005987  3  FF 00 07 3B  
00598B  3  39 39 05 26  
0059A4  3  3B 3A FF 00          .byte 59,58,255,0,14,59,7,255,0,5,44,8,57,58,0,0,5,0,0,5,45,0,5,0,0,5,255,0,6,5,57,58,0,0
0059A8  3  0E 3B 07 FF  
0059AC  3  00 05 2C 08  
0059C6  3  2E 2C 05 FF          .byte 46,44,5,255,0,4,8,5,5,8,0,0,8,5,5,7,255,0,6,5,45,255,0,4,44,7,59,58,255,0,8,45,0,0,0
0059CA  3  00 04 08 05  
0059CE  3  05 08 00 00  
0059E9  3  3B 39 3A 00          .byte 59,57,58,0,0,0,7,0,0,0,59,57,57,255,0,27,44,255,0,27,44,7,57,58,255,0,4,59,57,57,58,0,0,0
0059ED  3  00 00 07 00  
0059F1  3  00 00 3B 39  
005A0B  3  3B 39 39 3A          .byte 59,57,57,58,59,57,57,7,57,58,0,0,0,44,5,0,45,255,0,7,46,255,0,11,46,255,0,4,44,5,255,0,5
005A0F  3  3B 39 39 07  
005A13  3  39 3A 00 00  
005A2C  3  3B 39 3A FF          .byte 59,57,58,255,0,8,59,58,0,0,5,0,0,59,57,57,58,6,255,0,14,46,255,0,11,44,5,17,0,59,58,255,0,16
005A30  3  00 08 3B 3A  
005A34  3  00 00 05 00  
005A4E  3  08 FF 00 05          .byte 8,255,0,5,44,5,16,17,255,0,13,19,19,255,0,4,17,0,0,21,22,44,5,5,8,0,8,0,5,0,5,0,8
005A52  3  2C 05 10 11  
005A56  3  FF 00 0D 13  
005A6F  3  00 08 00 08          .byte 0,8,0,8,0,5,0,7,0,7,5,5,5,7,21,22,8
005A73  3  00 05 00 07  
005A77  3  00 07 05 05  
005A80  3  FF 2C 0B 18          .byte 255,44,11,24,25,24,25,24,25,255,44,11,0,0,45,255,0,4,46,0,0,0,255,47,6,0,0,45,46,0,0,0,45
005A84  3  19 18 19 18  
005A88  3  19 FF 2C 0B  
005AA1  3  FF 00 0E FF          .byte 255,0,14,255,47,6,255,0,22,255,47,6,255,0,11,8,5,5,7,255,0,4,45,38,38,24,25,24,25,24,25,38,38
005AA5  3  2F 06 FF 00  
005AA9  3  16 FF 2F 06  
005AC2  3  FF 00 05 07          .byte 255,0,5,7,5,8,5,7,42,0,43,5,7,0,0,31,38,38,43,42,43,42,43,42,38,38,31,0,0,7,5,42,0
005AC6  3  05 08 05 07  
005ACA  3  2A 00 2B 05  
005AE3  3  2E 05 4B 00          .byte 46,5,75,0,0,45,0,43,8,5,255,20,12,5,5,42,0,0,45,0,5,13,0,0,0,46,0,43,255,5,14,42,255,0,5
005AE7  3  00 2D 00 2B  
005AEB  3  08 05 FF 14  
005B06  3  08 01 0D FF          .byte 8,1,13,255,0,25,5,3,2,255,0,25,5,23,1,17,5,5,21,22,5,7,0,0,0,8,5,5,7,0,0,0,7
005B0A  3  00 19 05 03  
005B0E  3  02 FF 00 19  
005B27  3  05 05 07 15          .byte 5,5,7,21,22,7,5,8,23,1,16,76,0,21,22,43,5,0,0,0,5,42,43,5,0,0,0,5,42,43,5,21,22
005B2B  3  16 07 05 08  
005B2F  3  17 01 10 4C  
005B48  3  00 00 00 03          .byte 0,0,0,3,1,13,0,0,21,22,0,43,5,0,5,42,0,0,43,5,0,5,42,0,0,5,21,22,0,0,0,1,14
005B4C  3  01 0D 00 00  
005B50  3  15 16 00 2B  
005B69  3  00 00 00 15          .byte 0,0,0,21,22,255,0,15,255,5,5,7,1,17,0,0,0,21,22,255,0,20,5,1,255,13,4,5,0,6,0,5,255,0,17
005B6D  3  16 FF 00 0F  
005B71  3  FF 05 05 07  
005B8C  3  07 03 01 01          .byte 7,3,1,1,1,2,17,0,0,0,43,5,0,5,0,7,0,5,0,5,0,7,0,5,0,8,21,22,5,0,23,3,3
005B90  3  01 02 11 00  
005B94  3  00 00 2B 05  
005BAD  3  01 0D FF 00          .byte 1,13,255,0,19,21,22,5,0,0,0,23,3,2,255,0,19,21,22,6,0,0,23,23,3,1,0,5,0,53,0,7,0
005BB1  3  13 15 16 05  
005BB5  3  00 00 00 17  
005BCE  3  05 00 08 00          .byte 5,0,8,0,7,0,5,0,5,0,8,0,5,0,5
005BD2  3  07 00 05 00  
005BD6  3  05 00 08 00  
005BDD  3  FF 2C 10 00          .byte 255,44,16,0,0,0,255,44,10,54,54,255,0,9,46,255,0,14,44,44,54,54,45,255,0,20,46,0,0,44,44,255,0,15
005BE1  3  00 00 FF 2C  
005BE5  3  0A 36 36 FF  
005BFF  3  3B 39 3A FF          .byte 59,57,58,255,0,6,45,0,44,44,255,0,18,46,255,0,7,44,44,255,0,20,59,58,255,0,4,44,44,255,0,6,59
005C03  3  00 06 2D 00  
005C07  3  2C 2C FF 00  
005C20  3  39 39 3A FF          .byte 57,57,58,255,0,16,44,44,38,38,255,0,24,44,44,38,38,255,0,21,59,57,58,44,44,255,0,6,45,255,0,6,59
005C24  3  00 10 2C 2C  
005C28  3  26 26 FF 00  
005C41  3  3A FF 00 0B          .byte 58,255,0,11,44,44,255,0,26,44,44,255,0,17,45,255,0,5,59,58,0,44,44,255,0,8,59,57,58,255,0,15,44,44
005C45  3  2C 2C FF 00  
005C49  3  1A 2C 2C FF  
005C63  3  2E FF 00 19          .byte 46,255,0,25,44,44,255,0,21,59,58,0,0,0,44,44,255,0,12,59,57,57,58,255,0,10,44,44,255,0,5,59,57
005C67  3  2C 2C FF 00  
005C6B  3  15 3B 3A 00  
005C84  3  3A 00 2E FF          .byte 58,0,46,255,0,14,45,0,44,44,255,0,26,44,59,58,21,22,255,0,8,53,255,0,14,44,44,59,21,22,57,58,255,0,21
005C88  3  00 0E 2D 00  
005C8C  3  2C 2C FF 00  
005CA7  3  2C                   .byte 44
005CA8  3  FF 2C 0F FF          .byte 255,44,15,255,0,12,44,44,255,0,6,46,255,0,16,54,54,54,44,44,0,0,40,39,255,0,11,45,255,0,7,54,54,54
005CAC  3  00 0C 2C 2C  
005CB0  3  FF 00 06 2E  
005CCA  3  2C 2C 00 00          .byte 44,44,0,0,38,41,255,0,22,44,44,59,57,57,57,58,255,0,21,44,44,255,0,24,46,0,44,44,255,0,6,45,0,0,0
005CCE  3  26 29 FF 00  
005CD2  3  16 2C 2C 3B  
005CED  3  3B 3A FF 00          .byte 59,58,255,0,7,45,255,0,6,44,44,255,0,26,44,44,255,0,20,19,19,255,0,4,44,44,0,0,45,255,0,10,59
005CF1  3  07 2D FF 00  
005CF5  3  06 2C 2C FF  
005D0E  3  3A FF 00 04          .byte 58,255,0,4,59,57,57,58,0,0,0,44,44,255,0,26,44,44,255,0,26,44,44,255,0,5,46,255,0,4,59,58,255,0,10
005D12  3  3B 39 39 3A  
005D16  3  00 00 00 2C  
005D31  3  2D 00 00 00          .byte 45,0,0,0,44,44,255,0,26,44,44,0,0,0,59,57,57,58,255,0,19,44,44,255,0,26,44,44,0,0,46,255,0,9
005D35  3  2C 2C FF 00  
005D39  3  1A 2C 2C 00  
005D53  3  3B 39 39 3A          .byte 59,57,57,58,255,0,4,45,255,0,5,44,44,255,0,26,44,44,255,0,8,53,0,0,53,255,0,9,53,0,0,53,0
005D57  3  FF 00 04 2D  
005D5B  3  FF 00 05 2C  
005D74  3  2C 3B 39 39          .byte 44,59,57,57,58,59,57,58,255,0,9,59,57,58,255,0,8,44
005D78  3  3A 3B 39 3A  
005D7C  3  FF 00 09 3B  
005D86  3  FF 2C 0B 17          .byte 255,44,11,23,3,2,68,62,2,3,23,255,44,10,54,54,41,41,44,255,41,6,64,63,62,42,255,41,9,54,54,44,44
005D8A  3  03 02 44 3E  
005D8E  3  02 03 17 FF  
005DA7  3  36 36 FF 29          .byte 54,54,255,41,8,64,63,62,42,255,41,10,54,54,44,44,44,255,41,8,64,63,1,3,23,255,44,6,41,41,41,255,44,5
005DAB  3  08 40 3F 3E  
005DAF  3  2A FF 29 0A  
005DC9  3  FF 29 08 40          .byte 255,41,8,64,3,1,44,0,0,44,255,41,8,44,0,0,44,44,255,41,4,44,44,44,23,23,44,255,0,4,44,255,41,8
005DCD  3  03 01 2C 00  
005DD1  3  00 2C FF 29  
005DEB  3  2C 00 00 2C          .byte 44,0,0,44,44,255,41,4,44,255,0,9,44,41,41,41,255,44,6,0,0,44,44,41,41,41,44,44,255,0,9,44,41,41,41
005DEF  3  2C FF 29 04  
005DF3  3  2C FF 00 09  
005E0E  3  2C FF 00 07          .byte 44,255,0,7,44,44,255,41,4,44,0,255,44,9,41,41,41,44,23,44,23,23,3,1,1,2,44,255,41,4,44,0,66
005E12  3  2C 2C FF 29  
005E16  3  04 2C 00 FF  
005E2F  3  29 26 26 FF          .byte 41,38,38,255,41,12,64,63,62,62,62,44,44,41,41,41,44,0,66,38,38,38,31,38,255,41,9,64,63,255,62,4,44
005E33  3  29 0C 40 3F  
005E37  3  3E 3E 3E 2C  
005E50  3  FF 29 04 2C          .byte 255,41,4,44,0,44,66,47,47,47,65,41,41,41,255,44,4,23,44,23,23,3,1,1,2,44,255,41,4,44,0,0,44
005E54  3  00 2C 42 2F  
005E58  3  2F 2F 41 29  
005E71  3  43 43 43 2C          .byte 67,67,67,44,44,41,41,44,255,0,11,44,41,41,41,44,44,0,255,44,6,41,41,41,255,44,10,0,0,44,255,41,4
005E75  3  2C 29 29 2C  
005E79  3  FF 00 0B 2C  
005E92  3  2C 00 2C FF          .byte 44,0,44,255,41,15,54,54,44,0,0,44,255,41,4,44,0,44,255,41,15,54,54,44,0,0,44,66,38,38,38,44,44,44
005E96  3  29 0F 36 36  
005E9A  3  2C 00 00 2C  
005EB4  3  26 26 26 41          .byte 38,38,38,65,255,44,6,255,41,5,44,44,44,0,0,66,31,31,38,38,255,31,5,38,65,255,0,5,255,44,7,255,0,4
005EB8  3  FF 2C 06 FF  
005EBC  3  29 05 2C 2C  
005ED6  3  42 FF 2F 09          .byte 66,255,47,9,65,44,255,0,16,44,255,67,9,255,0,18
005EDA  3  41 2C FF 00  
005EDE  3  10 2C FF 43  
005EE6  3  03 01 0D 00          .byte 3,1,13,0,71,0,255,71,4,6,21,22,6,71,71,255,0,12,23,3,1,13,255,9,6,18,21,22,18,9,10,255,0,13
005EEA  3  47 00 FF 47  
005EEE  3  04 06 15 16  
005F08  3  17 03 01 00          .byte 23,3,1,0,6,0,0,6,0,7,21,22,5,0,11,71,71,46,71,71,71,255,0,8,3,2,255,0,4,70,0,0,21
005F0C  3  06 00 00 06  
005F10  3  00 07 15 16  
005F29  3  16 00 00 0C          .byte 22,0,0,12,255,9,6,10,255,0,7,1,1,0,0,0,45,0,0,0,21,22,7,255,0,5,44,44,0,11,255,0,6
005F2D  3  FF 09 06 0A  
005F31  3  FF 00 07 01  
005F4A  3  17 01 0E FF          .byte 23,1,14,255,0,7,21,22,255,0,9,11,255,0,5,23,3,2,0,45,255,0,6,21,22,5,0,8,0,8,0,0,0
005F4E  3  00 07 15 16  
005F52  3  FF 00 09 0B  
005F6B  3  05 0B 08 00          .byte 5,11,8,0,5,0,26,3,3,1,255,0,8,21,22,0,45,255,0,7,11,255,0,4,53,2,1,14,255,0,8,21,22
005F6F  3  05 00 1A 03  
005F73  3  03 01 FF 00  
005F8C  3  FF 00 08 2E          .byte 255,0,8,46,11,255,0,27,11,255,0,10,17,255,0,16,11,255,0,4,53,255,13,4,5,16,8,0,5,0,7,21,22
005F90  3  0B FF 00 1B  
005F94  3  0B FF 00 0A  
005FAD  3  07 00 08 00          .byte 7,0,8,0,7,0,8,0,8,11,7,0,5,0,26,1,2,1,1,13,16,255,0,4,5,21,22,255,0,9,12,255,9,5
005FB1  3  07 00 08 00  
005FB5  3  08 0B 07 00  
005FCF  3  03 03 03 02          .byte 3,3,3,2,1,16,76,0,0,0,7,21,22,5,255,0,14,23,0,23,3,1,13,255,0,5,21,22,255,0,6,46,0,0,0
005FD3  3  01 10 4C 00  
005FD7  3  00 00 07 15  
005FF2  3  2D FF 00 07          .byte 45,255,0,7,23,3,1,255,0,4,7,21,22,8,255,0,15,23,3,2,1,14,255,0,4,5,21,22,255,0,4,45,255,0,10
005FF6  3  17 03 01 FF  
005FFA  3  00 04 07 15  
006015  3  17 03 01 0E          .byte 23,3,1,14,0,0,0,46,0,0,0,21,22,5,255,0,4,45,34,35,255,0,7,3,2,14,0,0,0,45,0,0,0
006019  3  00 00 00 2E  
00601D  3  00 00 00 15  
006036  3  08 15 16 FF          .byte 8,21,22,255,0,5,24,77,78,25,255,0,6,1,14,255,0,8,5,21,22,5,255,0,5,77,78,255,0,7
00603A  3  00 05 18 4D  
00603E  3  4E 19 FF 00  
006054  3  FF 00 04 2D          .byte 255,0,4,45,255,0,37,46,255,0,7,255,6,5,255,0,21,46,0,6,70,70,19,6,255,0,7,46,0,0,0,71,0,0,0
006058  3  FF 00 25 2E  
00605C  3  FF 00 07 FF  
006077  3  47 00 00 00          .byte 71,0,0,0,71,0,71,71,6,19,19,0,6,255,0,11,6,0,6,0,6,0,6,0,6,0,6,24,25,19,19,19,6
00607B  3  47 00 47 47  
00607F  3  06 13 13 00  
006098  3  FF 00 0B 46          .byte 255,0,11,70,255,0,11,69,38,38,19,6,255,0,11,6,0,0,71,71,0,71,0,19,19,71,0,69,38,38,71,6,0,0,0
00609C  3  FF 00 0B 45  
0060A0  3  26 26 13 06  
0060BB  3  2E FF 00 08          .byte 46,255,0,8,21,22,6,6,0,6,0,6,6,6,24,25,255,6,4,255,0,11,6,21,22,6,0,0,70,0,0,0,70
0060BF  3  15 16 06 06  
0060C3  3  00 06 00 06  
0060DC  3  0B 0B 00 00          .byte 11,11,0,0,70,255,0,9,45,0,0,0,21,22,255,0,7,45,12,11,18,9,10,255,0,8,71,0,71,0,6,21,22
0060E0  3  46 FF 00 09  
0060E4  3  2D 00 00 00  
0060FD  3  06 00 47 FF          .byte 6,0,71,255,0,6,12,255,9,5,255,0,6,255,6,5,21,22,6,6,6,255,0,6,46,0,0,12,9,9,255,0,6
006101  3  00 06 0C FF  
006105  3  09 05 FF 00  
00611E  3  06 00 00 46          .byte 6,0,0,70,255,0,4,70,6,255,0,13,45,255,0,4,6,255,71,4,0,0,71,71,6,255,0,18,255,6,5,21,22
006122  3  FF 00 04 46  
006126  3  06 FF 00 0D  
00613F  3  06 06 06 FF          .byte 6,6,6,255,0,19,70,0,0,6,21,22,6,0,70,255,0,10,45,255,0,5,46,255,0,6,21,22,70,0,0,46,255,0,12
006143  3  00 13 46 00  
006147  3  00 06 15 16  
006162  3  36 36 FF 00          .byte 54,54,255,0,7,6,21,22,6,255,0,6,46,255,0,8,54,54,255,0,8,21,22,255,0,25,6,21,22,6,255,0,14
006166  3  07 06 15 16  
00616A  3  06 FF 00 06  
006183  3  FF 00 17 0B          .byte 255,0,23,11,255,0,9,46,255,0,17,11,255,0,21,45,255,0,5,11,255,0,9,44,0,44,0,44,0,44,0,44,0
006187  3  FF 00 09 2E  
00618B  3  FF 00 11 0B  
0061A4  3  2C 00 2C 00          .byte 44,0,44,0,44,0,0,0,11,255,0,27,11,255,0,27,11,255,0,4,5,0,7,0,5,255,0,15,7,0,5,11,5
0061A8  3  2C 00 00 00  
0061AC  3  0B FF 00 1B  
0061C5  3  00 05 FF 00          .byte 0,5,255,0,24,12,10,255,0,27,11,255,0,27,11,255,0,27,12,10,0,0,5,0,59,57,58,0,5,0,5,0,5
0061C9  3  18 0C 0A FF  
0061CD  3  00 1B 0B FF  
0061E6  3  00 08 00 06          .byte 0,8,0,6,0,7,0,5,0,5,0,0,0,7,11,5,0,18,255,9,12,10,255,0,11,12,9,9,7,0,59,58,255,0,9
0061EA  3  00 07 00 05  
0061EE  3  00 05 00 00  
006209  3  0C FF 09 09          .byte 12,255,9,9,18,5,18,9,9,255,0,4,45,255,0,18,6,45,0,0,0,5,0,59,58,255,0,20,5,255,0,13,45
00620D  3  12 05 12 09  
006211  3  09 FF 00 04  
00622A  3  FF 00 11 08          .byte 255,0,17,8,0,5,0,7,0,5,0,5,0,8,0,5,0,7,0,5,0,7,0,5,0,8,0,7,255,0,17,46,255,0,41
00622E  3  00 05 00 07  
006232  3  00 05 00 05  
00624D  3  FF 00 19 0B          .byte 255,0,25,11,255,0,4,45,255,0,19,46,0,0,11,255,0,27,11,255,0,27,11,255,0,8,44,255,0,8,45,255,0,4
006251  3  FF 00 04 2D  
006255  3  FF 00 13 2E  
00626F  3  2C FF 00 04          .byte 44,255,0,4,11,255,0,14,34,35,255,0,11,11,0,0,5,0,7,0,5,0,0,0,5,0,5,8,24,25,5,0,5
006273  3  0B FF 00 0E  
006277  3  22 23 FF 00  
006290  3  00 05 00 00          .byte 0,5,0,0,0,5,0,5,11,5,255,0,5,53,0,0,0,53,0,0,5,24,25,8,0,0,0,53,0,0,0,53,0,0
006294  3  00 05 00 05  
006298  3  0B 05 FF 00  
0062B2  3  0B FF 00 0D          .byte 11,255,0,13,26,24,25,26,255,0,10,11,255,0,14,29,29,255,0,11,11,255,0,10,19,19,0,0,29,29,255,0,11
0062B6  3  1A 18 19 1A  
0062BA  3  FF 00 0A 0B  
0062D3  3  0B 00 00 05          .byte 11,0,0,5,0,5,0,7,0,5,0,5,7,5,26,24,25,26,0,7,0,5,0,5,0,8,0,7,11,5,0,255,9,12
0062D7  3  00 05 00 07  
0062DB  3  00 05 00 05  
0062F5  3  12 0B FF 00          .byte 18,11,255,0,11,12,9,9,9,10,255,0,11,12,255,9,14,0,11,255,0,13,45,255,0,13,11,0,0,45,255,0,24
0062F9  3  0B 0C 09 09  
0062FD  3  09 0A FF 00  
006316  3  0B FF 00 0B          .byte 11,255,0,11,46,255,0,15,11,255,0,22,45,255,0,4,11,255,0,27,11,255,0,26
00631A  3  2E FF 00 0F  
00631E  3  0B FF 00 16  
00632E  3  FF 00 15 18          .byte 255,0,21,24,25,255,0,14,45,255,0,11,77,78,255,0,15,46,0,0,0,44,255,0,6,24,25,255,0,7,45,255,0,18
006332  3  19 FF 00 0E  
006336  3  2D FF 00 0B  
006350  3  27 26 00 00          .byte 39,38,0,0,0,45,255,0,22,39,38,255,0,24,7,7,24,25,7,7,0,0,0,48,0,48,0,48,0,68,0,48,0
006354  3  00 2D FF 00  
006358  3  16 27 26 FF  
006371  3  44 00 44 00          .byte 68,0,68,0,0,8,255,7,4,42,77,78,0,7,255,0,24,43,42,0,26,255,0,24,38,0,0,4,255,0,27,27,255,0,24
006375  3  00 08 FF 07  
006379  3  04 2A 4D 4E  
006394  3  22 23 00 07          .byte 34,35,0,7,0,0,0,48,0,48,0,48,0,68,0,48,0,68,0,68,0,0,8,255,7,5,24,25,7,42,0,0,0
006398  3  00 00 00 30  
00639C  3  00 30 00 30  
0063B5  3  FF 09 0C 0A          .byte 255,9,12,10,0,0,0,12,9,9,9,18,11,11,255,0,5,9,9,10,255,0,9,11,255,0,8,11,11,0,0,0,45
0063B9  3  00 00 00 0C  
0063BD  3  09 09 09 12  
0063D6  3  00 00 00 0B          .byte 0,0,0,11,255,0,14,46,0,0,0,12,11,10,0,45,255,0,4,11,255,0,11,44,255,0,7,11,11,255,0,6,11
0063DA  3  FF 00 0E 2E  
0063DE  3  00 00 00 0C  
0063F7  3  FF 00 13 0B          .byte 255,0,19,11,11,255,0,20,45,255,0,5,11,11,255,0,10,46,255,0,15,11,12,9,9,10,255,0,23,11,0,0,0
0063FB  3  0B FF 00 14  
0063FF  3  2D FF 00 05  
006418  3  0B 00                .byte 11,0
00641A  3  FF 00 05 2E          .byte 255,0,5,46,255,0,6,45,0,45,255,0,5,39,255,0,27,39,0,0,46,255,0,24,11,255,0,6,45,57,58,255,0,15
00641E  3  FF 00 06 2D  
006422  3  00 2D FF 00  
00643C  3  2E 00 00 0B          .byte 46,0,0,11,0,71,71,71,34,35,71,0,0,0,59,57,57,58,0,45,0,0,55,75,73,255,0,6,11,71,1,1,1
006440  3  00 47 47 47  
006444  3  22 23 47 00  
00645D  3  18 19 01 FF          .byte 24,25,1,255,0,12,17,0,0,0,46,0,0,0,11,1,14,0,0,77,78,255,0,4,46,255,0,7,55,16,0,0,59
006461  3  00 0C 11 00  
006465  3  00 00 2E 00  
00647E  3  3A 00 00 47          .byte 58,0,0,71,1,14,23,23,0,77,78,0,72,73,255,0,5,45,55,72,73,0,16,255,0,5,71,1,12,9,9,10,0
006482  3  01 0E 17 17  
006486  3  00 4D 4E 00  
00649F  3  18 19 17 11          .byte 24,25,23,17,255,0,8,17,0,74,16,73,255,0,4,1,14,0,23,0,11,0,15,14,0,16,73,255,0,6,74,16,0,0
0064A3  3  FF 00 08 11  
0064A7  3  00 4A 10 49  
0064C1  3  10 00 2D 4B          .byte 16,0,45,75,0,64,1,0,23,0,0,11,255,0,4,16,255,0,6,61,0,16,73,0,16,76,0,61,0,15,1,255,0,4
0064C5  3  00 40 01 00  
0064C9  3  17 00 00 0B  
0064E3  3  0B FF 00 04          .byte 11,255,0,4,16,61,0,34,35,0,0,61,13,16,0,0,16,0,0,17,0,0,69,255,0,4,11,255,0,4,16,61,37
0064E7  3  10 3D 00 22  
0064EB  3  23 00 00 3D  
006504  3  20 21 24 0D          .byte 32,33,36,13,13,1,13,17,61,16,0,0,16,61,0,69,255,0,4,11,0,0,21,22,13,13,24,25,24,25,1,1,3
006508  3  0D 01 0D 11  
00650C  3  3D 10 00 00  
006525  3  01 FF 0D 10          .byte 1,255,13,16,21,22,1,1,1,2,1,1,3,3,23,3,1,1,2,1,1,1,2,2,255,1,6,2,1,21,22,3,3
006529  3  15 16 01 01  
00652D  3  01 02 01 01  
006546  3  01 01 03 FF          .byte 1,1,3,255,54,4,255,3,14,11,3,1,21,22,23,23,3,3,44,255,54,4,44,23,23,23,0,0,23,0,23,23,0
00654A  3  36 04 FF 03  
00654E  3  0E 0B 03 01  
006567  3  17 00 17 0B          .byte 23,0,23,11,3,2,21,22,0,0,23,23,255,44,6,255,0,4,23,255,0,8,11,3,2,21,22,255,0,6,23,255,0,14
00656B  3  03 02 15 16  
00656F  3  00 00 17 17  
006589  3  17 00 0B 03          .byte 23,0,11,3,2,21,22,255,0,23,11,3,1,21,22
00658D  3  02 15 16 FF  
006591  3  00 17 0B 03  
006598  3               numsc:
006598  3  1C                   .byte 28
006599  3               nmedat:
006599  3  00 00 70 48          .byte 0,0,112,72,4,3,72,176,6,4,40,208,2,5,64,192,255
00659D  3  04 03 48 B0  
0065A1  3  06 04 28 D0  
0065AA  3  06 04 48 98          .byte 6,4,72,152,0,0,16,176,5,5,120,144,255
0065AE  3  00 00 10 B0  
0065B2  3  05 05 78 90  
0065B7  3  06 04 20 88          .byte 6,4,32,136,4,6,120,144,0,0,56,80,1,7,128,112,1,7,128,160,255
0065BB  3  04 06 78 90  
0065BF  3  00 00 38 50  
0065CC  3  00 00 88 58          .byte 0,0,136,88,4,3,72,152,4,6,96,112,255
0065D0  3  04 03 48 98  
0065D4  3  04 06 60 70  
0065D9  3  00 00 40 18          .byte 0,0,64,24,6,4,80,152,2,5,40,88,255
0065DD  3  06 04 50 98  
0065E1  3  02 05 28 58  
0065E6  3  00 00 20 A8          .byte 0,0,32,168,2,5,32,136,5,5,120,72,1,10,104,96,255
0065EA  3  02 05 20 88  
0065EE  3  05 05 78 48  
0065F7  3  00 00 50 20          .byte 0,0,80,32,6,6,104,168,4,3,8,192,4,6,72,144,1,7,128,64,1,7,128,176,255
0065FB  3  06 06 68 A8  
0065FF  3  04 03 08 C0  
006610  3  00 00 20 20          .byte 0,0,32,32,4,3,88,56,4,3,24,184,255
006614  3  04 03 58 38  
006618  3  04 03 18 B8  
00661D  3  00 00 48 20          .byte 0,0,72,32,6,4,32,104,4,6,16,128,255
006621  3  06 04 20 68  
006625  3  04 06 10 80  
00662A  3  00 00 08 50          .byte 0,0,8,80,2,5,32,56,1,7,128,80,1,7,128,192,6,4,56,136,255
00662E  3  02 05 20 38  
006632  3  01 07 80 50  
00663F  3  00 00 78 40          .byte 0,0,120,64,2,5,16,112,1,9,80,104,1,9,48,112,255
006643  3  02 05 10 70  
006647  3  01 09 50 68  
006650  3  00 00 78 D8          .byte 0,0,120,216,4,3,24,128,2,5,16,192,1,10,72,160,1,10,88,160,1,10,104,160,1,10,120,160,255
006654  3  04 03 18 80  
006658  3  02 05 10 C0  
00666D  3  00 00 78 D8          .byte 0,0,120,216,1,7,120,104,1,7,120,128,4,6,16,120,255
006671  3  01 07 78 68  
006675  3  01 07 78 80  
00667E  3  00 00 78 D8          .byte 0,0,120,216,4,3,48,112,2,5,120,96,255
006682  3  04 03 30 70  
006686  3  02 05 78 60  
00668B  3  00 00 78 B0          .byte 0,0,120,176,2,5,120,128,255
00668F  3  02 05 78 80  
006693  3  FF           
006694  3  00 00 08 70          .byte 0,0,8,112,3,3,32,88,3,3,32,136,2,5,112,88,255
006698  3  03 03 20 58  
00669C  3  03 03 20 88  
0066A5  3  00 00 10 70          .byte 0,0,16,112,6,3,40,48,1,7,112,120,2,5,128,80,6,8,72,80,6,8,72,160,255
0066A9  3  06 03 28 30  
0066AD  3  01 07 70 78  
0066BE  3  00 00 80 D8          .byte 0,0,128,216,2,5,136,144,6,4,88,112,4,3,8,64,4,6,40,112,255
0066C2  3  02 05 88 90  
0066C6  3  06 04 58 70  
0066D3  3  00 00 10 D8          .byte 0,0,16,216,1,7,32,88,1,7,32,152,6,6,8,80,6,8,64,120,6,4,104,168,255
0066D7  3  01 07 20 58  
0066DB  3  01 07 20 98  
0066EC  3  00 00 50 60          .byte 0,0,80,96,6,4,56,184,6,6,104,160,255
0066F0  3  06 04 38 B8  
0066F4  3  06 06 68 A0  
0066F9  3  00 00 88 90          .byte 0,0,136,144,2,5,56,184,6,3,80,128,255
0066FD  3  02 05 38 B8  
006701  3  06 03 50 80  
006706  3  00 00 48 D0          .byte 0,0,72,208,1,7,72,88,1,7,128,40,255
00670A  3  01 07 48 58  
00670E  3  01 07 80 28  
006713  3  00 00 48 70          .byte 0,0,72,112,4,3,72,160,255
006717  3  04 03 48 A0  
00671B  3  FF           
00671C  3  00 00 28 68          .byte 0,0,40,104,6,3,96,104,2,5,40,160,255
006720  3  06 03 60 68  
006724  3  02 05 28 A0  
006729  3  00 00 48 20          .byte 0,0,72,32,4,8,40,56,4,8,56,72,4,8,72,88,4,8,40,128,4,8,56,144,4,8,72,160,255
00672D  3  04 08 28 38  
006731  3  04 08 38 48  
006746  3  00 00 48 20          .byte 0,0,72,32,5,5,72,80,4,8,40,56,4,8,40,168,255
00674A  3  05 05 48 50  
00674E  3  04 08 28 38  
006757  3  00 00 48 20          .byte 0,0,72,32,4,8,24,120,4,8,104,120,1,10,24,184,255
00675B  3  04 08 18 78  
00675F  3  04 08 68 78  
006768  3  00 00 78 40          .byte 0,0,120,64,1,9,0,168,1,1,88,176,255
00676C  3  01 09 00 A8  
006770  3  01 01 58 B0  
006775  3               NUMOBJ = 20
006775  3               objdta:
006775  3  3F C0 40 20          .byte 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,0,128,208,0,128,208
006779  3  5F D0 5F E8  
00677D  3  5F F4 51 F4  
00679B  3  01 80 02 C0          .byte 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,1,56,56,1,56,56
00679F  3  07 60 0E D0  
0067A3  3  1F F8 1E C8  
0067C1  3  01 80 02 C0          .byte 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,254,0,16,254,0,16
0067C5  3  07 60 0E D0  
0067C9  3  1F F8 1E C8  
0067E7  3  01 80 02 C0          .byte 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,7,32,168,7,32,168
0067EB  3  07 60 0E D0  
0067EF  3  1F F8 1E C8  
00680D  3  3F C0 40 20          .byte 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,23,40,200,23,40,200
006811  3  5F D0 5F E8  
006815  3  5F F4 51 F4  
006833  3  3F C0 40 20          .byte 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,15,80,192,15,80,192
006837  3  5F D0 5F E8  
00683B  3  5F F4 51 F4  
006859  3  00 04 00 0C          .byte 0,4,0,12,0,0,1,254,0,170,0,0,64,12,96,12,96,12,96,12,0,0,255,254,170,170,0,0,96,12,96,12,9,8,104,9,8,104
00685D  3  00 00 01 FE  
006861  3  00 AA 00 00  
00687F  3  0F 00 11 80          .byte 15,0,17,128,0,0,2,192,2,192,7,224,27,248,39,252,88,126,121,62,120,122,121,54,121,42,56,84,30,184,7,224,6,104,176,6,104,176
006883  3  00 00 02 C0  
006887  3  02 C0 07 E0  
0068A5  3  01 00 03 80          .byte 1,0,3,128,7,64,11,160,23,80,47,168,127,84,255,250,85,84,43,168,21,80,11,160,5,64,2,128,1,0,0,0,20,16,40,20,16,40
0068A9  3  07 40 0B A0  
0068AD  3  17 50 2F A8  
0068CB  3  07 C0 1B B0          .byte 7,192,27,176,61,120,102,204,99,140,97,12,83,148,46,232,20,80,77,100,111,236,53,88,112,28,5,64,123,188,252,126,13,24,208,13,24,208
0068CF  3  3D 78 66 CC  
0068D3  3  63 8C 61 0C  
0068F1  3  07 00 34 00          .byte 7,0,52,0,119,4,244,8,174,12,232,26,238,112,245,192,214,133,187,85,221,223,174,112,87,142,74,250,53,84,15,248,14,64,96,14,64,96
0068F5  3  77 04 F4 08  
0068F9  3  AE 0C E8 1A  
006917  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,46,0,126,0,93,0,235,0,209,0,170,0,124,0,7,32,88,7,32,88
00691B  3  00 00 00 00  
00691F  3  00 00 00 00  
00693D  3  00 00 00 00          .byte 0,0,0,0,3,192,7,224,1,128,63,252,76,50,93,186,113,142,119,238,119,238,113,142,93,186,76,50,63,252,0,0,17,48,24,17,48,24
006941  3  03 C0 07 E0  
006945  3  01 80 3F FC  
006963  3  00 00 00 00          .byte 0,0,0,0,3,192,7,224,1,128,63,252,76,50,93,186,113,142,119,238,119,238,113,142,93,186,76,50,63,252,0,0,19,56,24,19,56,24
006967  3  03 C0 07 E0  
00696B  3  01 80 3F FC  
006989  3  00 00 01 80          .byte 0,0,1,128,7,224,9,112,19,248,19,152,63,188,57,244,121,190,79,254,94,226,127,194,95,194,43,196,149,91,98,166,254,0,16,254,0,16
00698D  3  07 E0 09 70  
006991  3  13 F8 13 98  
0069AF  3  07 C0 09 E0          .byte 7,192,9,224,25,240,23,240,31,240,31,176,15,32,7,192,1,0,1,0,0,128,0,128,0,64,2,32,5,32,0,192,10,40,136,10,40,136
0069B3  3  19 F0 17 F0  
0069B7  3  1F F0 1F B0  
0069D5  3  00 00 78 00          .byte 0,0,120,0,30,0,7,0,3,160,1,80,0,224,1,80,3,184,7,28,14,12,20,6,40,6,80,2,160,2,64,0,21,8,216,21,8,216
0069D9  3  1E 00 07 00  
0069DD  3  03 A0 01 50  
0069FB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,234,234,212,212,170,170,212,212,170,170,212,212,14,16,24,14,16,24
0069FF  3  00 00 00 00  
006A03  3  00 00 00 00  
006A21  3  00 00 00 00          .byte 0,0,0,0,0,0,0,8,55,228,85,122,79,245,86,122,53,164,3,200,4,32,13,176,16,8,53,172,49,140,31,248,6,24,64,6,24,64
006A25  3  00 00 00 08  
006A29  3  37 E4 55 7A  
006A47  3  78 00 84 00          .byte 120,0,132,0,165,80,133,88,132,0,120,26,128,2,192,127,199,201,207,201,204,127,205,89,204,111,237,217,109,239,12,127,26,64,184,26,64,184
006A4B  3  A5 50 85 58  
006A4F  3  84 00 78 1A  
006A6D  3               font:
006A6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
006A71  3  00 00 00 00  
006A75  3  00 30 78 78          .byte 0,48,120,120,48,48,0,48
006A79  3  30 30 00 30  
006A7D  3  00 18 06 06          .byte 0,24,6,6,9,17,32,64
006A81  3  09 11 20 40  
006A85  3  18 34 3C 5E          .byte 24,52,60,94,126,114,114,60
006A89  3  7E 72 72 3C  
006A8D  3  00 5E 7E 7E          .byte 0,94,126,126,42,82,4,120
006A91  3  2A 52 04 78  
006A95  3  02 02 0E 42          .byte 2,2,14,66,126,66,126,66
006A99  3  7E 42 7E 42  
006A9D  3  7E BD 99 5A          .byte 126,189,153,90,36,60,0,24
006AA1  3  24 3C 00 18  
006AA5  3  7C B9 F6 E8          .byte 124,185,246,232,213,239,189,126
006AA9  3  D5 EF BD 7E  
006AAD  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
006AB1  3  18 18 0C 00  
006AB5  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
006AB9  3  30 30 60 00  
006ABD  3  18 34 72 FF          .byte 24,52,114,255,149,90,52,24
006AC1  3  95 5A 34 18  
006AC5  3  1C 3E 7F 7F          .byte 28,62,127,127,87,71,71,62
006AC9  3  57 47 47 3E  
006ACD  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
006AD1  3  00 18 18 30  
006AD5  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
006AD9  3  7E 00 00 00  
006ADD  3  00 00 00 00          .byte 0,0,0,0,0,0,16,0
006AE1  3  00 00 10 00  
006AE5  3  38 7C FE FE          .byte 56,124,254,254,234,226,226,124
006AE9  3  EA E2 E2 7C  
006AED  3  7C FE CE D6          .byte 124,254,206,214,230,254,124,0
006AF1  3  E6 FE 7C 00  
006AF5  3  18 78 78 18          .byte 24,120,120,24,24,126,126,0
006AF9  3  18 7E 7E 00  
006AFD  3  FC FE 06 7C          .byte 252,254,6,124,192,254,254,0
006B01  3  C0 FE FE 00  
006B05  3  FC FE 06 3E          .byte 252,254,6,62,6,254,252,0
006B09  3  06 FE FC 00  
006B0D  3  D8 D8 D8 D8          .byte 216,216,216,216,254,254,24,0
006B11  3  FE FE 18 00  
006B15  3  FE FE C0 FC          .byte 254,254,192,252,6,254,252,0
006B19  3  06 FE FC 00  
006B1D  3  7C FC C0 FC          .byte 124,252,192,252,198,254,124,0
006B21  3  C6 FE 7C 00  
006B25  3  FE FE 06 0E          .byte 254,254,6,14,28,24,24,0
006B29  3  1C 18 18 00  
006B2D  3  7C FE C6 7C          .byte 124,254,198,124,198,254,124,0
006B31  3  C6 FE 7C 00  
006B35  3  7C FE C6 FE          .byte 124,254,198,254,126,6,6,0
006B39  3  7E 06 06 00  
006B3D  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
006B41  3  00 00 30 00  
006B45  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
006B49  3  00 00 00 00  
006B4D  3  78 7C 7E 7E          .byte 120,124,126,126,126,66,66,126
006B51  3  7E 42 42 7E  
006B55  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
006B59  3  00 00 00 00  
006B5D  3  00 18 34 24          .byte 0,24,52,36,126,171,126,36
006B61  3  7E AB 7E 24  
006B65  3  3C 0E 07 07          .byte 60,14,7,7,7,7,14,60
006B69  3  07 07 0E 3C  
006B6D  3  00 4E 56 4E          .byte 0,78,86,78,86,78,86,74
006B71  3  56 4E 56 4A  
006B75  3  3C 7E 06 7E          .byte 60,126,6,126,126,102,102,0
006B79  3  7E 66 66 00  
006B7D  3  78 7E 06 7C          .byte 120,126,6,124,102,126,124,0
006B81  3  66 7E 7C 00  
006B85  3  3E 7E 00 60          .byte 62,126,0,96,96,126,62,0
006B89  3  60 7E 3E 00  
006B8D  3  7C 7E 06 66          .byte 124,126,6,102,102,126,124,0
006B91  3  66 7E 7C 00  
006B95  3  3E 7E 00 7C          .byte 62,126,0,124,96,126,62,0
006B99  3  60 7E 3E 00  
006B9D  3  3E 7E 00 7C          .byte 62,126,0,124,96,96,96,0
006BA1  3  60 60 60 00  
006BA5  3  3E 7E 00 6E          .byte 62,126,0,110,102,126,62,0
006BA9  3  66 7E 3E 00  
006BAD  3  66 66 06 7E          .byte 102,102,6,126,102,102,102,0
006BB1  3  66 66 66 00  
006BB5  3  7E 7E 00 18          .byte 126,126,0,24,24,126,126,0
006BB9  3  18 7E 7E 00  
006BBD  3  06 06 00 06          .byte 6,6,0,6,6,126,124,0
006BC1  3  06 7E 7C 00  
006BC5  3  66 6E 1C 78          .byte 102,110,28,120,124,110,102,0
006BC9  3  7C 6E 66 00  
006BCD  3  60 60 00 60          .byte 96,96,0,96,96,126,62,0
006BD1  3  60 7E 3E 00  
006BD5  3  63 77 1F 6B          .byte 99,119,31,107,99,99,99,0
006BD9  3  63 63 63 00  
006BDD  3  7C 7E 06 66          .byte 124,126,6,102,102,102,102,0
006BE1  3  66 66 66 00  
006BE5  3  3C 7E 06 66          .byte 60,126,6,102,102,126,60,0
006BE9  3  66 7E 3C 00  
006BED  3  7C 7E 06 7E          .byte 124,126,6,126,124,96,96,0
006BF1  3  7C 60 60 00  
006BF5  3  3C 7E 06 66          .byte 60,126,6,102,102,112,54,6
006BF9  3  66 70 36 06  
006BFD  3  7C 7E 06 7E          .byte 124,126,6,126,124,110,102,0
006C01  3  7C 6E 66 00  
006C05  3  3E 7E 00 3C          .byte 62,126,0,60,14,126,124,0
006C09  3  0E 7E 7C 00  
006C0D  3  7E 7E 00 18          .byte 126,126,0,24,24,24,24,0
006C11  3  18 18 18 00  
006C15  3  66 66 06 66          .byte 102,102,6,102,102,126,62,0
006C19  3  66 7E 3E 00  
006C1D  3  66 66 06 66          .byte 102,102,6,102,126,60,24,0
006C21  3  7E 3C 18 00  
006C25  3  63 63 03 6B          .byte 99,99,3,107,127,119,99,0
006C29  3  7F 77 63 00  
006C2D  3  63 77 2E 1C          .byte 99,119,46,28,62,119,99,0
006C31  3  3E 77 63 00  
006C35  3  66 66 06 7E          .byte 102,102,6,126,6,62,60,0
006C39  3  06 3E 3C 00  
006C3D  3  7E 7E 00 0C          .byte 126,126,0,12,24,62,126,0
006C41  3  18 3E 7E 00  
006C45  3  1E 0C 0C 0C          .byte 30,12,12,12,12,12,12,30
006C49  3  0C 0C 0C 1E  
006C4D  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
006C51  3  30 18 0C 00  
006C55  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
006C59  3  30 30 F0 00  
006C5D  3  3C 4E 5E 7E          .byte 60,78,94,126,122,60,8,24
006C61  3  7A 3C 08 18  
006C65  3  00 00 7F 7F          .byte 0,0,127,127,42,85,0,127
006C69  3  2A 55 00 7F  
006C6D  3  00 56 4B 55          .byte 0,86,75,85,74,69,32,31
006C71  3  4A 45 20 1F  
006C75  3  00 00 3C 06          .byte 0,0,60,6,62,102,62,0
006C79  3  3E 66 3E 00  
006C7D  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
006C81  3  66 66 7C 00  
006C85  3  3C 42 99 A1          .byte 60,66,153,161,161,153,66,60
006C89  3  A1 99 42 3C  
006C8D  3  00 06 06 3E          .byte 0,6,6,62,102,102,62,0
006C91  3  66 66 3E 00  
006C95  3  00 00 3C 66          .byte 0,0,60,102,124,96,60,0
006C99  3  7C 60 3C 00  
006C9D  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
006CA1  3  30 30 30 00  
006CA5  3  00 00 38 6C          .byte 0,0,56,108,108,60,12,120
006CA9  3  6C 3C 0C 78  
006CAD  3  00 60 60 7C          .byte 0,96,96,124,102,102,102,0
006CB1  3  66 66 66 00  
006CB5  3  00 18 00 38          .byte 0,24,0,56,24,24,60,0
006CB9  3  18 18 3C 00  
006CBD  3  00 06 00 06          .byte 0,6,0,6,6,6,102,60
006CC1  3  06 06 66 3C  
006CC5  3  00 60 6C 78          .byte 0,96,108,120,120,108,102,0
006CC9  3  78 6C 66 00  
006CCD  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
006CD1  3  30 30 1C 00  
006CD5  3  00 00 36 7F          .byte 0,0,54,127,127,107,99,0
006CD9  3  7F 6B 63 00  
006CDD  3  00 00 7C 66          .byte 0,0,124,102,102,102,102,0
006CE1  3  66 66 66 00  
006CE5  3  00 00 3C 66          .byte 0,0,60,102,102,102,60,0
006CE9  3  66 66 3C 00  
006CED  3  00 00 7C 66          .byte 0,0,124,102,102,124,96,96
006CF1  3  66 7C 60 60  
006CF5  3  00 00 3E 66          .byte 0,0,62,102,102,62,6,7
006CF9  3  66 3E 06 07  
006CFD  3  00 00 1E 33          .byte 0,0,30,51,48,48,48,0
006D01  3  30 30 30 00  
006D05  3  00 00 3E 60          .byte 0,0,62,96,60,6,124,0
006D09  3  3C 06 7C 00  
006D0D  3  00 30 7C 30          .byte 0,48,124,48,48,48,28,0
006D11  3  30 30 1C 00  
006D15  3  D4 E0 E0 E0          .byte 212,224,224,224,224,224,224,192
006D19  3  E0 E0 E0 C0  
006D1D  3  7F FE D5 E0          .byte 127,254,213,224,224,224,252,248
006D21  3  E0 E0 FC F8  
006D25  3  00 00 1F 27          .byte 0,0,31,39,74,85,72,87
006D29  3  4A 55 48 57  
006D2D  3  7E 81 B1 B1          .byte 126,129,177,177,129,133,129,126
006D31  3  81 85 81 7E  
006D35  3  00 00 78 7C          .byte 0,0,120,124,46,86,14,86
006D39  3  2E 56 0E 56  
006D3D  3  00 28 28 5C          .byte 0,40,40,92,92,92,0,40
006D41  3  5C 5C 00 28  
006D45  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
006D49  3  18 18 1E 00  
006D4D  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
006D51  3  18 18 18 00  
006D55  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
006D59  3  30 30 F0 00  
006D5D  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
006D61  3  00 00 00 00  
006D65  3  3C 42 99 A1          .byte 60,66,153,161,161,153,66,60
006D69  3  A1 99 42 3C  
006D6D  3               jtab:
006D6D  3  F9 FA FB FE          .byte 249,250,251,254,254,255,255,255,0,0,0,1,1,1,2,2,6,7,6,15,16,99
006D71  3  FE FF FF FF  
006D75  3  00 00 00 01  
006D83  3  14 24 63 04  keys:   .byte 20,36,99,4,144,21,132,33,17,1,146
006D87  3  90 15 84 21  
006D8B  3  11 01 92     
006D8E  3               
006D8E  2               
006D8E  1               	.include "z80.asm"
006D8E  2               ;------------------------------------------------------
006D8E  2               ; z80.asm
006D8E  2               ; spectrum stuff
006D8E  2               ; adresses
006D8E  2               
006D8E  2               
006D8E  2               ; Contains seperatly 1 bit set
006D8E  2               
006D8E  2               _bitmem0	= $f8
006D8E  2               _bitmem1	= $f9
006D8E  2               _bitmem2	= $fa
006D8E  2               _bitmem3	= $fb
006D8E  2               _bitmem4	= $fc
006D8E  2               _bitmem5	= $fd
006D8E  2               _bitmem6	= $fe
006D8E  2               _bitmem7	= $ff
006D8E  2               
006D8E  2               ; constants
006D8E  2               _bitvalue0	= $01
006D8E  2               _bitvalue1	= $02
006D8E  2               _bitvalue2	= $04
006D8E  2               _bitvalue3	= $08
006D8E  2               _bitvalue4	= $10
006D8E  2               _bitvalue5	= $20
006D8E  2               _bitvalue6	= $40
006D8E  2               _bitvalue7	= $80
006D8E  2               
006D8E  2               _notbitvalue0	= $fe
006D8E  2               _notbitvalue1	= $fd
006D8E  2               _notbitvalue2	= $fb
006D8E  2               _notbitvalue3	= $f7
006D8E  2               _notbitvalue4	= $ef
006D8E  2               _notbitvalue5	= $df
006D8E  2               _notbitvalue6	= $bf
006D8E  2               _notbitvalue7	= $7f
006D8E  2               
006D8E  2               
006D8E  2               exx:
006D8E  2  A5 62        		lda z80_c
006D90  2  A4 6E        		ldy z80_cp
006D92  2  84 62        		sty z80_c
006D94  2  85 6E        		sta z80_cp
006D96  2  A5 63        		lda z80_b
006D98  2  A4 6F        		ldy z80_bp
006D9A  2  84 63        		sty z80_b
006D9C  2  85 6F        		sta z80_bp
006D9E  2  A5 64        		lda z80_e
006DA0  2  A4 70        		ldy z80_ep
006DA2  2  84 64        		sty z80_e
006DA4  2  85 70        		sta z80_ep
006DA6  2  A5 65        		lda z80_d
006DA8  2  A4 71        		ldy z80_dp
006DAA  2  84 65        		sty z80_d
006DAC  2  85 71        		sta z80_dp
006DAE  2  A5 rr        		lda scraddr
006DB0  2  A4 72        		ldy z80_lp
006DB2  2  84 rr        		sty scraddr
006DB4  2  85 72        		sta z80_lp
006DB6  2  A5 rr        		lda scraddr+1
006DB8  2  A4 73        		ldy z80_hp
006DBA  2  84 rr        		sty scraddr+1
006DBC  2  85 73        		sta z80_hp
006DBE  2  60           		rts
006DBF  2               
006DBF  2               
006DBF  1               eind_asm:
006DBF  1               eop:					; End Of Program
006DBF  1               
006DBF  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(32000-eind_asm + start_asm))
006DBF  1               
